[["index.html", "Indirect Obesity Forecasting Proxy Health Evaluation System (PHES) 1 Introduction Dataset Overview Audience and Impact Challenges in Health Insurance Medical Professional Engagement Research Questions Adoption and Implementation Strategic Impact", " Indirect Obesity Forecasting Proxy Health Evaluation System (PHES) Aaron Zhao Arneet Singh Blake Waldman Grace Coleman Tyler James Phillips Yousuf Altameemi April 18, 2024 1 Introduction Dataset Overview For our final project and presentation, we will be exploring comprehensive obesity data from Kaggle. This dataset provides information on individuals with key attributes such as age, gender, height, weight, eating habits, physical activities, and their corresponding obesity levels. Audience and Impact The primary audience for our presentation consists of management-level policymakers and financial planning teams within health insurance companies, with a focus on those responsible for designing wellness and preventive health programs. Additionally, we aim to reach medical professionals, including primary care physicians and dieticians, who play direct roles in patient healthcare. We believe these individuals will hold significant influence in adopting and implementing predictive analytics in patient care. Challenges in Health Insurance For health insurance companies, those responsible for policy-making and health program development face a financial challenge to prevent the higher costs associated with treating obesity-related illnesses. Since insurers cannot charge extra based on an individual’s obesity level, implementing health programs becomes beneficial. Our predictive model will offer potential savings by accurately identifying an individual’s obesity level or potential future risk. More importantly, by implementing health programs, it enhances customer satisfaction. Medical Professional Engagement For medical professionals, particularly those in primary care, our model serves as a toolset for identifying patients with an increased risk of developing obesity. This early detection enables them to effectively initiate eating habit interventions, potentially preventing obesity and related complications. Research Questions We hope that through working with this particular dataset, we can answer the following questions: What is an individual’s current health status regarding obesity? Which individuals are most likely to develop obesity based on extensive lifestyle assessments? How can these insights be incorporated into personalized health programs to address potential obesity proactively, leading to cost savings in future healthcare expenditures and improved patient health outcomes? Adoption and Implementation The adoption of our model will allow health insurance companies to enhance their health insurance policies, creating more targeted health intervention programs aimed at decreasing obesity incidence rates among insured clients. For medical professionals, the incorporation of this tool brings about more accurate patient health and early interventions. It is essential to note that customers should be made aware they will be participating in this program, with a focus on eliminating the stigma surrounding obesity status and fostering a healthier perspective towards physical well-being. Strategic Impact Integrating our predictive models into healthcare decision-making processes enables health insurance providers and medical professionals to combat the obesity epidemic more effectively. By employing a data-driven approach, we can tackle the financial strain on the healthcare system and provide better patient health outcomes. Recent studies suggest that insurance providers could potentially save up to $2,505 annually per individual by implementing this strategy. This substantial financial benefit showcases the importance of investing in predictive analytics and personalized health interventions. "],["initial-analysis.html", "2 Initial Analysis R Packages and Setup 2.1 Load Data 2.2 Clean Data 2.3 Feature Engineering 2.4 Visualize Data 2.5 Split Data", " 2 Initial Analysis R Packages and Setup 2.1 Load Data Let’s begin by loading the dataset and examining its crucial variables and values. # Load data raw &lt;- read.csv(&#39;obesity_level.csv&#39;) # Display statistics str(raw) ## &#39;data.frame&#39;: 20758 obs. of 18 variables: ## $ id : int 0 1 2 3 4 5 6 7 8 9 ... ## $ Gender : chr &quot;Male&quot; &quot;Female&quot; &quot;Female&quot; &quot;Female&quot; ... ## $ Age : num 24.4 18 18 21 31.6 ... ## $ Height : num 1.7 1.56 1.71 1.71 1.91 ... ## $ Weight : num 81.7 57 50.2 131.3 93.8 ... ## $ family_history_with_overweight: int 1 1 1 1 1 1 1 1 0 1 ... ## $ FAVC : int 1 1 1 1 1 1 1 1 1 1 ... ## $ FCVC : num 2 2 1.88 3 2.68 ... ## $ NCP : num 2.98 3 1.41 3 1.97 ... ## $ CAEC : chr &quot;Sometimes&quot; &quot;Frequently&quot; &quot;Sometimes&quot; &quot;Sometimes&quot; ... ## $ SMOKE : int 0 0 0 0 0 0 0 0 0 0 ... ## $ CH2O : num 2.76 2 1.91 1.67 1.98 ... ## $ SCC : int 0 0 0 0 0 0 0 0 1 0 ... ## $ FAF : num 0 1 0.866 1.468 1.968 ... ## $ TUE : num 0.976 1 1.674 0.78 0.932 ... ## $ CALC : chr &quot;Sometimes&quot; &quot;0&quot; &quot;0&quot; &quot;Sometimes&quot; ... ## $ MTRANS : chr &quot;Public_Transportation&quot; &quot;Automobile&quot; &quot;Public_Transportation&quot; &quot;Public_Transportation&quot; ... ## $ X0be1dad : chr &quot;Overweight_Level_II&quot; &quot;0rmal_Weight&quot; &quot;Insufficient_Weight&quot; &quot;Obesity_Type_III&quot; ... summary(raw) ## id Gender Age Height ## Min. : 0 Length:20758 Min. :14.00 Min. :1.450 ## 1st Qu.: 5189 Class :character 1st Qu.:20.00 1st Qu.:1.632 ## Median :10378 Mode :character Median :22.82 Median :1.700 ## Mean :10378 Mean :23.84 Mean :1.700 ## 3rd Qu.:15568 3rd Qu.:26.00 3rd Qu.:1.763 ## Max. :20757 Max. :61.00 Max. :1.976 ## Weight family_history_with_overweight FAVC ## Min. : 39.00 Min. :0.0000 Min. :0.0000 ## 1st Qu.: 66.00 1st Qu.:1.0000 1st Qu.:1.0000 ## Median : 84.06 Median :1.0000 Median :1.0000 ## Mean : 87.89 Mean :0.8196 Mean :0.9144 ## 3rd Qu.:111.60 3rd Qu.:1.0000 3rd Qu.:1.0000 ## Max. :165.06 Max. :1.0000 Max. :1.0000 ## FCVC NCP CAEC SMOKE ## Min. :1.000 Min. :1.000 Length:20758 Min. :0.0000 ## 1st Qu.:2.000 1st Qu.:3.000 Class :character 1st Qu.:0.0000 ## Median :2.394 Median :3.000 Mode :character Median :0.0000 ## Mean :2.446 Mean :2.761 Mean :0.0118 ## 3rd Qu.:3.000 3rd Qu.:3.000 3rd Qu.:0.0000 ## Max. :3.000 Max. :4.000 Max. :1.0000 ## CH2O SCC FAF TUE ## Min. :1.000 Min. :0.0000 Min. :0.000000 Min. :0.0000 ## 1st Qu.:1.792 1st Qu.:0.0000 1st Qu.:0.008013 1st Qu.:0.0000 ## Median :2.000 Median :0.0000 Median :1.000000 Median :0.5739 ## Mean :2.029 Mean :0.0331 Mean :0.981747 Mean :0.6168 ## 3rd Qu.:2.550 3rd Qu.:0.0000 3rd Qu.:1.587406 3rd Qu.:1.0000 ## Max. :3.000 Max. :1.0000 Max. :3.000000 Max. :2.0000 ## CALC MTRANS X0be1dad ## Length:20758 Length:20758 Length:20758 ## Class :character Class :character Class :character ## Mode :character Mode :character Mode :character ## ## ## head(raw) ## id Gender Age Height Weight family_history_with_overweight FAVC ## 1 0 Male 24.44301 1.699998 81.66995 1 1 ## 2 1 Female 18.00000 1.560000 57.00000 1 1 ## 3 2 Female 18.00000 1.711460 50.16575 1 1 ## 4 3 Female 20.95274 1.710730 131.27485 1 1 ## 5 4 Male 31.64108 1.914186 93.79806 1 1 ## 6 5 Male 18.12825 1.748524 51.55259 1 1 ## FCVC NCP CAEC SMOKE CH2O SCC FAF TUE CALC ## 1 2.000000 2.983297 Sometimes 0 2.763573 0 0.000000 0.976473 Sometimes ## 2 2.000000 3.000000 Frequently 0 2.000000 0 1.000000 1.000000 0 ## 3 1.880534 1.411685 Sometimes 0 1.910378 0 0.866045 1.673584 0 ## 4 3.000000 3.000000 Sometimes 0 1.674061 0 1.467863 0.780199 Sometimes ## 5 2.679664 1.971472 Sometimes 0 1.979848 0 1.967973 0.931721 Sometimes ## 6 2.919751 3.000000 Sometimes 0 2.137550 0 1.930033 1.000000 Sometimes ## MTRANS X0be1dad ## 1 Public_Transportation Overweight_Level_II ## 2 Automobile 0rmal_Weight ## 3 Public_Transportation Insufficient_Weight ## 4 Public_Transportation Obesity_Type_III ## 5 Public_Transportation Overweight_Level_II ## 6 Public_Transportation Insufficient_Weight According to the dataset, the following facts can be observed: Biometric Variables: Gender (Gender): Indicates whether the individual is male or female. Age (Age): Specifies the age of each individual. Height (Height): Records the height in meters of each person in the dataset. (not used in our analysis) Weight (Weight): Captures the weight in kilograms of each individual. (not used in our analysis) Medical and Health-related Factors: Family History with Overweight (family_history_with_overweight): Tracks whether individuals have a familial history of being overweight. Smoking Status(SMOKE): Indicates whether individuals are smokers or non-smokers. Dietary Habits: Frequent Consumption of High-caloric Food (FAVC): Observes if individuals frequently consume high-caloric foods. Frequency of Consumption of Vegetables (FCVC): Measures how frequently individuals incorporate vegetables into their diet. Number of Main Meals (NCP): Records the number of main meals individuals consume in a day. Consumption of Food Between Meals (CAEC): Tracks individuals’ consumption of food between regular meals. Daily Water Consumption (CH2O): Monitors the amount of water individuals consume daily in liters. Caloric Beverages Consumption (SCC): Notes the intake of caloric beverages. Consumption of Alcohol (CALC): Observes whether an individual consumes alcohol or not. Physical Activity: Physical Activity Frequency (FAF): Records how often individuals engage in physical activities in a week. Time Spent Using Technological Devices (TUE): Measures the amount of time individuals spend using technological devices. Mode of Transportation (MTRANS): Observes the mode of transportation individuals use in their daily routines. Outcome Variable: Obesity Level (0be1dad): indicates if someone is obese or not. 2.2 Clean Data We will perform data cleaning in the following steps, as the dataset is rather messy. # Copy raw data cleaned &lt;- raw # Drop unnecessary columns cleaned &lt;- cleaned %&gt;% select(-id, -Weight, -Height) # Rename columns cols_to_rename &lt;- c( &#39;Gender&#39; = &#39;gender&#39;, &#39;Age&#39; = &#39;age&#39;, # &#39;Height&#39; = &#39;height&#39;, # &#39;Weight&#39; = &#39;weight&#39;, &#39;family_history_with_overweight&#39; = &#39;fam_history_overweight&#39;, &#39;FAVC&#39; = &#39;freq_consumption_hc_food&#39;, &#39;FCVC&#39; = &#39;veg_freq&#39;, &#39;NCP&#39; = &#39;num_meals&#39;, &#39;CAEC&#39; = &#39;food_between_meals&#39;, &#39;SMOKE&#39; = &#39;smoke&#39;, &#39;CH2O&#39; = &#39;water_daily&#39;, &#39;SCC&#39; = &#39;caloric_beverages&#39;, &#39;FAF&#39; = &#39;activity_freq&#39;, &#39;TUE&#39; = &#39;tech_use&#39;, &#39;CALC&#39; = &#39;alcohol&#39;, &#39;MTRANS&#39; = &#39;transport&#39;, &#39;X0be1dad&#39; = &#39;obesity_level&#39; ) names(cleaned) &lt;- cols_to_rename[names(cleaned)] # Simplify columns cleaned &lt;- cleaned %&gt;% mutate(age = as.integer(round(age)), # height = round(height, digits = 2), # weight = round(weight, digits = 2), food_between_meals = ifelse(food_between_meals == 0, &#39;Never&#39;, food_between_meals), alcohol = ifelse(alcohol == 0, &#39;Never&#39;, alcohol), obesity_level = case_when( obesity_level %in% c(&#39;Insufficient_Weight&#39;, &#39;0rmal_Weight&#39;) ~ &#39;normal_weight&#39;, obesity_level %in% c(&#39;Obesity_Type_I&#39;, &#39;Obesity_Type_II&#39;, &#39;Obesity_Type_III&#39;, &#39;Overweight_Level_I&#39;, &#39;Overweight_Level_II&#39;) ~ &#39;overweight&#39;, TRUE ~ obesity_level)) # Convert columns to factors cols_to_factor &lt;- c(&#39;gender&#39;, &#39;fam_history_overweight&#39;, &#39;freq_consumption_hc_food&#39;, &#39;food_between_meals&#39;, &#39;smoke&#39;, &#39;alcohol&#39;, &#39;caloric_beverages&#39;, &#39;transport&#39;, &#39;obesity_level&#39;) cleaned[cols_to_factor] &lt;- lapply(cleaned[cols_to_factor], as.factor) # Display data str(cleaned) ## &#39;data.frame&#39;: 20758 obs. of 15 variables: ## $ gender : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 1 1 1 2 2 2 2 2 1 ... ## $ age : int 24 18 18 21 32 18 30 30 17 26 ... ## $ fam_history_overweight : Factor w/ 2 levels &quot;0&quot;,&quot;1&quot;: 2 2 2 2 2 2 2 2 1 2 ... ## $ freq_consumption_hc_food: Factor w/ 2 levels &quot;0&quot;,&quot;1&quot;: 2 2 2 2 2 2 2 2 2 2 ... ## $ veg_freq : num 2 2 1.88 3 2.68 ... ## $ num_meals : num 2.98 3 1.41 3 1.97 ... ## $ food_between_meals : Factor w/ 4 levels &quot;Always&quot;,&quot;Frequently&quot;,..: 4 2 4 4 4 4 4 4 4 4 ... ## $ smoke : Factor w/ 2 levels &quot;0&quot;,&quot;1&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ water_daily : num 2.76 2 1.91 1.67 1.98 ... ## $ caloric_beverages : Factor w/ 2 levels &quot;0&quot;,&quot;1&quot;: 1 1 1 1 1 1 1 1 2 1 ... ## $ activity_freq : num 0 1 0.866 1.468 1.968 ... ## $ tech_use : num 0.976 1 1.674 0.78 0.932 ... ## $ alcohol : Factor w/ 3 levels &quot;Frequently&quot;,&quot;Never&quot;,..: 3 2 2 3 3 3 3 3 2 3 ... ## $ transport : Factor w/ 5 levels &quot;Automobile&quot;,&quot;Bike&quot;,..: 4 1 4 4 4 4 1 1 4 4 ... ## $ obesity_level : Factor w/ 2 levels &quot;normal_weight&quot;,..: 2 1 1 2 2 1 2 2 2 2 ... summary(cleaned) ## gender age fam_history_overweight freq_consumption_hc_food ## Female:10422 Min. :14.00 0: 3744 0: 1776 ## Male :10336 1st Qu.:20.00 1:17014 1:18982 ## Median :23.00 ## Mean :23.85 ## 3rd Qu.:26.00 ## Max. :61.00 ## veg_freq num_meals food_between_meals smoke water_daily ## Min. :1.000 Min. :1.000 Always : 478 0:20513 Min. :1.000 ## 1st Qu.:2.000 1st Qu.:3.000 Frequently: 2472 1: 245 1st Qu.:1.792 ## Median :2.394 Median :3.000 Never : 279 Median :2.000 ## Mean :2.446 Mean :2.761 Sometimes :17529 Mean :2.029 ## 3rd Qu.:3.000 3rd Qu.:3.000 3rd Qu.:2.550 ## Max. :3.000 Max. :4.000 Max. :3.000 ## caloric_beverages activity_freq tech_use alcohol ## 0:20071 Min. :0.000000 Min. :0.0000 Frequently: 529 ## 1: 687 1st Qu.:0.008013 1st Qu.:0.0000 Never : 5163 ## Median :1.000000 Median :0.5739 Sometimes :15066 ## Mean :0.981747 Mean :0.6168 ## 3rd Qu.:1.587406 3rd Qu.:1.0000 ## Max. :3.000000 Max. :2.0000 ## transport obesity_level ## Automobile : 3534 normal_weight: 5605 ## Bike : 32 overweight :15153 ## Motorbike : 38 ## Public_Transportation:16687 ## Walking : 467 ## head(cleaned) ## gender age fam_history_overweight freq_consumption_hc_food veg_freq num_meals ## 1 Male 24 1 1 2.000000 2.983297 ## 2 Female 18 1 1 2.000000 3.000000 ## 3 Female 18 1 1 1.880534 1.411685 ## 4 Female 21 1 1 3.000000 3.000000 ## 5 Male 32 1 1 2.679664 1.971472 ## 6 Male 18 1 1 2.919751 3.000000 ## food_between_meals smoke water_daily caloric_beverages activity_freq tech_use ## 1 Sometimes 0 2.763573 0 0.000000 0.976473 ## 2 Frequently 0 2.000000 0 1.000000 1.000000 ## 3 Sometimes 0 1.910378 0 0.866045 1.673584 ## 4 Sometimes 0 1.674061 0 1.467863 0.780199 ## 5 Sometimes 0 1.979848 0 1.967973 0.931721 ## 6 Sometimes 0 2.137550 0 1.930033 1.000000 ## alcohol transport obesity_level ## 1 Sometimes Public_Transportation overweight ## 2 Never Automobile normal_weight ## 3 Never Public_Transportation normal_weight ## 4 Sometimes Public_Transportation overweight ## 5 Sometimes Public_Transportation overweight ## 6 Sometimes Public_Transportation normal_weight 2.3 Feature Engineering With the dataset cleaned, we will now attempt some basic levels of feature engineering. This is beneficial when dealing with datasets having a limited number of columns, and can help reveal underlying dynamics between key variables. We will perform the following feature engineering techniques: Create binary outcomes for eating habits based on individual records. Higher scores may suggest healthier eating habits. Develop binary outcomes for physical activities. Classify age groups categorically, which could help uncover age-specific trends related to obesity. Note that we are not using BMI, Height, or Weight as predictors given that we are trying to build models without these variables. # Create BMI column # cleaned$bmi &lt;- cleaned$weight / (cleaned$height ^ 2) # Create weight to height ratio # cleaned$weight_to_height_ratio &lt;- cleaned$weight / cleaned$height # Create eating habit binary outcome cleaned$eating_habit_binary &lt;- ( as.numeric(cleaned$freq_consumption_hc_food) + as.numeric(cleaned$veg_freq) + as.numeric(cleaned$num_meals))/3 # Create physical activity binary outcome cleaned$physical_activity_binary &lt;- cleaned$activity_freq - cleaned$tech_use # Create age group cleaned$age_group &lt;- cut(cleaned$age, breaks = c(-Inf, 18, 35, 50, Inf), labels = c(&#39;Teen&#39;, &#39;Young Adult&#39;, &#39;Adult&#39;, &#39;Senior&#39;), right = FALSE) # Create water intake per weight # cleaned$water_intake_per_weight &lt;- (cleaned$water_daily / cleaned$weight) * 100 # Display data str(cleaned) ## &#39;data.frame&#39;: 20758 obs. of 18 variables: ## $ gender : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 1 1 1 2 2 2 2 2 1 ... ## $ age : int 24 18 18 21 32 18 30 30 17 26 ... ## $ fam_history_overweight : Factor w/ 2 levels &quot;0&quot;,&quot;1&quot;: 2 2 2 2 2 2 2 2 1 2 ... ## $ freq_consumption_hc_food: Factor w/ 2 levels &quot;0&quot;,&quot;1&quot;: 2 2 2 2 2 2 2 2 2 2 ... ## $ veg_freq : num 2 2 1.88 3 2.68 ... ## $ num_meals : num 2.98 3 1.41 3 1.97 ... ## $ food_between_meals : Factor w/ 4 levels &quot;Always&quot;,&quot;Frequently&quot;,..: 4 2 4 4 4 4 4 4 4 4 ... ## $ smoke : Factor w/ 2 levels &quot;0&quot;,&quot;1&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ water_daily : num 2.76 2 1.91 1.67 1.98 ... ## $ caloric_beverages : Factor w/ 2 levels &quot;0&quot;,&quot;1&quot;: 1 1 1 1 1 1 1 1 2 1 ... ## $ activity_freq : num 0 1 0.866 1.468 1.968 ... ## $ tech_use : num 0.976 1 1.674 0.78 0.932 ... ## $ alcohol : Factor w/ 3 levels &quot;Frequently&quot;,&quot;Never&quot;,..: 3 2 2 3 3 3 3 3 2 3 ... ## $ transport : Factor w/ 5 levels &quot;Automobile&quot;,&quot;Bike&quot;,..: 4 1 4 4 4 4 1 1 4 4 ... ## $ obesity_level : Factor w/ 2 levels &quot;normal_weight&quot;,..: 2 1 1 2 2 1 2 2 2 2 ... ## $ eating_habit_binary : num 2.33 2.33 1.76 2.67 2.22 ... ## $ physical_activity_binary: num -0.976 0 -0.808 0.688 1.036 ... ## $ age_group : Factor w/ 4 levels &quot;Teen&quot;,&quot;Young Adult&quot;,..: 2 2 2 2 2 2 2 2 1 2 ... summary(cleaned) ## gender age fam_history_overweight freq_consumption_hc_food ## Female:10422 Min. :14.00 0: 3744 0: 1776 ## Male :10336 1st Qu.:20.00 1:17014 1:18982 ## Median :23.00 ## Mean :23.85 ## 3rd Qu.:26.00 ## Max. :61.00 ## veg_freq num_meals food_between_meals smoke water_daily ## Min. :1.000 Min. :1.000 Always : 478 0:20513 Min. :1.000 ## 1st Qu.:2.000 1st Qu.:3.000 Frequently: 2472 1: 245 1st Qu.:1.792 ## Median :2.394 Median :3.000 Never : 279 Median :2.000 ## Mean :2.446 Mean :2.761 Sometimes :17529 Mean :2.029 ## 3rd Qu.:3.000 3rd Qu.:3.000 3rd Qu.:2.550 ## Max. :3.000 Max. :4.000 Max. :3.000 ## caloric_beverages activity_freq tech_use alcohol ## 0:20071 Min. :0.000000 Min. :0.0000 Frequently: 529 ## 1: 687 1st Qu.:0.008013 1st Qu.:0.0000 Never : 5163 ## Median :1.000000 Median :0.5739 Sometimes :15066 ## Mean :0.981747 Mean :0.6168 ## 3rd Qu.:1.587406 3rd Qu.:1.0000 ## Max. :3.000000 Max. :2.0000 ## transport obesity_level eating_habit_binary ## Automobile : 3534 normal_weight: 5605 Min. :1.000 ## Bike : 32 overweight :15153 1st Qu.:2.308 ## Motorbike : 38 Median :2.333 ## Public_Transportation:16687 Mean :2.374 ## Walking : 467 3rd Qu.:2.667 ## Max. :3.000 ## physical_activity_binary age_group ## Min. :-2.0000 Teen : 892 ## 1st Qu.:-0.2749 Young Adult:18712 ## Median : 0.2859 Adult : 1083 ## Mean : 0.3650 Senior : 71 ## 3rd Qu.: 1.0000 ## Max. : 3.0000 head(cleaned) ## gender age fam_history_overweight freq_consumption_hc_food veg_freq num_meals ## 1 Male 24 1 1 2.000000 2.983297 ## 2 Female 18 1 1 2.000000 3.000000 ## 3 Female 18 1 1 1.880534 1.411685 ## 4 Female 21 1 1 3.000000 3.000000 ## 5 Male 32 1 1 2.679664 1.971472 ## 6 Male 18 1 1 2.919751 3.000000 ## food_between_meals smoke water_daily caloric_beverages activity_freq tech_use ## 1 Sometimes 0 2.763573 0 0.000000 0.976473 ## 2 Frequently 0 2.000000 0 1.000000 1.000000 ## 3 Sometimes 0 1.910378 0 0.866045 1.673584 ## 4 Sometimes 0 1.674061 0 1.467863 0.780199 ## 5 Sometimes 0 1.979848 0 1.967973 0.931721 ## 6 Sometimes 0 2.137550 0 1.930033 1.000000 ## alcohol transport obesity_level eating_habit_binary ## 1 Sometimes Public_Transportation overweight 2.327766 ## 2 Never Automobile normal_weight 2.333333 ## 3 Never Public_Transportation normal_weight 1.764073 ## 4 Sometimes Public_Transportation overweight 2.666667 ## 5 Sometimes Public_Transportation overweight 2.217045 ## 6 Sometimes Public_Transportation normal_weight 2.639917 ## physical_activity_binary age_group ## 1 -0.976473 Young Adult ## 2 0.000000 Young Adult ## 3 -0.807539 Young Adult ## 4 0.687664 Young Adult ## 5 1.036252 Young Adult ## 6 0.930033 Young Adult 2.4 Visualize Data Now that all features have been added, we will proceed with our exploratory data analysis # Identify categorical and numerical columns categorical_cols &lt;- sapply(cleaned, is.factor) numerical_cols &lt;- sapply(cleaned, is.numeric) # Exclude certain columns exclude_cols &lt;- c(&#39;weight&#39;, &#39;height&#39;) # Frequency charts for (col in names(cleaned)[categorical_cols]) { if (!(col %in% exclude_cols)) { freq_table &lt;- table(cleaned[[col]]) freq_df &lt;- as.data.frame(freq_table) colnames(freq_df) &lt;- c(&#39;Category&#39;, &#39;Frequency&#39;) plot &lt;- ggplot(freq_df, aes(x = Category, y = Frequency)) + geom_bar(stat = &#39;identity&#39;) + labs(title = paste(&#39;Frequency Chart for&#39;, col)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) print(plot) } } # Histograms for (col in names(cleaned)[numerical_cols]) { if (!(col %in% exclude_cols)) { if (col == &#39;height&#39;) { plot &lt;- ggplot(cleaned, aes(x = !!sym(col))) + geom_histogram(binwidth = 0.05, fill = &#39;skyblue&#39;, color = &#39;black&#39;) + labs(title = paste(&#39;Histogram for&#39;, col)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) } else if (col == &#39;weight&#39;) { plot &lt;- ggplot(cleaned, aes(x = !!sym(col))) + geom_histogram(binwidth = 10, fill = &#39;skyblue&#39;, color = &#39;black&#39;) + labs(title = paste(&#39;Histogram for&#39;, col)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) } else { plot &lt;- ggplot(cleaned, aes(x = !!sym(col))) + geom_histogram(binwidth = 1, fill = &#39;skyblue&#39;, color = &#39;black&#39;) + labs(title = paste(&#39;Histogram for&#39;, col)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) } print(plot) } } # Correlation matrix corrplot(cor(cleaned[, numerical_cols]), method=&quot;color&quot;, addCoef.col = &quot;black&quot;, number.cex = 0.9, tl.cex = 1, tl.col=&quot;black&quot;, tl.srt=45, type = &#39;upper&#39;, order = &#39;alphabet&#39;, number.digits = 1) Based on the visuals, we can see that: Gender: This shows a nearly equal distribution between female and male categories, indicating that both genders are nearly equally represented in the dataset. Family History of Overweight: There’s a higher frequency for individuals with a family history of being overweight. This suggests that there is a potential genetic or familial component contributing to obesity, as many individuals in this sample have a family history of overweight conditions. Frequency of High-Calorie Food Consumption: This shows that there is an overwhelmingly high frequency of individuals who consume high-calorie foods. Regular consumption of high-calorie food is strongly associated with weight gain and obesity. Food Between Meals: This displays the frequency of eating between meals, with ‘Sometimes’ being the most common response. Frequent snacking can contribute to an increased caloric intake, which is a risk factor for obesity. Smoking: This indicates that most individuals in the dataset do not smoke. While smoking has been associated with lower body weight due to nicotine’s appetite suppressant effects, the high non-smoking frequency shown here indicates that, within this dataset, smoking status may not be a primary factor in obesity. Caloric Beverage Consumption: A higher frequency of individuals in the dataset do not consume caloric beverages often. This suggests that habitual consumption of sugary drinks is not common in this sample. However, for those who do consume these beverages, it could be a contributing factor to caloric surplus and weight gain. Alcohol Consumption: More individuals report ‘Sometimes’ consuming alcohol. Alcohol can be calorically dense and may contribute to weight gain if consumed in large or frequent amounts. Age Group: ‘Young Adult’ is the most frequent age group in the dataset, followed by a significantly smaller number of ‘Adults’ and ‘Teens,’ with ‘Seniors’ being the least frequent. Age can influence metabolism, lifestyle choices, and thus risk of obesity. Vegetable Consumption Frequency: This histogram may indicate how frequently individuals consume vegetables. A higher intake of vegetables is generally associated with healthier eating patterns, which can contribute to a lower risk of obesity. Number of Meals: This shows the distribution of the number of meals participants report having each day. Eating patterns, including the number of meals daily, might influence weight and overall health, although the relationship can be complex. Daily Water Intake: Proper hydration can affect appetite and metabolism, both of which play a role in maintaining a healthy weight. BMI: BMI is a key index used to categorize individuals according to their risk of weight-related health problems. This histogram shows the BMI distribution, which directly relates to the study of obesity. Weight to Height Ratio: This could be another indicator of body composition, similar to BMI but not necessarily the same calculation. Ratios that are higher might indicate higher levels of overweight or obesity. Water Intake By weight: This chart shows the amount of water intake relative to body weight. Similar to daily water intake distribution chart, hydration status normalized by weight may provide insights into individual health behaviors. 2.5 Split Data We will initially split the data with a 50-50 ratio for train and test sets in our stacked models, reserving sufficient data for re-splitting during the second level model. # Copy cleaned data split &lt;- cleaned # Dummy data dummied &lt;- as.data.frame(model.matrix(~.-1,split)) # Clean up data dummied &lt;- clean_names(dummied) # Set seed for reproducibility set.seed(12345) # Define training set ratio train_ratio &lt;- 0.50 # Randomly sample training set train_rows &lt;- sample(1:nrow(dummied), train_ratio * nrow(dummied)) 2.5.1 Split Train Test # Train test split train &lt;- dummied[train_rows, ] test &lt;- dummied[-train_rows, ] 2.5.2 Split LR # LR split train_lr &lt;- dummied[train_rows, ] test_lr &lt;- dummied[-train_rows, ] 2.5.3 Split DT # DT Split train_dt &lt;- dummied[train_rows, ] test_dt &lt;- dummied[-train_rows, ] 2.5.4 Split SVM # DT Split train_svm &lt;- dummied[train_rows, ] test_svm &lt;- dummied[-train_rows, ] 2.5.5 Split RF # DT Split train_rf &lt;- dummied[train_rows, ] test_rf &lt;- dummied[-train_rows, ] 2.5.6 Split XGB # DT Split train_xgb &lt;- dummied[train_rows, ] test_xgb &lt;- dummied[-train_rows, ] 2.5.7 Split ANN Remember that ANN necessitate normalized data. We will implement min-max normalization, excluding the outcome variable, for successful integration into our models. # ANN split # Normalize data normalize &lt;- function(x) { return ((x - min(x)) / (max(x) - min(x))) } outcome_variable &lt;- dummied$obesity_leveloverweight dummied &lt;- as.data.frame(lapply( dummied[,!names(dummied) %in% &#39;obesity_leveloverweight&#39;], normalize)) dummied$obesity_leveloverweight &lt;- outcome_variable # ANN split train_ann &lt;- dummied[train_rows, ] test_ann &lt;- dummied[-train_rows, ] 2.5.8 Split KNN Similar to ANN, KNN also require a min-max normalized dataset for optimal performance. Additionally, it is essential to distinguish between predictor and outcome variables when running the model. # KNN split train_knn &lt;- train_ann test_knn &lt;- test_ann train_knn_x &lt;- train_knn train_knn_x$obesity_leveloverweight &lt;- NULL train_knn_y &lt;- train_knn$obesity_leveloverweight test_knn_x &lt;- test_knn test_knn_x$obesity_leveloverweight &lt;- NULL test_knn_y &lt;- test_knn$obesity_leveloverweight Once all train and test sets have been split, we will proceed to module 1 for L1 modeling. "],["logistic-regression-lr.html", "3 Logistic Regression (LR) R Packages and Setup 3.1 Introduction 3.2 Load Data 3.3 Model LR 3.4 Evaluate LR", " 3 Logistic Regression (LR) R Packages and Setup 3.1 Introduction Below paragraph is copied from the assignment, we are planning on updating this as we formulate our narrative for the final deliverable: Logistic Regression (LR) is a popular algorithm for binary classification tasks, modeling the relationship between features and the probability of an event occurrence. LR’s simplicity makes it an excellent choice for initial modeling. Yet, it may struggle with complex relationships between features, limiting its performance on intricate datasets relative to other algorithms, such as RF or ANN, which will be covered in a later module. Our initial model will utilize LR. With LR, we can efficiently calculate the probability of a ‘yes’ or ‘no’ response based on all features in the dataset. 3.2 Load Data # Load data train_lr &lt;- read.csv(&#39;Train Test Set/train_lr.csv&#39;) test_lr &lt;- read.csv(&#39;Train Test Set/test_lr.csv&#39;) # Display statistics str(train_lr) ## &#39;data.frame&#39;: 10379 obs. of 27 variables: ## $ gender_female : int 1 1 1 0 1 1 1 0 1 1 ... ## $ gender_male : int 0 0 0 1 0 0 0 1 0 0 ... ## $ age : int 24 34 19 19 25 26 23 27 26 20 ... ## $ fam_history_overweight1 : int 1 1 1 1 1 1 1 1 1 0 ... ## $ freq_consumption_hc_food1 : int 1 1 1 1 1 1 0 1 1 0 ... ## $ veg_freq : num 3 2.1 3 3 3 ... ## $ num_meals : num 3 2.98 3 3 3 ... ## $ food_between_meals_frequently : int 0 0 0 0 0 0 0 0 0 1 ... ## $ food_between_meals_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ food_between_meals_sometimes : int 1 1 1 0 1 1 1 1 1 0 ... ## $ smoke1 : int 0 0 0 0 0 0 0 0 0 0 ... ## $ water_daily : num 2.47 1.96 2.87 3 2.86 ... ## $ caloric_beverages1 : int 0 0 0 1 0 0 0 0 0 0 ... ## $ activity_freq : num 0.167 0.988 1.465 3 0.265 ... ## $ tech_use : num 0.487 0 0.656 0 0.673 ... ## $ alcohol_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ alcohol_sometimes : int 1 1 1 1 1 1 1 1 1 1 ... ## $ transport_bike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_motorbike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_public_transportation: int 1 0 1 1 1 1 1 1 1 1 ... ## $ transport_walking : int 0 0 0 0 0 0 0 0 0 0 ... ## $ obesity_leveloverweight : int 1 1 1 1 1 1 1 1 1 0 ... ## $ eating_habit_binary : num 2.67 2.36 2.67 2.67 2.67 ... ## $ physical_activity_binary : num -0.32 0.988 0.809 3 -0.408 ... ## $ age_group_young_adult : int 1 1 1 1 1 1 1 1 1 1 ... ## $ age_group_adult : int 0 0 0 0 0 0 0 0 0 0 ... ## $ age_group_senior : int 0 0 0 0 0 0 0 0 0 0 ... summary(train_lr) ## gender_female gender_male age fam_history_overweight1 ## Min. :0.0000 Min. :0.0000 Min. :14.00 Min. :0.0000 ## 1st Qu.:0.0000 1st Qu.:0.0000 1st Qu.:20.00 1st Qu.:1.0000 ## Median :1.0000 Median :0.0000 Median :23.00 Median :1.0000 ## Mean :0.5079 Mean :0.4921 Mean :23.81 Mean :0.8177 ## 3rd Qu.:1.0000 3rd Qu.:1.0000 3rd Qu.:26.00 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.0000 Max. :61.00 Max. :1.0000 ## freq_consumption_hc_food1 veg_freq num_meals ## Min. :0.0000 Min. :1.000 Min. :1.000 ## 1st Qu.:1.0000 1st Qu.:2.000 1st Qu.:3.000 ## Median :1.0000 Median :2.445 Median :3.000 ## Mean :0.9166 Mean :2.452 Mean :2.758 ## 3rd Qu.:1.0000 3rd Qu.:3.000 3rd Qu.:3.000 ## Max. :1.0000 Max. :3.000 Max. :4.000 ## food_between_meals_frequently food_between_meals_never ## Min. :0.0000 Min. :0.00000 ## 1st Qu.:0.0000 1st Qu.:0.00000 ## Median :0.0000 Median :0.00000 ## Mean :0.1212 Mean :0.01253 ## 3rd Qu.:0.0000 3rd Qu.:0.00000 ## Max. :1.0000 Max. :1.00000 ## food_between_meals_sometimes smoke1 water_daily ## Min. :0.0000 Min. :0.00000 Min. :1.000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:1.796 ## Median :1.0000 Median :0.00000 Median :2.000 ## Mean :0.8446 Mean :0.01224 Mean :2.029 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:2.536 ## Max. :1.0000 Max. :1.00000 Max. :3.000 ## caloric_beverages1 activity_freq tech_use alcohol_never ## Min. :0.00000 Min. :0.00000 Min. :0.0000 Min. :0.0000 ## 1st Qu.:0.00000 1st Qu.:0.00705 1st Qu.:0.0000 1st Qu.:0.0000 ## Median :0.00000 Median :1.00000 Median :0.5740 Median :0.0000 ## Mean :0.03276 Mean :0.98097 Mean :0.6147 Mean :0.2461 ## 3rd Qu.:0.00000 3rd Qu.:1.58652 3rd Qu.:1.0000 3rd Qu.:0.0000 ## Max. :1.00000 Max. :3.00000 Max. :2.0000 Max. :1.0000 ## alcohol_sometimes transport_bike transport_motorbike ## Min. :0.0000 Min. :0.000000 Min. :0.000000 ## 1st Qu.:0.0000 1st Qu.:0.000000 1st Qu.:0.000000 ## Median :1.0000 Median :0.000000 Median :0.000000 ## Mean :0.7289 Mean :0.001734 Mean :0.001927 ## 3rd Qu.:1.0000 3rd Qu.:0.000000 3rd Qu.:0.000000 ## Max. :1.0000 Max. :1.000000 Max. :1.000000 ## transport_public_transportation transport_walking obesity_leveloverweight ## Min. :0.0000 Min. :0.00000 Min. :0.0000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:0.0000 ## Median :1.0000 Median :0.00000 Median :1.0000 ## Mean :0.8056 Mean :0.02226 Mean :0.7262 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.00000 Max. :1.0000 ## eating_habit_binary physical_activity_binary age_group_young_adult ## Min. :1.000 Min. :-2.0000 Min. :0.0000 ## 1st Qu.:2.309 1st Qu.:-0.2790 1st Qu.:1.0000 ## Median :2.333 Median : 0.2867 Median :1.0000 ## Mean :2.375 Mean : 0.3662 Mean :0.9019 ## 3rd Qu.:2.667 3rd Qu.: 1.0000 3rd Qu.:1.0000 ## Max. :3.000 Max. : 3.0000 Max. :1.0000 ## age_group_adult age_group_senior ## Min. :0.00000 Min. :0.000000 ## 1st Qu.:0.00000 1st Qu.:0.000000 ## Median :0.00000 Median :0.000000 ## Mean :0.05222 Mean :0.003276 ## 3rd Qu.:0.00000 3rd Qu.:0.000000 ## Max. :1.00000 Max. :1.000000 head(train_lr) ## gender_female gender_male age fam_history_overweight1 ## 1 1 0 24 1 ## 2 1 0 34 1 ## 3 1 0 19 1 ## 4 0 1 19 1 ## 5 1 0 25 1 ## 6 1 0 26 1 ## freq_consumption_hc_food1 veg_freq num_meals food_between_meals_frequently ## 1 1 3.000000 3.000000 0 ## 2 1 2.103335 2.977909 0 ## 3 1 3.000000 3.000000 0 ## 4 1 3.000000 3.000000 0 ## 5 1 3.000000 3.000000 0 ## 6 1 3.000000 3.000000 0 ## food_between_meals_never food_between_meals_sometimes smoke1 water_daily ## 1 0 1 0 2.472903 ## 2 0 1 0 1.964435 ## 3 0 1 0 2.865590 ## 4 0 0 0 3.000000 ## 5 0 1 0 2.863513 ## 6 0 1 0 1.347559 ## caloric_beverages1 activity_freq tech_use alcohol_never alcohol_sometimes ## 1 0 0.167086 0.486868 0 1 ## 2 0 0.987521 0.000000 0 1 ## 3 0 1.464674 0.655571 0 1 ## 4 1 3.000000 0.000000 0 1 ## 5 0 0.264831 0.673210 0 1 ## 6 0 0.217455 0.625350 0 1 ## transport_bike transport_motorbike transport_public_transportation ## 1 0 0 1 ## 2 0 0 0 ## 3 0 0 1 ## 4 0 0 1 ## 5 0 0 1 ## 6 0 0 1 ## transport_walking obesity_leveloverweight eating_habit_binary ## 1 0 1 2.666667 ## 2 0 1 2.360415 ## 3 0 1 2.666667 ## 4 0 1 2.666667 ## 5 0 1 2.666667 ## 6 0 1 2.666667 ## physical_activity_binary age_group_young_adult age_group_adult ## 1 -0.319782 1 0 ## 2 0.987521 1 0 ## 3 0.809103 1 0 ## 4 3.000000 1 0 ## 5 -0.408379 1 0 ## 6 -0.407895 1 0 ## age_group_senior ## 1 0 ## 2 0 ## 3 0 ## 4 0 ## 5 0 ## 6 0 3.3 Model LR 3.3.1 Simple LR The model we are building here is a simple LR model that utilizes all the features as predictors and considers a binary outcome labeled obesity_leveloverweight. # Build a model model_lr &lt;- glm(obesity_leveloverweight ~ ., data = train_lr, family = &#39;binomial&#39;) # Display summary summary(model_lr) ## ## Call: ## glm(formula = obesity_leveloverweight ~ ., family = &quot;binomial&quot;, ## data = train_lr) ## ## Coefficients: (3 not defined because of singularities) ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -7.42585 0.47397 -15.667 &lt; 2e-16 *** ## gender_female -0.31157 0.06955 -4.480 7.48e-06 *** ## gender_male NA NA NA NA ## age 0.30465 0.01197 25.456 &lt; 2e-16 *** ## fam_history_overweight1 2.14091 0.08097 26.441 &lt; 2e-16 *** ## freq_consumption_hc_food1 0.39004 0.10489 3.718 0.00020 *** ## veg_freq -0.15872 0.06470 -2.453 0.01416 * ## num_meals -0.60948 0.04981 -12.236 &lt; 2e-16 *** ## food_between_meals_frequently -0.10316 0.20476 -0.504 0.61441 ## food_between_meals_never 2.87107 0.32085 8.948 &lt; 2e-16 *** ## food_between_meals_sometimes 2.10943 0.18798 11.221 &lt; 2e-16 *** ## smoke1 -0.31242 0.31680 -0.986 0.32406 ## water_daily 0.91563 0.05700 16.064 &lt; 2e-16 *** ## caloric_beverages1 0.19167 0.16783 1.142 0.25342 ## activity_freq -0.13055 0.04042 -3.230 0.00124 ** ## tech_use 0.01327 0.05461 0.243 0.80800 ## alcohol_never -2.72373 0.25512 -10.676 &lt; 2e-16 *** ## alcohol_sometimes -2.18747 0.25238 -8.667 &lt; 2e-16 *** ## transport_bike -1.43488 0.67932 -2.112 0.03467 * ## transport_motorbike -0.46040 0.61308 -0.751 0.45268 ## transport_public_transportation 1.21311 0.12203 9.941 &lt; 2e-16 *** ## transport_walking 1.00078 0.21636 4.625 3.74e-06 *** ## eating_habit_binary NA NA NA NA ## physical_activity_binary NA NA NA NA ## age_group_young_adult -0.26825 0.14201 -1.889 0.05890 . ## age_group_adult -1.16505 0.40789 -2.856 0.00429 ** ## age_group_senior -6.03456 1.14111 -5.288 1.23e-07 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 12185.4 on 10378 degrees of freedom ## Residual deviance: 6445.6 on 10355 degrees of freedom ## AIC: 6493.6 ## ## Number of Fisher Scoring iterations: 6 Based on the logistic regression results, we can make the following observations: Gender: Being female is a significant predictor of being overweight, with a positive coefficient of 1.19523. This suggests that females are more likely to be overweight compared to males. Family history of overweight: Individuals with a family history of overweight have a slightly higher odds of being overweight, as indicated by the positive coefficient of 0.24989. Vegetable consumption: Higher vegetable consumption is associated with a lower likelihood of being overweight, with a negative coefficient of -0.47774. This emphasizes the importance of a balanced diet in maintaining a healthy weight. Number of meals per day: The frequency of meals per day is negatively associated with overweight status, with individuals having fewer meals per day being more likely to be overweight (coefficient of -0.49194). Alcohol consumption: Individuals who never consume alcohol are less likely to be overweight, as indicated by the negative coefficients for alcohol_never (-1.96064) and alcohol_sometimes (-1.20386). Age group: Young adults are less likely to be overweight compared to other age groups, with a negative coefficient of -0.77593. BMI, height, and weight: Surprisingly, these variables do not show a strong significance in predicting overweight status in this model. This suggests that other factors in the model may have a stronger influence on obesity level than these traditional measures of body size. 3.3.2 Complex LR # Build a model model_lr_complex &lt;- glm(obesity_leveloverweight ~ . + . * ., data = train_lr, family = &#39;binomial&#39;) # Display summary summary(model_lr_complex) ## ## Call: ## glm(formula = obesity_leveloverweight ~ . + . * ., family = &quot;binomial&quot;, ## data = train_lr) ## ## Coefficients: (95 not defined because of singularities) ## Estimate ## (Intercept) 5.019e-01 ## gender_female -1.465e+00 ## gender_male NA ## age 2.369e-01 ## fam_history_overweight1 -5.066e+00 ## freq_consumption_hc_food1 -4.037e+00 ## veg_freq -3.066e+00 ## num_meals -2.370e+00 ## food_between_meals_frequently 3.335e+00 ## food_between_meals_never -1.088e+01 ## food_between_meals_sometimes -2.040e+00 ## smoke1 -6.102e+00 ## water_daily 1.540e+00 ## caloric_beverages1 3.262e+00 ## activity_freq 2.338e+00 ## tech_use 1.486e+00 ## alcohol_never 9.049e+00 ## alcohol_sometimes 4.559e+00 ## transport_bike 1.036e+01 ## transport_motorbike 7.081e+02 ## transport_public_transportation -5.217e+00 ## transport_walking -7.578e+00 ## eating_habit_binary NA ## physical_activity_binary NA ## age_group_young_adult 8.823e+00 ## age_group_adult 6.176e+01 ## age_group_senior -1.448e+01 ## gender_female:gender_male NA ## gender_female:age -9.570e-02 ## gender_female:fam_history_overweight1 6.226e-01 ## gender_female:freq_consumption_hc_food1 5.766e-01 ## gender_female:veg_freq 4.123e-01 ## gender_female:num_meals 2.480e-01 ## gender_female:food_between_meals_frequently -5.917e-01 ## gender_female:food_between_meals_never 7.141e-01 ## gender_female:food_between_meals_sometimes 6.891e-01 ## gender_female:smoke1 -2.395e+00 ## gender_female:water_daily -6.238e-02 ## gender_female:caloric_beverages1 7.073e-01 ## gender_female:activity_freq -9.875e-02 ## gender_female:tech_use 3.005e-01 ## gender_female:alcohol_never -1.014e+00 ## gender_female:alcohol_sometimes -6.445e-01 ## gender_female:transport_bike 4.922e+01 ## gender_female:transport_motorbike 1.721e+01 ## gender_female:transport_public_transportation -2.149e-01 ## gender_female:transport_walking 7.667e-01 ## gender_female:eating_habit_binary NA ## gender_female:physical_activity_binary NA ## gender_female:age_group_young_adult 9.318e-01 ## gender_female:age_group_adult 2.281e+00 ## gender_female:age_group_senior 1.016e+01 ## gender_male:age NA ## gender_male:fam_history_overweight1 NA ## gender_male:freq_consumption_hc_food1 NA ## gender_male:veg_freq NA ## gender_male:num_meals NA ## gender_male:food_between_meals_frequently NA ## gender_male:food_between_meals_never NA ## gender_male:food_between_meals_sometimes NA ## gender_male:smoke1 NA ## gender_male:water_daily NA ## gender_male:caloric_beverages1 NA ## gender_male:activity_freq NA ## gender_male:tech_use NA ## gender_male:alcohol_never NA ## gender_male:alcohol_sometimes NA ## gender_male:transport_bike NA ## gender_male:transport_motorbike NA ## gender_male:transport_public_transportation NA ## gender_male:transport_walking NA ## gender_male:eating_habit_binary NA ## gender_male:physical_activity_binary NA ## gender_male:age_group_young_adult NA ## gender_male:age_group_adult NA ## gender_male:age_group_senior NA ## age:fam_history_overweight1 1.873e-01 ## age:freq_consumption_hc_food1 1.468e-01 ## age:veg_freq 1.114e-01 ## age:num_meals 4.091e-02 ## age:food_between_meals_frequently 8.529e-02 ## age:food_between_meals_never 4.172e-01 ## age:food_between_meals_sometimes 2.347e-01 ## age:smoke1 4.884e-01 ## age:water_daily 1.873e-02 ## age:caloric_beverages1 -4.000e-03 ## age:activity_freq -8.508e-02 ## age:tech_use 6.121e-02 ## age:alcohol_never -1.485e-01 ## age:alcohol_sometimes -1.175e-01 ## age:transport_bike 3.012e+00 ## age:transport_motorbike -5.760e+00 ## age:transport_public_transportation -9.916e-02 ## age:transport_walking -2.660e-02 ## age:eating_habit_binary NA ## age:physical_activity_binary NA ## age:age_group_young_adult -5.364e-01 ## age:age_group_adult -9.194e-01 ## age:age_group_senior -2.283e-01 ## fam_history_overweight1:freq_consumption_hc_food1 5.412e-01 ## fam_history_overweight1:veg_freq 3.266e-01 ## fam_history_overweight1:num_meals 8.520e-02 ## fam_history_overweight1:food_between_meals_frequently -1.147e+00 ## fam_history_overweight1:food_between_meals_never -1.625e+00 ## fam_history_overweight1:food_between_meals_sometimes -1.519e-01 ## fam_history_overweight1:smoke1 6.276e-01 ## fam_history_overweight1:water_daily -8.264e-02 ## fam_history_overweight1:caloric_beverages1 -4.519e-01 ## fam_history_overweight1:activity_freq -1.626e-01 ## fam_history_overweight1:tech_use 2.765e-01 ## fam_history_overweight1:alcohol_never 6.623e-03 ## fam_history_overweight1:alcohol_sometimes -1.216e-01 ## fam_history_overweight1:transport_bike 1.907e+01 ## fam_history_overweight1:transport_motorbike 1.121e+00 ## fam_history_overweight1:transport_public_transportation 2.192e+00 ## fam_history_overweight1:transport_walking 1.067e+00 ## fam_history_overweight1:eating_habit_binary NA ## fam_history_overweight1:physical_activity_binary NA ## fam_history_overweight1:age_group_young_adult 6.246e-02 ## fam_history_overweight1:age_group_adult -2.154e+00 ## fam_history_overweight1:age_group_senior -5.040e+00 ## freq_consumption_hc_food1:veg_freq -3.540e-02 ## freq_consumption_hc_food1:num_meals 3.920e-01 ## freq_consumption_hc_food1:food_between_meals_frequently -6.266e-01 ## freq_consumption_hc_food1:food_between_meals_never -5.084e-01 ## freq_consumption_hc_food1:food_between_meals_sometimes -4.705e-02 ## freq_consumption_hc_food1:smoke1 2.977e+00 ## freq_consumption_hc_food1:water_daily 3.775e-01 ## freq_consumption_hc_food1:caloric_beverages1 1.161e+00 ## freq_consumption_hc_food1:activity_freq -2.294e-01 ## freq_consumption_hc_food1:tech_use -6.206e-01 ## freq_consumption_hc_food1:alcohol_never -1.106e+00 ## freq_consumption_hc_food1:alcohol_sometimes -8.886e-03 ## freq_consumption_hc_food1:transport_bike -3.787e+01 ## freq_consumption_hc_food1:transport_motorbike -3.387e+01 ## freq_consumption_hc_food1:transport_public_transportation 1.219e+00 ## freq_consumption_hc_food1:transport_walking 1.630e+00 ## freq_consumption_hc_food1:eating_habit_binary NA ## freq_consumption_hc_food1:physical_activity_binary NA ## freq_consumption_hc_food1:age_group_young_adult 1.637e-01 ## freq_consumption_hc_food1:age_group_adult -7.961e-01 ## freq_consumption_hc_food1:age_group_senior -1.063e+01 ## veg_freq:num_meals 1.051e+00 ## veg_freq:food_between_meals_frequently 9.749e-02 ## veg_freq:food_between_meals_never -1.169e+00 ## veg_freq:food_between_meals_sometimes 7.533e-02 ## veg_freq:smoke1 -3.275e-01 ## veg_freq:water_daily -2.451e-01 ## veg_freq:caloric_beverages1 -9.575e-01 ## veg_freq:activity_freq 2.505e-01 ## veg_freq:tech_use -6.938e-02 ## veg_freq:alcohol_never -1.392e+00 ## veg_freq:alcohol_sometimes -4.449e-01 ## veg_freq:transport_bike -4.415e+01 ## veg_freq:transport_motorbike -4.281e+01 ## veg_freq:transport_public_transportation 8.586e-01 ## veg_freq:transport_walking 4.289e-01 ## veg_freq:eating_habit_binary -5.561e-01 ## veg_freq:physical_activity_binary NA ## veg_freq:age_group_young_adult -1.665e-01 ## veg_freq:age_group_adult -3.222e+00 ## veg_freq:age_group_senior -1.151e+01 ## num_meals:food_between_meals_frequently 7.886e-01 ## num_meals:food_between_meals_never 6.964e-02 ## num_meals:food_between_meals_sometimes 7.752e-01 ## num_meals:smoke1 2.104e-01 ## num_meals:water_daily 2.739e-02 ## num_meals:caloric_beverages1 3.172e-03 ## num_meals:activity_freq -8.706e-02 ## num_meals:tech_use -2.457e-01 ## num_meals:alcohol_never -4.040e-01 ## num_meals:alcohol_sometimes 3.349e-02 ## num_meals:transport_bike 1.240e+00 ## num_meals:transport_motorbike -4.183e+01 ## num_meals:transport_public_transportation 3.923e-01 ## num_meals:transport_walking 1.298e+00 ## num_meals:eating_habit_binary -1.014e+00 ## num_meals:physical_activity_binary NA ## num_meals:age_group_young_adult 3.596e-01 ## num_meals:age_group_adult -1.010e+00 ## num_meals:age_group_senior 8.473e+00 ## food_between_meals_frequently:food_between_meals_never NA ## food_between_meals_frequently:food_between_meals_sometimes NA ## food_between_meals_frequently:smoke1 1.214e+00 ## food_between_meals_frequently:water_daily -8.374e-01 ## food_between_meals_frequently:caloric_beverages1 -1.483e+00 ## food_between_meals_frequently:activity_freq -6.173e-02 ## food_between_meals_frequently:tech_use -3.819e-01 ## food_between_meals_frequently:alcohol_never -3.738e+00 ## food_between_meals_frequently:alcohol_sometimes -3.234e+00 ## food_between_meals_frequently:transport_bike -1.663e+01 ## food_between_meals_frequently:transport_motorbike 1.806e+02 ## food_between_meals_frequently:transport_public_transportation 5.920e-01 ## food_between_meals_frequently:transport_walking 8.761e-01 ## food_between_meals_frequently:eating_habit_binary NA ## food_between_meals_frequently:physical_activity_binary NA ## food_between_meals_frequently:age_group_young_adult -1.065e+00 ## food_between_meals_frequently:age_group_adult -1.714e+01 ## food_between_meals_frequently:age_group_senior -5.386e+00 ## food_between_meals_never:food_between_meals_sometimes NA ## food_between_meals_never:smoke1 NA ## food_between_meals_never:water_daily -5.758e-01 ## food_between_meals_never:caloric_beverages1 1.862e+00 ## food_between_meals_never:activity_freq 2.401e-01 ## food_between_meals_never:tech_use -3.122e-01 ## food_between_meals_never:alcohol_never -1.125e+01 ## food_between_meals_never:alcohol_sometimes -9.669e+00 ## food_between_meals_never:transport_bike 2.152e+01 ## food_between_meals_never:transport_motorbike NA ## food_between_meals_never:transport_public_transportation 2.381e+01 ## food_between_meals_never:transport_walking 1.724e+01 ## food_between_meals_never:eating_habit_binary NA ## food_between_meals_never:physical_activity_binary NA ## food_between_meals_never:age_group_young_adult -4.566e+00 ## food_between_meals_never:age_group_adult 9.750e+00 ## food_between_meals_never:age_group_senior NA ## food_between_meals_sometimes:smoke1 -8.931e-01 ## food_between_meals_sometimes:water_daily -5.330e-01 ## food_between_meals_sometimes:caloric_beverages1 -1.394e+00 ## food_between_meals_sometimes:activity_freq -1.739e-01 ## food_between_meals_sometimes:tech_use -6.360e-01 ## food_between_meals_sometimes:alcohol_never -2.091e+00 ## food_between_meals_sometimes:alcohol_sometimes -2.456e+00 ## food_between_meals_sometimes:transport_bike -2.857e-01 ## food_between_meals_sometimes:transport_motorbike 1.066e+02 ## food_between_meals_sometimes:transport_public_transportation 2.180e+00 ## food_between_meals_sometimes:transport_walking 1.237e+00 ## food_between_meals_sometimes:eating_habit_binary NA ## food_between_meals_sometimes:physical_activity_binary NA ## food_between_meals_sometimes:age_group_young_adult -1.320e+00 ## food_between_meals_sometimes:age_group_adult -2.042e+01 ## food_between_meals_sometimes:age_group_senior NA ## smoke1:water_daily 4.178e-01 ## smoke1:caloric_beverages1 3.177e+00 ## smoke1:activity_freq -7.552e-01 ## smoke1:tech_use 8.796e-01 ## smoke1:alcohol_never -1.522e+01 ## smoke1:alcohol_sometimes -1.577e+01 ## smoke1:transport_bike -6.736e+01 ## smoke1:transport_motorbike -4.016e+00 ## smoke1:transport_public_transportation -2.370e+00 ## smoke1:transport_walking -3.173e-01 ## smoke1:eating_habit_binary NA ## smoke1:physical_activity_binary NA ## smoke1:age_group_young_adult 1.081e+01 ## smoke1:age_group_adult 1.260e+01 ## smoke1:age_group_senior NA ## water_daily:caloric_beverages1 1.302e-01 ## water_daily:activity_freq 2.551e-01 ## water_daily:tech_use 2.219e-01 ## water_daily:alcohol_never -1.175e-02 ## water_daily:alcohol_sometimes 1.704e-01 ## water_daily:transport_bike 1.016e+01 ## water_daily:transport_motorbike -6.599e+01 ## water_daily:transport_public_transportation -5.634e-01 ## water_daily:transport_walking 8.310e-01 ## water_daily:eating_habit_binary NA ## water_daily:physical_activity_binary NA ## water_daily:age_group_young_adult -2.813e-01 ## water_daily:age_group_adult -4.031e-01 ## water_daily:age_group_senior 5.841e+00 ## caloric_beverages1:activity_freq -1.811e-01 ## caloric_beverages1:tech_use 4.127e-02 ## caloric_beverages1:alcohol_never 1.255e+00 ## caloric_beverages1:alcohol_sometimes 5.382e-01 ## caloric_beverages1:transport_bike -1.412e+01 ## caloric_beverages1:transport_motorbike 2.010e+01 ## caloric_beverages1:transport_public_transportation -2.876e-01 ## caloric_beverages1:transport_walking 1.555e+00 ## caloric_beverages1:eating_habit_binary NA ## caloric_beverages1:physical_activity_binary NA ## caloric_beverages1:age_group_young_adult -8.943e-01 ## caloric_beverages1:age_group_adult -2.651e+00 ## caloric_beverages1:age_group_senior NA ## activity_freq:tech_use -3.671e-01 ## activity_freq:alcohol_never -4.177e-01 ## activity_freq:alcohol_sometimes -3.564e-01 ## activity_freq:transport_bike 1.756e+01 ## activity_freq:transport_motorbike -3.060e+01 ## activity_freq:transport_public_transportation -1.558e-01 ## activity_freq:transport_walking -1.527e-01 ## activity_freq:eating_habit_binary NA ## activity_freq:physical_activity_binary -2.481e-01 ## activity_freq:age_group_young_adult 2.063e-01 ## activity_freq:age_group_adult 1.318e+00 ## activity_freq:age_group_senior 2.821e+00 ## tech_use:alcohol_never -6.967e-01 ## tech_use:alcohol_sometimes -9.194e-01 ## tech_use:transport_bike 2.010e+01 ## tech_use:transport_motorbike -1.511e+02 ## tech_use:transport_public_transportation -2.266e-01 ## tech_use:transport_walking -4.905e-01 ## tech_use:eating_habit_binary NA ## tech_use:physical_activity_binary 1.028e-01 ## tech_use:age_group_young_adult -3.220e-01 ## tech_use:age_group_adult -1.680e+00 ## tech_use:age_group_senior -4.243e+00 ## alcohol_never:alcohol_sometimes NA ## alcohol_never:transport_bike -5.998e+01 ## alcohol_never:transport_motorbike 1.691e+01 ## alcohol_never:transport_public_transportation 7.026e-01 ## alcohol_never:transport_walking -1.405e+00 ## alcohol_never:eating_habit_binary NA ## alcohol_never:physical_activity_binary NA ## alcohol_never:age_group_young_adult 3.962e-01 ## alcohol_never:age_group_adult -7.624e+00 ## alcohol_never:age_group_senior 1.853e+01 ## alcohol_sometimes:transport_bike -6.609e+01 ## alcohol_sometimes:transport_motorbike NA ## alcohol_sometimes:transport_public_transportation 1.242e+00 ## alcohol_sometimes:transport_walking -5.344e-01 ## alcohol_sometimes:eating_habit_binary NA ## alcohol_sometimes:physical_activity_binary NA ## alcohol_sometimes:age_group_young_adult -3.900e-01 ## alcohol_sometimes:age_group_adult -9.137e+00 ## alcohol_sometimes:age_group_senior 8.431e+00 ## transport_bike:transport_motorbike NA ## transport_bike:transport_public_transportation NA ## transport_bike:transport_walking NA ## transport_bike:eating_habit_binary NA ## transport_bike:physical_activity_binary NA ## transport_bike:age_group_young_adult 1.249e+01 ## transport_bike:age_group_adult NA ## transport_bike:age_group_senior NA ## transport_motorbike:transport_public_transportation NA ## transport_motorbike:transport_walking NA ## transport_motorbike:eating_habit_binary NA ## transport_motorbike:physical_activity_binary NA ## transport_motorbike:age_group_young_adult -2.378e+02 ## transport_motorbike:age_group_adult -2.474e+02 ## transport_motorbike:age_group_senior NA ## transport_public_transportation:transport_walking NA ## transport_public_transportation:eating_habit_binary NA ## transport_public_transportation:physical_activity_binary NA ## transport_public_transportation:age_group_young_adult 9.256e-01 ## transport_public_transportation:age_group_adult 1.242e+01 ## transport_public_transportation:age_group_senior -2.015e+01 ## transport_walking:eating_habit_binary NA ## transport_walking:physical_activity_binary NA ## transport_walking:age_group_young_adult -4.285e-01 ## transport_walking:age_group_adult 1.530e+01 ## transport_walking:age_group_senior NA ## eating_habit_binary:physical_activity_binary NA ## eating_habit_binary:age_group_young_adult NA ## eating_habit_binary:age_group_adult NA ## eating_habit_binary:age_group_senior NA ## physical_activity_binary:age_group_young_adult NA ## physical_activity_binary:age_group_adult NA ## physical_activity_binary:age_group_senior NA ## age_group_young_adult:age_group_adult NA ## age_group_young_adult:age_group_senior NA ## age_group_adult:age_group_senior NA ## Std. Error ## (Intercept) 7.628e+00 ## gender_female 1.246e+00 ## gender_male NA ## age 3.819e-01 ## fam_history_overweight1 1.394e+00 ## freq_consumption_hc_food1 1.682e+00 ## veg_freq 1.241e+00 ## num_meals 1.006e+00 ## food_between_meals_frequently 3.329e+00 ## food_between_meals_never 3.393e+03 ## food_between_meals_sometimes 3.145e+00 ## smoke1 1.821e+03 ## water_daily 9.502e-01 ## caloric_beverages1 2.713e+00 ## activity_freq 6.616e-01 ## tech_use 9.930e-01 ## alcohol_never 3.673e+00 ## alcohol_sometimes 3.619e+00 ## transport_bike 1.288e+04 ## transport_motorbike 1.645e+05 ## transport_public_transportation 1.867e+00 ## transport_walking 3.526e+00 ## eating_habit_binary NA ## physical_activity_binary NA ## age_group_young_adult 5.980e+00 ## age_group_adult 6.588e+02 ## age_group_senior 1.308e+04 ## gender_female:gender_male NA ## gender_female:age 3.117e-02 ## gender_female:fam_history_overweight1 1.872e-01 ## gender_female:freq_consumption_hc_food1 2.363e-01 ## gender_female:veg_freq 1.515e-01 ## gender_female:num_meals 1.247e-01 ## gender_female:food_between_meals_frequently 4.995e-01 ## gender_female:food_between_meals_never 8.734e-01 ## gender_female:food_between_meals_sometimes 4.586e-01 ## gender_female:smoke1 1.769e+00 ## gender_female:water_daily 1.400e-01 ## gender_female:caloric_beverages1 4.253e-01 ## gender_female:activity_freq 9.627e-02 ## gender_female:tech_use 1.300e-01 ## gender_female:alcohol_never 6.263e-01 ## gender_female:alcohol_sometimes 6.163e-01 ## gender_female:transport_bike 1.246e+04 ## gender_female:transport_motorbike 9.465e+03 ## gender_female:transport_public_transportation 3.244e-01 ## gender_female:transport_walking 5.974e-01 ## gender_female:eating_habit_binary NA ## gender_female:physical_activity_binary NA ## gender_female:age_group_young_adult 3.724e-01 ## gender_female:age_group_adult 1.051e+00 ## gender_female:age_group_senior 1.535e+03 ## gender_male:age NA ## gender_male:fam_history_overweight1 NA ## gender_male:freq_consumption_hc_food1 NA ## gender_male:veg_freq NA ## gender_male:num_meals NA ## gender_male:food_between_meals_frequently NA ## gender_male:food_between_meals_never NA ## gender_male:food_between_meals_sometimes NA ## gender_male:smoke1 NA ## gender_male:water_daily NA ## gender_male:caloric_beverages1 NA ## gender_male:activity_freq NA ## gender_male:tech_use NA ## gender_male:alcohol_never NA ## gender_male:alcohol_sometimes NA ## gender_male:transport_bike NA ## gender_male:transport_motorbike NA ## gender_male:transport_public_transportation NA ## gender_male:transport_walking NA ## gender_male:eating_habit_binary NA ## gender_male:physical_activity_binary NA ## gender_male:age_group_young_adult NA ## gender_male:age_group_adult NA ## gender_male:age_group_senior NA ## age:fam_history_overweight1 3.464e-02 ## age:freq_consumption_hc_food1 4.186e-02 ## age:veg_freq 2.782e-02 ## age:num_meals 2.168e-02 ## age:food_between_meals_frequently 9.678e-02 ## age:food_between_meals_never 3.089e-01 ## age:food_between_meals_sometimes 9.001e-02 ## age:smoke1 3.887e-01 ## age:water_daily 2.540e-02 ## age:caloric_beverages1 8.887e-02 ## age:activity_freq 1.738e-02 ## age:tech_use 2.428e-02 ## age:alcohol_never 1.062e-01 ## age:alcohol_sometimes 1.047e-01 ## age:transport_bike 2.761e+02 ## age:transport_motorbike 2.005e+03 ## age:transport_public_transportation 3.594e-02 ## age:transport_walking 8.446e-02 ## age:eating_habit_binary NA ## age:physical_activity_binary NA ## age:age_group_young_adult 3.423e-01 ## age:age_group_adult 3.674e-01 ## age:age_group_senior 2.183e+02 ## fam_history_overweight1:freq_consumption_hc_food1 2.483e-01 ## fam_history_overweight1:veg_freq 1.700e-01 ## fam_history_overweight1:num_meals 1.255e-01 ## fam_history_overweight1:food_between_meals_frequently 7.825e-01 ## fam_history_overweight1:food_between_meals_never 1.135e+00 ## fam_history_overweight1:food_between_meals_sometimes 7.586e-01 ## fam_history_overweight1:smoke1 1.962e+00 ## fam_history_overweight1:water_daily 1.592e-01 ## fam_history_overweight1:caloric_beverages1 4.036e-01 ## fam_history_overweight1:activity_freq 1.100e-01 ## fam_history_overweight1:tech_use 1.505e-01 ## fam_history_overweight1:alcohol_never 5.949e-01 ## fam_history_overweight1:alcohol_sometimes 5.730e-01 ## fam_history_overweight1:transport_bike 2.575e+03 ## fam_history_overweight1:transport_motorbike 3.639e+03 ## fam_history_overweight1:transport_public_transportation 3.461e-01 ## fam_history_overweight1:transport_walking 5.399e-01 ## fam_history_overweight1:eating_habit_binary NA ## fam_history_overweight1:physical_activity_binary NA ## fam_history_overweight1:age_group_young_adult 3.539e-01 ## fam_history_overweight1:age_group_adult 1.223e+00 ## fam_history_overweight1:age_group_senior 1.960e+03 ## freq_consumption_hc_food1:veg_freq 2.486e-01 ## freq_consumption_hc_food1:num_meals 1.817e-01 ## freq_consumption_hc_food1:food_between_meals_frequently 7.162e-01 ## freq_consumption_hc_food1:food_between_meals_never 1.350e+00 ## freq_consumption_hc_food1:food_between_meals_sometimes 6.676e-01 ## freq_consumption_hc_food1:smoke1 2.123e+00 ## freq_consumption_hc_food1:water_daily 1.994e-01 ## freq_consumption_hc_food1:caloric_beverages1 4.769e-01 ## freq_consumption_hc_food1:activity_freq 1.248e-01 ## freq_consumption_hc_food1:tech_use 1.753e-01 ## freq_consumption_hc_food1:alcohol_never 6.841e-01 ## freq_consumption_hc_food1:alcohol_sometimes 6.717e-01 ## freq_consumption_hc_food1:transport_bike 4.179e+03 ## freq_consumption_hc_food1:transport_motorbike 7.261e+03 ## freq_consumption_hc_food1:transport_public_transportation 4.751e-01 ## freq_consumption_hc_food1:transport_walking 6.456e-01 ## freq_consumption_hc_food1:eating_habit_binary NA ## freq_consumption_hc_food1:physical_activity_binary NA ## freq_consumption_hc_food1:age_group_young_adult 4.643e-01 ## freq_consumption_hc_food1:age_group_adult 1.235e+00 ## freq_consumption_hc_food1:age_group_senior 2.143e+03 ## veg_freq:num_meals 1.809e-01 ## veg_freq:food_between_meals_frequently 4.709e-01 ## veg_freq:food_between_meals_never 1.045e+00 ## veg_freq:food_between_meals_sometimes 4.391e-01 ## veg_freq:smoke1 1.656e+00 ## veg_freq:water_daily 1.325e-01 ## veg_freq:caloric_beverages1 3.675e-01 ## veg_freq:activity_freq 8.960e-02 ## veg_freq:tech_use 1.247e-01 ## veg_freq:alcohol_never 4.933e-01 ## veg_freq:alcohol_sometimes 4.764e-01 ## veg_freq:transport_bike 6.611e+03 ## veg_freq:transport_motorbike 8.296e+03 ## veg_freq:transport_public_transportation 2.787e-01 ## veg_freq:transport_walking 4.746e-01 ## veg_freq:eating_habit_binary 3.868e-01 ## veg_freq:physical_activity_binary NA ## veg_freq:age_group_young_adult 3.184e-01 ## veg_freq:age_group_adult 1.049e+00 ## veg_freq:age_group_senior 1.553e+03 ## num_meals:food_between_meals_frequently 4.060e-01 ## num_meals:food_between_meals_never 5.974e-01 ## num_meals:food_between_meals_sometimes 3.784e-01 ## num_meals:smoke1 1.067e+00 ## num_meals:water_daily 1.014e-01 ## num_meals:caloric_beverages1 2.799e-01 ## num_meals:activity_freq 7.417e-02 ## num_meals:tech_use 9.458e-02 ## num_meals:alcohol_never 4.611e-01 ## num_meals:alcohol_sometimes 4.552e-01 ## num_meals:transport_bike 2.902e+03 ## num_meals:transport_motorbike 9.452e+03 ## num_meals:transport_public_transportation 2.388e-01 ## num_meals:transport_walking 4.405e-01 ## num_meals:eating_habit_binary 2.242e-01 ## num_meals:physical_activity_binary NA ## num_meals:age_group_young_adult 2.739e-01 ## num_meals:age_group_adult 8.432e-01 ## num_meals:age_group_senior 1.631e+03 ## food_between_meals_frequently:food_between_meals_never NA ## food_between_meals_frequently:food_between_meals_sometimes NA ## food_between_meals_frequently:smoke1 2.845e+00 ## food_between_meals_frequently:water_daily 4.290e-01 ## food_between_meals_frequently:caloric_beverages1 8.505e-01 ## food_between_meals_frequently:activity_freq 2.452e-01 ## food_between_meals_frequently:tech_use 3.422e-01 ## food_between_meals_frequently:alcohol_never 1.300e+00 ## food_between_meals_frequently:alcohol_sometimes 1.266e+00 ## food_between_meals_frequently:transport_bike 5.381e+03 ## food_between_meals_frequently:transport_motorbike 2.116e+04 ## food_between_meals_frequently:transport_public_transportation 9.231e-01 ## food_between_meals_frequently:transport_walking 1.293e+00 ## food_between_meals_frequently:eating_habit_binary NA ## food_between_meals_frequently:physical_activity_binary NA ## food_between_meals_frequently:age_group_young_adult 1.053e+00 ## food_between_meals_frequently:age_group_adult 5.735e+02 ## food_between_meals_frequently:age_group_senior 1.943e+03 ## food_between_meals_never:food_between_meals_sometimes NA ## food_between_meals_never:smoke1 NA ## food_between_meals_never:water_daily 6.763e-01 ## food_between_meals_never:caloric_beverages1 5.282e+00 ## food_between_meals_never:activity_freq 4.673e-01 ## food_between_meals_never:tech_use 6.892e-01 ## food_between_meals_never:alcohol_never 2.400e+03 ## food_between_meals_never:alcohol_sometimes 2.400e+03 ## food_between_meals_never:transport_bike 1.181e+04 ## food_between_meals_never:transport_motorbike NA ## food_between_meals_never:transport_public_transportation 2.400e+03 ## food_between_meals_never:transport_walking 2.400e+03 ## food_between_meals_never:eating_habit_binary NA ## food_between_meals_never:physical_activity_binary NA ## food_between_meals_never:age_group_young_adult 3.622e+00 ## food_between_meals_never:age_group_adult 3.442e+03 ## food_between_meals_never:age_group_senior NA ## food_between_meals_sometimes:smoke1 2.660e+00 ## food_between_meals_sometimes:water_daily 3.993e-01 ## food_between_meals_sometimes:caloric_beverages1 7.977e-01 ## food_between_meals_sometimes:activity_freq 2.212e-01 ## food_between_meals_sometimes:tech_use 3.161e-01 ## food_between_meals_sometimes:alcohol_never 1.293e+00 ## food_between_meals_sometimes:alcohol_sometimes 1.265e+00 ## food_between_meals_sometimes:transport_bike 3.378e+03 ## food_between_meals_sometimes:transport_motorbike 6.290e+03 ## food_between_meals_sometimes:transport_public_transportation 8.712e-01 ## food_between_meals_sometimes:transport_walking 1.200e+00 ## food_between_meals_sometimes:eating_habit_binary NA ## food_between_meals_sometimes:physical_activity_binary NA ## food_between_meals_sometimes:age_group_young_adult 9.731e-01 ## food_between_meals_sometimes:age_group_adult 5.735e+02 ## food_between_meals_sometimes:age_group_senior NA ## smoke1:water_daily 9.593e-01 ## smoke1:caloric_beverages1 3.158e+00 ## smoke1:activity_freq 6.365e-01 ## smoke1:tech_use 1.071e+00 ## smoke1:alcohol_never 1.072e+03 ## smoke1:alcohol_sometimes 1.072e+03 ## smoke1:transport_bike 7.658e+03 ## smoke1:transport_motorbike 6.815e+03 ## smoke1:transport_public_transportation 2.304e+00 ## smoke1:transport_walking 2.515e+00 ## smoke1:eating_habit_binary NA ## smoke1:physical_activity_binary NA ## smoke1:age_group_young_adult 1.472e+03 ## smoke1:age_group_adult 1.898e+03 ## smoke1:age_group_senior NA ## water_daily:caloric_beverages1 3.233e-01 ## water_daily:activity_freq 8.200e-02 ## water_daily:tech_use 1.102e-01 ## water_daily:alcohol_never 4.554e-01 ## water_daily:alcohol_sometimes 4.444e-01 ## water_daily:transport_bike 5.069e+03 ## water_daily:transport_motorbike 3.912e+03 ## water_daily:transport_public_transportation 2.828e-01 ## water_daily:transport_walking 4.790e-01 ## water_daily:eating_habit_binary NA ## water_daily:physical_activity_binary NA ## water_daily:age_group_young_adult 3.458e-01 ## water_daily:age_group_adult 8.702e-01 ## water_daily:age_group_senior 1.818e+03 ## caloric_beverages1:activity_freq 2.247e-01 ## caloric_beverages1:tech_use 3.117e-01 ## caloric_beverages1:alcohol_never 1.094e+00 ## caloric_beverages1:alcohol_sometimes 1.032e+00 ## caloric_beverages1:transport_bike 4.681e+03 ## caloric_beverages1:transport_motorbike 1.102e+04 ## caloric_beverages1:transport_public_transportation 6.352e-01 ## caloric_beverages1:transport_walking 1.132e+00 ## caloric_beverages1:eating_habit_binary NA ## caloric_beverages1:physical_activity_binary NA ## caloric_beverages1:age_group_young_adult 6.608e-01 ## caloric_beverages1:age_group_adult 2.713e+00 ## caloric_beverages1:age_group_senior NA ## activity_freq:tech_use 1.362e-01 ## activity_freq:alcohol_never 3.198e-01 ## activity_freq:alcohol_sometimes 3.145e-01 ## activity_freq:transport_bike 3.092e+03 ## activity_freq:transport_motorbike 2.942e+03 ## activity_freq:transport_public_transportation 1.633e-01 ## activity_freq:transport_walking 2.739e-01 ## activity_freq:eating_habit_binary NA ## activity_freq:physical_activity_binary 4.752e-02 ## activity_freq:age_group_young_adult 2.058e-01 ## activity_freq:age_group_adult 5.652e-01 ## activity_freq:age_group_senior 7.947e+02 ## tech_use:alcohol_never 5.303e-01 ## tech_use:alcohol_sometimes 5.235e-01 ## tech_use:transport_bike 5.209e+03 ## tech_use:transport_motorbike 1.838e+04 ## tech_use:transport_public_transportation 2.341e-01 ## tech_use:transport_walking 3.770e-01 ## tech_use:eating_habit_binary NA ## tech_use:physical_activity_binary 9.394e-02 ## tech_use:age_group_young_adult 2.821e-01 ## tech_use:age_group_adult 1.006e+00 ## tech_use:age_group_senior 1.121e+03 ## alcohol_never:alcohol_sometimes NA ## alcohol_never:transport_bike 1.120e+04 ## alcohol_never:transport_motorbike 4.023e+03 ## alcohol_never:transport_public_transportation 7.679e-01 ## alcohol_never:transport_walking 1.492e+00 ## alcohol_never:eating_habit_binary NA ## alcohol_never:physical_activity_binary NA ## alcohol_never:age_group_young_adult 1.046e+00 ## alcohol_never:age_group_adult 3.240e+02 ## alcohol_never:age_group_senior 1.990e+03 ## alcohol_sometimes:transport_bike 9.757e+03 ## alcohol_sometimes:transport_motorbike NA ## alcohol_sometimes:transport_public_transportation 7.370e-01 ## alcohol_sometimes:transport_walking 1.448e+00 ## alcohol_sometimes:eating_habit_binary NA ## alcohol_sometimes:physical_activity_binary NA ## alcohol_sometimes:age_group_young_adult 1.026e+00 ## alcohol_sometimes:age_group_adult 3.240e+02 ## alcohol_sometimes:age_group_senior 2.600e+03 ## transport_bike:transport_motorbike NA ## transport_bike:transport_public_transportation NA ## transport_bike:transport_walking NA ## transport_bike:eating_habit_binary NA ## transport_bike:physical_activity_binary NA ## transport_bike:age_group_young_adult 3.566e+03 ## transport_bike:age_group_adult NA ## transport_bike:age_group_senior NA ## transport_motorbike:transport_public_transportation NA ## transport_motorbike:transport_walking NA ## transport_motorbike:eating_habit_binary NA ## transport_motorbike:physical_activity_binary NA ## transport_motorbike:age_group_young_adult 6.611e+04 ## transport_motorbike:age_group_adult 4.153e+04 ## transport_motorbike:age_group_senior NA ## transport_public_transportation:transport_walking NA ## transport_public_transportation:eating_habit_binary NA ## transport_public_transportation:physical_activity_binary NA ## transport_public_transportation:age_group_young_adult 5.228e-01 ## transport_public_transportation:age_group_adult 5.706e+02 ## transport_public_transportation:age_group_senior 1.551e+03 ## transport_walking:eating_habit_binary NA ## transport_walking:physical_activity_binary NA ## transport_walking:age_group_young_adult 7.709e-01 ## transport_walking:age_group_adult 1.319e+03 ## transport_walking:age_group_senior NA ## eating_habit_binary:physical_activity_binary NA ## eating_habit_binary:age_group_young_adult NA ## eating_habit_binary:age_group_adult NA ## eating_habit_binary:age_group_senior NA ## physical_activity_binary:age_group_young_adult NA ## physical_activity_binary:age_group_adult NA ## physical_activity_binary:age_group_senior NA ## age_group_young_adult:age_group_adult NA ## age_group_young_adult:age_group_senior NA ## age_group_adult:age_group_senior NA ## z value Pr(&gt;|z|) ## (Intercept) 0.066 0.947542 ## gender_female -1.176 0.239594 ## gender_male NA NA ## age 0.620 0.535030 ## fam_history_overweight1 -3.634 0.000279 ## freq_consumption_hc_food1 -2.400 0.016408 ## veg_freq -2.471 0.013465 ## num_meals -2.355 0.018513 ## food_between_meals_frequently 1.002 0.316413 ## food_between_meals_never -0.003 0.997442 ## food_between_meals_sometimes -0.649 0.516591 ## smoke1 -0.003 0.997326 ## water_daily 1.621 0.105100 ## caloric_beverages1 1.202 0.229323 ## activity_freq 3.534 0.000409 ## tech_use 1.496 0.134548 ## alcohol_never 2.463 0.013764 ## alcohol_sometimes 1.260 0.207755 ## transport_bike 0.001 0.999358 ## transport_motorbike 0.004 0.996566 ## transport_public_transportation -2.795 0.005197 ## transport_walking -2.150 0.031595 ## eating_habit_binary NA NA ## physical_activity_binary NA NA ## age_group_young_adult 1.475 0.140093 ## age_group_adult 0.094 0.925307 ## age_group_senior -0.001 0.999117 ## gender_female:gender_male NA NA ## gender_female:age -3.070 0.002139 ## gender_female:fam_history_overweight1 3.326 0.000882 ## gender_female:freq_consumption_hc_food1 2.440 0.014683 ## gender_female:veg_freq 2.722 0.006489 ## gender_female:num_meals 1.989 0.046677 ## gender_female:food_between_meals_frequently -1.185 0.236203 ## gender_female:food_between_meals_never 0.818 0.413577 ## gender_female:food_between_meals_sometimes 1.503 0.132916 ## gender_female:smoke1 -1.354 0.175630 ## gender_female:water_daily -0.446 0.655900 ## gender_female:caloric_beverages1 1.663 0.096279 ## gender_female:activity_freq -1.026 0.304985 ## gender_female:tech_use 2.312 0.020751 ## gender_female:alcohol_never -1.619 0.105466 ## gender_female:alcohol_sometimes -1.046 0.295635 ## gender_female:transport_bike 0.004 0.996847 ## gender_female:transport_motorbike 0.002 0.998549 ## gender_female:transport_public_transportation -0.662 0.507668 ## gender_female:transport_walking 1.283 0.199349 ## gender_female:eating_habit_binary NA NA ## gender_female:physical_activity_binary NA NA ## gender_female:age_group_young_adult 2.502 0.012347 ## gender_female:age_group_adult 2.170 0.030043 ## gender_female:age_group_senior 0.007 0.994720 ## gender_male:age NA NA ## gender_male:fam_history_overweight1 NA NA ## gender_male:freq_consumption_hc_food1 NA NA ## gender_male:veg_freq NA NA ## gender_male:num_meals NA NA ## gender_male:food_between_meals_frequently NA NA ## gender_male:food_between_meals_never NA NA ## gender_male:food_between_meals_sometimes NA NA ## gender_male:smoke1 NA NA ## gender_male:water_daily NA NA ## gender_male:caloric_beverages1 NA NA ## gender_male:activity_freq NA NA ## gender_male:tech_use NA NA ## gender_male:alcohol_never NA NA ## gender_male:alcohol_sometimes NA NA ## gender_male:transport_bike NA NA ## gender_male:transport_motorbike NA NA ## gender_male:transport_public_transportation NA NA ## gender_male:transport_walking NA NA ## gender_male:eating_habit_binary NA NA ## gender_male:physical_activity_binary NA NA ## gender_male:age_group_young_adult NA NA ## gender_male:age_group_adult NA NA ## gender_male:age_group_senior NA NA ## age:fam_history_overweight1 5.407 6.42e-08 ## age:freq_consumption_hc_food1 3.506 0.000454 ## age:veg_freq 4.005 6.19e-05 ## age:num_meals 1.887 0.059129 ## age:food_between_meals_frequently 0.881 0.378157 ## age:food_between_meals_never 1.350 0.176881 ## age:food_between_meals_sometimes 2.608 0.009118 ## age:smoke1 1.257 0.208912 ## age:water_daily 0.737 0.460884 ## age:caloric_beverages1 -0.045 0.964094 ## age:activity_freq -4.895 9.85e-07 ## age:tech_use 2.521 0.011689 ## age:alcohol_never -1.398 0.162026 ## age:alcohol_sometimes -1.122 0.261758 ## age:transport_bike 0.011 0.991295 ## age:transport_motorbike -0.003 0.997708 ## age:transport_public_transportation -2.759 0.005793 ## age:transport_walking -0.315 0.752837 ## age:eating_habit_binary NA NA ## age:physical_activity_binary NA NA ## age:age_group_young_adult -1.567 0.117070 ## age:age_group_adult -2.503 0.012330 ## age:age_group_senior -0.001 0.999166 ## fam_history_overweight1:freq_consumption_hc_food1 2.179 0.029315 ## fam_history_overweight1:veg_freq 1.922 0.054606 ## fam_history_overweight1:num_meals 0.679 0.497348 ## fam_history_overweight1:food_between_meals_frequently -1.465 0.142855 ## fam_history_overweight1:food_between_meals_never -1.432 0.152109 ## fam_history_overweight1:food_between_meals_sometimes -0.200 0.841296 ## fam_history_overweight1:smoke1 0.320 0.749072 ## fam_history_overweight1:water_daily -0.519 0.603745 ## fam_history_overweight1:caloric_beverages1 -1.120 0.262779 ## fam_history_overweight1:activity_freq -1.478 0.139520 ## fam_history_overweight1:tech_use 1.837 0.066208 ## fam_history_overweight1:alcohol_never 0.011 0.991118 ## fam_history_overweight1:alcohol_sometimes -0.212 0.831887 ## fam_history_overweight1:transport_bike 0.007 0.994089 ## fam_history_overweight1:transport_motorbike 0.000 0.999754 ## fam_history_overweight1:transport_public_transportation 6.334 2.39e-10 ## fam_history_overweight1:transport_walking 1.976 0.048109 ## fam_history_overweight1:eating_habit_binary NA NA ## fam_history_overweight1:physical_activity_binary NA NA ## fam_history_overweight1:age_group_young_adult 0.177 0.859897 ## fam_history_overweight1:age_group_adult -1.761 0.078219 ## fam_history_overweight1:age_group_senior -0.003 0.997948 ## freq_consumption_hc_food1:veg_freq -0.142 0.886740 ## freq_consumption_hc_food1:num_meals 2.158 0.030930 ## freq_consumption_hc_food1:food_between_meals_frequently -0.875 0.381667 ## freq_consumption_hc_food1:food_between_meals_never -0.376 0.706550 ## freq_consumption_hc_food1:food_between_meals_sometimes -0.070 0.943817 ## freq_consumption_hc_food1:smoke1 1.402 0.160849 ## freq_consumption_hc_food1:water_daily 1.893 0.058407 ## freq_consumption_hc_food1:caloric_beverages1 2.435 0.014894 ## freq_consumption_hc_food1:activity_freq -1.837 0.066137 ## freq_consumption_hc_food1:tech_use -3.540 0.000400 ## freq_consumption_hc_food1:alcohol_never -1.616 0.106024 ## freq_consumption_hc_food1:alcohol_sometimes -0.013 0.989445 ## freq_consumption_hc_food1:transport_bike -0.009 0.992769 ## freq_consumption_hc_food1:transport_motorbike -0.005 0.996278 ## freq_consumption_hc_food1:transport_public_transportation 2.566 0.010279 ## freq_consumption_hc_food1:transport_walking 2.526 0.011549 ## freq_consumption_hc_food1:eating_habit_binary NA NA ## freq_consumption_hc_food1:physical_activity_binary NA NA ## freq_consumption_hc_food1:age_group_young_adult 0.353 0.724436 ## freq_consumption_hc_food1:age_group_adult -0.645 0.519153 ## freq_consumption_hc_food1:age_group_senior -0.005 0.996044 ## veg_freq:num_meals 5.811 6.22e-09 ## veg_freq:food_between_meals_frequently 0.207 0.835972 ## veg_freq:food_between_meals_never -1.118 0.263428 ## veg_freq:food_between_meals_sometimes 0.172 0.863798 ## veg_freq:smoke1 -0.198 0.843205 ## veg_freq:water_daily -1.851 0.064229 ## veg_freq:caloric_beverages1 -2.606 0.009170 ## veg_freq:activity_freq 2.795 0.005184 ## veg_freq:tech_use -0.556 0.578034 ## veg_freq:alcohol_never -2.822 0.004769 ## veg_freq:alcohol_sometimes -0.934 0.350270 ## veg_freq:transport_bike -0.007 0.994672 ## veg_freq:transport_motorbike -0.005 0.995883 ## veg_freq:transport_public_transportation 3.080 0.002068 ## veg_freq:transport_walking 0.904 0.366139 ## veg_freq:eating_habit_binary -1.438 0.150468 ## veg_freq:physical_activity_binary NA NA ## veg_freq:age_group_young_adult -0.523 0.601093 ## veg_freq:age_group_adult -3.070 0.002139 ## veg_freq:age_group_senior -0.007 0.994085 ## num_meals:food_between_meals_frequently 1.942 0.052084 ## num_meals:food_between_meals_never 0.117 0.907200 ## num_meals:food_between_meals_sometimes 2.048 0.040519 ## num_meals:smoke1 0.197 0.843662 ## num_meals:water_daily 0.270 0.787067 ## num_meals:caloric_beverages1 0.011 0.990959 ## num_meals:activity_freq -1.174 0.240473 ## num_meals:tech_use -2.598 0.009373 ## num_meals:alcohol_never -0.876 0.380878 ## num_meals:alcohol_sometimes 0.074 0.941345 ## num_meals:transport_bike 0.000 0.999659 ## num_meals:transport_motorbike -0.004 0.996469 ## num_meals:transport_public_transportation 1.643 0.100392 ## num_meals:transport_walking 2.946 0.003218 ## num_meals:eating_habit_binary -4.523 6.11e-06 ## num_meals:physical_activity_binary NA NA ## num_meals:age_group_young_adult 1.313 0.189255 ## num_meals:age_group_adult -1.198 0.230973 ## num_meals:age_group_senior 0.005 0.995855 ## food_between_meals_frequently:food_between_meals_never NA NA ## food_between_meals_frequently:food_between_meals_sometimes NA NA ## food_between_meals_frequently:smoke1 0.427 0.669544 ## food_between_meals_frequently:water_daily -1.952 0.050930 ## food_between_meals_frequently:caloric_beverages1 -1.744 0.081175 ## food_between_meals_frequently:activity_freq -0.252 0.801229 ## food_between_meals_frequently:tech_use -1.116 0.264357 ## food_between_meals_frequently:alcohol_never -2.874 0.004047 ## food_between_meals_frequently:alcohol_sometimes -2.555 0.010612 ## food_between_meals_frequently:transport_bike -0.003 0.997534 ## food_between_meals_frequently:transport_motorbike 0.009 0.993189 ## food_between_meals_frequently:transport_public_transportation 0.641 0.521321 ## food_between_meals_frequently:transport_walking 0.677 0.498208 ## food_between_meals_frequently:eating_habit_binary NA NA ## food_between_meals_frequently:physical_activity_binary NA NA ## food_between_meals_frequently:age_group_young_adult -1.011 0.311882 ## food_between_meals_frequently:age_group_adult -0.030 0.976161 ## food_between_meals_frequently:age_group_senior -0.003 0.997788 ## food_between_meals_never:food_between_meals_sometimes NA NA ## food_between_meals_never:smoke1 NA NA ## food_between_meals_never:water_daily -0.851 0.394568 ## food_between_meals_never:caloric_beverages1 0.352 0.724492 ## food_between_meals_never:activity_freq 0.514 0.607377 ## food_between_meals_never:tech_use -0.453 0.650576 ## food_between_meals_never:alcohol_never -0.005 0.996260 ## food_between_meals_never:alcohol_sometimes -0.004 0.996785 ## food_between_meals_never:transport_bike 0.002 0.998546 ## food_between_meals_never:transport_motorbike NA NA ## food_between_meals_never:transport_public_transportation 0.010 0.992084 ## food_between_meals_never:transport_walking 0.007 0.994268 ## food_between_meals_never:eating_habit_binary NA NA ## food_between_meals_never:physical_activity_binary NA NA ## food_between_meals_never:age_group_young_adult -1.261 0.207404 ## food_between_meals_never:age_group_adult 0.003 0.997740 ## food_between_meals_never:age_group_senior NA NA ## food_between_meals_sometimes:smoke1 -0.336 0.737113 ## food_between_meals_sometimes:water_daily -1.335 0.181933 ## food_between_meals_sometimes:caloric_beverages1 -1.747 0.080592 ## food_between_meals_sometimes:activity_freq -0.786 0.431892 ## food_between_meals_sometimes:tech_use -2.012 0.044248 ## food_between_meals_sometimes:alcohol_never -1.617 0.105975 ## food_between_meals_sometimes:alcohol_sometimes -1.942 0.052141 ## food_between_meals_sometimes:transport_bike 0.000 0.999933 ## food_between_meals_sometimes:transport_motorbike 0.017 0.986480 ## food_between_meals_sometimes:transport_public_transportation 2.502 0.012363 ## food_between_meals_sometimes:transport_walking 1.031 0.302636 ## food_between_meals_sometimes:eating_habit_binary NA NA ## food_between_meals_sometimes:physical_activity_binary NA NA ## food_between_meals_sometimes:age_group_young_adult -1.357 0.174899 ## food_between_meals_sometimes:age_group_adult -0.036 0.971590 ## food_between_meals_sometimes:age_group_senior NA NA ## smoke1:water_daily 0.435 0.663232 ## smoke1:caloric_beverages1 1.006 0.314392 ## smoke1:activity_freq -1.187 0.235369 ## smoke1:tech_use 0.821 0.411547 ## smoke1:alcohol_never -0.014 0.988675 ## smoke1:alcohol_sometimes -0.015 0.988269 ## smoke1:transport_bike -0.009 0.992982 ## smoke1:transport_motorbike -0.001 0.999530 ## smoke1:transport_public_transportation -1.029 0.303590 ## smoke1:transport_walking -0.126 0.899596 ## smoke1:eating_habit_binary NA NA ## smoke1:physical_activity_binary NA NA ## smoke1:age_group_young_adult 0.007 0.994138 ## smoke1:age_group_adult 0.007 0.994703 ## smoke1:age_group_senior NA NA ## water_daily:caloric_beverages1 0.403 0.687080 ## water_daily:activity_freq 3.111 0.001862 ## water_daily:tech_use 2.014 0.043986 ## water_daily:alcohol_never -0.026 0.979410 ## water_daily:alcohol_sometimes 0.383 0.701469 ## water_daily:transport_bike 0.002 0.998401 ## water_daily:transport_motorbike -0.017 0.986542 ## water_daily:transport_public_transportation -1.992 0.046357 ## water_daily:transport_walking 1.735 0.082737 ## water_daily:eating_habit_binary NA NA ## water_daily:physical_activity_binary NA NA ## water_daily:age_group_young_adult -0.813 0.416026 ## water_daily:age_group_adult -0.463 0.643232 ## water_daily:age_group_senior 0.003 0.997436 ## caloric_beverages1:activity_freq -0.806 0.420233 ## caloric_beverages1:tech_use 0.132 0.894674 ## caloric_beverages1:alcohol_never 1.147 0.251360 ## caloric_beverages1:alcohol_sometimes 0.521 0.602194 ## caloric_beverages1:transport_bike -0.003 0.997593 ## caloric_beverages1:transport_motorbike 0.002 0.998545 ## caloric_beverages1:transport_public_transportation -0.453 0.650643 ## caloric_beverages1:transport_walking 1.374 0.169544 ## caloric_beverages1:eating_habit_binary NA NA ## caloric_beverages1:physical_activity_binary NA NA ## caloric_beverages1:age_group_young_adult -1.353 0.175959 ## caloric_beverages1:age_group_adult -0.977 0.328506 ## caloric_beverages1:age_group_senior NA NA ## activity_freq:tech_use -2.696 0.007023 ## activity_freq:alcohol_never -1.306 0.191524 ## activity_freq:alcohol_sometimes -1.133 0.257117 ## activity_freq:transport_bike 0.006 0.995469 ## activity_freq:transport_motorbike -0.010 0.991703 ## activity_freq:transport_public_transportation -0.955 0.339810 ## activity_freq:transport_walking -0.557 0.577262 ## activity_freq:eating_habit_binary NA NA ## activity_freq:physical_activity_binary -5.222 1.77e-07 ## activity_freq:age_group_young_adult 1.003 0.316083 ## activity_freq:age_group_adult 2.333 0.019665 ## activity_freq:age_group_senior 0.004 0.997167 ## tech_use:alcohol_never -1.314 0.188901 ## tech_use:alcohol_sometimes -1.756 0.079005 ## tech_use:transport_bike 0.004 0.996921 ## tech_use:transport_motorbike -0.008 0.993438 ## tech_use:transport_public_transportation -0.968 0.333016 ## tech_use:transport_walking -1.301 0.193226 ## tech_use:eating_habit_binary NA NA ## tech_use:physical_activity_binary 1.094 0.274037 ## tech_use:age_group_young_adult -1.141 0.253759 ## tech_use:age_group_adult -1.670 0.094982 ## tech_use:age_group_senior -0.004 0.996980 ## alcohol_never:alcohol_sometimes NA NA ## alcohol_never:transport_bike -0.005 0.995726 ## alcohol_never:transport_motorbike 0.004 0.996647 ## alcohol_never:transport_public_transportation 0.915 0.360225 ## alcohol_never:transport_walking -0.942 0.346399 ## alcohol_never:eating_habit_binary NA NA ## alcohol_never:physical_activity_binary NA NA ## alcohol_never:age_group_young_adult 0.379 0.704819 ## alcohol_never:age_group_adult -0.024 0.981227 ## alcohol_never:age_group_senior 0.009 0.992571 ## alcohol_sometimes:transport_bike -0.007 0.994595 ## alcohol_sometimes:transport_motorbike NA NA ## alcohol_sometimes:transport_public_transportation 1.685 0.091926 ## alcohol_sometimes:transport_walking -0.369 0.712015 ## alcohol_sometimes:eating_habit_binary NA NA ## alcohol_sometimes:physical_activity_binary NA NA ## alcohol_sometimes:age_group_young_adult -0.380 0.703790 ## alcohol_sometimes:age_group_adult -0.028 0.977505 ## alcohol_sometimes:age_group_senior 0.003 0.997413 ## transport_bike:transport_motorbike NA NA ## transport_bike:transport_public_transportation NA NA ## transport_bike:transport_walking NA NA ## transport_bike:eating_habit_binary NA NA ## transport_bike:physical_activity_binary NA NA ## transport_bike:age_group_young_adult 0.004 0.997207 ## transport_bike:age_group_adult NA NA ## transport_bike:age_group_senior NA NA ## transport_motorbike:transport_public_transportation NA NA ## transport_motorbike:transport_walking NA NA ## transport_motorbike:eating_habit_binary NA NA ## transport_motorbike:physical_activity_binary NA NA ## transport_motorbike:age_group_young_adult -0.004 0.997129 ## transport_motorbike:age_group_adult -0.006 0.995248 ## transport_motorbike:age_group_senior NA NA ## transport_public_transportation:transport_walking NA NA ## transport_public_transportation:eating_habit_binary NA NA ## transport_public_transportation:physical_activity_binary NA NA ## transport_public_transportation:age_group_young_adult 1.770 0.076662 ## transport_public_transportation:age_group_adult 0.022 0.982628 ## transport_public_transportation:age_group_senior -0.013 0.989634 ## transport_walking:eating_habit_binary NA NA ## transport_walking:physical_activity_binary NA NA ## transport_walking:age_group_young_adult -0.556 0.578325 ## transport_walking:age_group_adult 0.012 0.990746 ## transport_walking:age_group_senior NA NA ## eating_habit_binary:physical_activity_binary NA NA ## eating_habit_binary:age_group_young_adult NA NA ## eating_habit_binary:age_group_adult NA NA ## eating_habit_binary:age_group_senior NA NA ## physical_activity_binary:age_group_young_adult NA NA ## physical_activity_binary:age_group_adult NA NA ## physical_activity_binary:age_group_senior NA NA ## age_group_young_adult:age_group_adult NA NA ## age_group_young_adult:age_group_senior NA NA ## age_group_adult:age_group_senior NA NA ## ## (Intercept) ## gender_female ## gender_male ## age ## fam_history_overweight1 *** ## freq_consumption_hc_food1 * ## veg_freq * ## num_meals * ## food_between_meals_frequently ## food_between_meals_never ## food_between_meals_sometimes ## smoke1 ## water_daily ## caloric_beverages1 ## activity_freq *** ## tech_use ## alcohol_never * ## alcohol_sometimes ## transport_bike ## transport_motorbike ## transport_public_transportation ** ## transport_walking * ## eating_habit_binary ## physical_activity_binary ## age_group_young_adult ## age_group_adult ## age_group_senior ## gender_female:gender_male ## gender_female:age ** ## gender_female:fam_history_overweight1 *** ## gender_female:freq_consumption_hc_food1 * ## gender_female:veg_freq ** ## gender_female:num_meals * ## gender_female:food_between_meals_frequently ## gender_female:food_between_meals_never ## gender_female:food_between_meals_sometimes ## gender_female:smoke1 ## gender_female:water_daily ## gender_female:caloric_beverages1 . ## gender_female:activity_freq ## gender_female:tech_use * ## gender_female:alcohol_never ## gender_female:alcohol_sometimes ## gender_female:transport_bike ## gender_female:transport_motorbike ## gender_female:transport_public_transportation ## gender_female:transport_walking ## gender_female:eating_habit_binary ## gender_female:physical_activity_binary ## gender_female:age_group_young_adult * ## gender_female:age_group_adult * ## gender_female:age_group_senior ## gender_male:age ## gender_male:fam_history_overweight1 ## gender_male:freq_consumption_hc_food1 ## gender_male:veg_freq ## gender_male:num_meals ## gender_male:food_between_meals_frequently ## gender_male:food_between_meals_never ## gender_male:food_between_meals_sometimes ## gender_male:smoke1 ## gender_male:water_daily ## gender_male:caloric_beverages1 ## gender_male:activity_freq ## gender_male:tech_use ## gender_male:alcohol_never ## gender_male:alcohol_sometimes ## gender_male:transport_bike ## gender_male:transport_motorbike ## gender_male:transport_public_transportation ## gender_male:transport_walking ## gender_male:eating_habit_binary ## gender_male:physical_activity_binary ## gender_male:age_group_young_adult ## gender_male:age_group_adult ## gender_male:age_group_senior ## age:fam_history_overweight1 *** ## age:freq_consumption_hc_food1 *** ## age:veg_freq *** ## age:num_meals . ## age:food_between_meals_frequently ## age:food_between_meals_never ## age:food_between_meals_sometimes ** ## age:smoke1 ## age:water_daily ## age:caloric_beverages1 ## age:activity_freq *** ## age:tech_use * ## age:alcohol_never ## age:alcohol_sometimes ## age:transport_bike ## age:transport_motorbike ## age:transport_public_transportation ** ## age:transport_walking ## age:eating_habit_binary ## age:physical_activity_binary ## age:age_group_young_adult ## age:age_group_adult * ## age:age_group_senior ## fam_history_overweight1:freq_consumption_hc_food1 * ## fam_history_overweight1:veg_freq . ## fam_history_overweight1:num_meals ## fam_history_overweight1:food_between_meals_frequently ## fam_history_overweight1:food_between_meals_never ## fam_history_overweight1:food_between_meals_sometimes ## fam_history_overweight1:smoke1 ## fam_history_overweight1:water_daily ## fam_history_overweight1:caloric_beverages1 ## fam_history_overweight1:activity_freq ## fam_history_overweight1:tech_use . ## fam_history_overweight1:alcohol_never ## fam_history_overweight1:alcohol_sometimes ## fam_history_overweight1:transport_bike ## fam_history_overweight1:transport_motorbike ## fam_history_overweight1:transport_public_transportation *** ## fam_history_overweight1:transport_walking * ## fam_history_overweight1:eating_habit_binary ## fam_history_overweight1:physical_activity_binary ## fam_history_overweight1:age_group_young_adult ## fam_history_overweight1:age_group_adult . ## fam_history_overweight1:age_group_senior ## freq_consumption_hc_food1:veg_freq ## freq_consumption_hc_food1:num_meals * ## freq_consumption_hc_food1:food_between_meals_frequently ## freq_consumption_hc_food1:food_between_meals_never ## freq_consumption_hc_food1:food_between_meals_sometimes ## freq_consumption_hc_food1:smoke1 ## freq_consumption_hc_food1:water_daily . ## freq_consumption_hc_food1:caloric_beverages1 * ## freq_consumption_hc_food1:activity_freq . ## freq_consumption_hc_food1:tech_use *** ## freq_consumption_hc_food1:alcohol_never ## freq_consumption_hc_food1:alcohol_sometimes ## freq_consumption_hc_food1:transport_bike ## freq_consumption_hc_food1:transport_motorbike ## freq_consumption_hc_food1:transport_public_transportation * ## freq_consumption_hc_food1:transport_walking * ## freq_consumption_hc_food1:eating_habit_binary ## freq_consumption_hc_food1:physical_activity_binary ## freq_consumption_hc_food1:age_group_young_adult ## freq_consumption_hc_food1:age_group_adult ## freq_consumption_hc_food1:age_group_senior ## veg_freq:num_meals *** ## veg_freq:food_between_meals_frequently ## veg_freq:food_between_meals_never ## veg_freq:food_between_meals_sometimes ## veg_freq:smoke1 ## veg_freq:water_daily . ## veg_freq:caloric_beverages1 ** ## veg_freq:activity_freq ** ## veg_freq:tech_use ## veg_freq:alcohol_never ** ## veg_freq:alcohol_sometimes ## veg_freq:transport_bike ## veg_freq:transport_motorbike ## veg_freq:transport_public_transportation ** ## veg_freq:transport_walking ## veg_freq:eating_habit_binary ## veg_freq:physical_activity_binary ## veg_freq:age_group_young_adult ## veg_freq:age_group_adult ** ## veg_freq:age_group_senior ## num_meals:food_between_meals_frequently . ## num_meals:food_between_meals_never ## num_meals:food_between_meals_sometimes * ## num_meals:smoke1 ## num_meals:water_daily ## num_meals:caloric_beverages1 ## num_meals:activity_freq ## num_meals:tech_use ** ## num_meals:alcohol_never ## num_meals:alcohol_sometimes ## num_meals:transport_bike ## num_meals:transport_motorbike ## num_meals:transport_public_transportation ## num_meals:transport_walking ** ## num_meals:eating_habit_binary *** ## num_meals:physical_activity_binary ## num_meals:age_group_young_adult ## num_meals:age_group_adult ## num_meals:age_group_senior ## food_between_meals_frequently:food_between_meals_never ## food_between_meals_frequently:food_between_meals_sometimes ## food_between_meals_frequently:smoke1 ## food_between_meals_frequently:water_daily . ## food_between_meals_frequently:caloric_beverages1 . ## food_between_meals_frequently:activity_freq ## food_between_meals_frequently:tech_use ## food_between_meals_frequently:alcohol_never ** ## food_between_meals_frequently:alcohol_sometimes * ## food_between_meals_frequently:transport_bike ## food_between_meals_frequently:transport_motorbike ## food_between_meals_frequently:transport_public_transportation ## food_between_meals_frequently:transport_walking ## food_between_meals_frequently:eating_habit_binary ## food_between_meals_frequently:physical_activity_binary ## food_between_meals_frequently:age_group_young_adult ## food_between_meals_frequently:age_group_adult ## food_between_meals_frequently:age_group_senior ## food_between_meals_never:food_between_meals_sometimes ## food_between_meals_never:smoke1 ## food_between_meals_never:water_daily ## food_between_meals_never:caloric_beverages1 ## food_between_meals_never:activity_freq ## food_between_meals_never:tech_use ## food_between_meals_never:alcohol_never ## food_between_meals_never:alcohol_sometimes ## food_between_meals_never:transport_bike ## food_between_meals_never:transport_motorbike ## food_between_meals_never:transport_public_transportation ## food_between_meals_never:transport_walking ## food_between_meals_never:eating_habit_binary ## food_between_meals_never:physical_activity_binary ## food_between_meals_never:age_group_young_adult ## food_between_meals_never:age_group_adult ## food_between_meals_never:age_group_senior ## food_between_meals_sometimes:smoke1 ## food_between_meals_sometimes:water_daily ## food_between_meals_sometimes:caloric_beverages1 . ## food_between_meals_sometimes:activity_freq ## food_between_meals_sometimes:tech_use * ## food_between_meals_sometimes:alcohol_never ## food_between_meals_sometimes:alcohol_sometimes . ## food_between_meals_sometimes:transport_bike ## food_between_meals_sometimes:transport_motorbike ## food_between_meals_sometimes:transport_public_transportation * ## food_between_meals_sometimes:transport_walking ## food_between_meals_sometimes:eating_habit_binary ## food_between_meals_sometimes:physical_activity_binary ## food_between_meals_sometimes:age_group_young_adult ## food_between_meals_sometimes:age_group_adult ## food_between_meals_sometimes:age_group_senior ## smoke1:water_daily ## smoke1:caloric_beverages1 ## smoke1:activity_freq ## smoke1:tech_use ## smoke1:alcohol_never ## smoke1:alcohol_sometimes ## smoke1:transport_bike ## smoke1:transport_motorbike ## smoke1:transport_public_transportation ## smoke1:transport_walking ## smoke1:eating_habit_binary ## smoke1:physical_activity_binary ## smoke1:age_group_young_adult ## smoke1:age_group_adult ## smoke1:age_group_senior ## water_daily:caloric_beverages1 ## water_daily:activity_freq ** ## water_daily:tech_use * ## water_daily:alcohol_never ## water_daily:alcohol_sometimes ## water_daily:transport_bike ## water_daily:transport_motorbike ## water_daily:transport_public_transportation * ## water_daily:transport_walking . ## water_daily:eating_habit_binary ## water_daily:physical_activity_binary ## water_daily:age_group_young_adult ## water_daily:age_group_adult ## water_daily:age_group_senior ## caloric_beverages1:activity_freq ## caloric_beverages1:tech_use ## caloric_beverages1:alcohol_never ## caloric_beverages1:alcohol_sometimes ## caloric_beverages1:transport_bike ## caloric_beverages1:transport_motorbike ## caloric_beverages1:transport_public_transportation ## caloric_beverages1:transport_walking ## caloric_beverages1:eating_habit_binary ## caloric_beverages1:physical_activity_binary ## caloric_beverages1:age_group_young_adult ## caloric_beverages1:age_group_adult ## caloric_beverages1:age_group_senior ## activity_freq:tech_use ** ## activity_freq:alcohol_never ## activity_freq:alcohol_sometimes ## activity_freq:transport_bike ## activity_freq:transport_motorbike ## activity_freq:transport_public_transportation ## activity_freq:transport_walking ## activity_freq:eating_habit_binary ## activity_freq:physical_activity_binary *** ## activity_freq:age_group_young_adult ## activity_freq:age_group_adult * ## activity_freq:age_group_senior ## tech_use:alcohol_never ## tech_use:alcohol_sometimes . ## tech_use:transport_bike ## tech_use:transport_motorbike ## tech_use:transport_public_transportation ## tech_use:transport_walking ## tech_use:eating_habit_binary ## tech_use:physical_activity_binary ## tech_use:age_group_young_adult ## tech_use:age_group_adult . ## tech_use:age_group_senior ## alcohol_never:alcohol_sometimes ## alcohol_never:transport_bike ## alcohol_never:transport_motorbike ## alcohol_never:transport_public_transportation ## alcohol_never:transport_walking ## alcohol_never:eating_habit_binary ## alcohol_never:physical_activity_binary ## alcohol_never:age_group_young_adult ## alcohol_never:age_group_adult ## alcohol_never:age_group_senior ## alcohol_sometimes:transport_bike ## alcohol_sometimes:transport_motorbike ## alcohol_sometimes:transport_public_transportation . ## alcohol_sometimes:transport_walking ## alcohol_sometimes:eating_habit_binary ## alcohol_sometimes:physical_activity_binary ## alcohol_sometimes:age_group_young_adult ## alcohol_sometimes:age_group_adult ## alcohol_sometimes:age_group_senior ## transport_bike:transport_motorbike ## transport_bike:transport_public_transportation ## transport_bike:transport_walking ## transport_bike:eating_habit_binary ## transport_bike:physical_activity_binary ## transport_bike:age_group_young_adult ## transport_bike:age_group_adult ## transport_bike:age_group_senior ## transport_motorbike:transport_public_transportation ## transport_motorbike:transport_walking ## transport_motorbike:eating_habit_binary ## transport_motorbike:physical_activity_binary ## transport_motorbike:age_group_young_adult ## transport_motorbike:age_group_adult ## transport_motorbike:age_group_senior ## transport_public_transportation:transport_walking ## transport_public_transportation:eating_habit_binary ## transport_public_transportation:physical_activity_binary ## transport_public_transportation:age_group_young_adult . ## transport_public_transportation:age_group_adult ## transport_public_transportation:age_group_senior ## transport_walking:eating_habit_binary ## transport_walking:physical_activity_binary ## transport_walking:age_group_young_adult ## transport_walking:age_group_adult ## transport_walking:age_group_senior ## eating_habit_binary:physical_activity_binary ## eating_habit_binary:age_group_young_adult ## eating_habit_binary:age_group_adult ## eating_habit_binary:age_group_senior ## physical_activity_binary:age_group_young_adult ## physical_activity_binary:age_group_adult ## physical_activity_binary:age_group_senior ## age_group_young_adult:age_group_adult ## age_group_young_adult:age_group_senior ## age_group_adult:age_group_senior ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 12185.4 on 10378 degrees of freedom ## Residual deviance: 5453.6 on 10122 degrees of freedom ## AIC: 5967.6 ## ## Number of Fisher Scoring iterations: 15 Once we introduced interaction terms, we noticed that both weight and height became significant factors. Due to an excessive number of terms, we will not delve into them individually. 3.3.3 Stepwise LR Because of prolonged runtime issues, we opted against including stepwise Logistic Regression in our project. # # Build a model # model_lr_step &lt;- step(model_lr_complex, # direction = &#39;backward&#39;) # # Display summary # summary(model_lr_step) 3.4 Evaluate LR 3.4.1 Simple LR # Make a LR prediction prediction_lr_probability &lt;- predict(model_lr, newdata = test_lr, type = &#39;response&#39;) prediction_lr &lt;- ifelse(prediction_lr_probability &gt; 0.5, 1, 0) summary(prediction_lr_probability) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0023 0.5783 0.8975 0.7329 0.9721 0.9999 # Perform confusion matrix cm_lr &lt;- confusionMatrix(as.factor(prediction_lr), as.factor(test_lr$obesity_leveloverweight), positive = &#39;1&#39;) cm_lr ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 1854 473 ## 1 909 7143 ## ## Accuracy : 0.8668 ## 95% CI : (0.8602, 0.8733) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.6411 ## ## Mcnemar&#39;s Test P-Value : &lt; 2.2e-16 ## ## Sensitivity : 0.9379 ## Specificity : 0.6710 ## Pos Pred Value : 0.8871 ## Neg Pred Value : 0.7967 ## Prevalence : 0.7338 ## Detection Rate : 0.6882 ## Detection Prevalence : 0.7758 ## Balanced Accuracy : 0.8045 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.8668, sensitivity of 0.9379, and a Kappa coefficient of 0.6411. We will assess these results towards the conclusion of the assignment when we have completed stacked models. pred &lt;- ROCR::prediction(prediction_lr_probability, test_lr$obesity_leveloverweight) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;Simple Logistic Regression ROC Curve w/ AUC=&quot;, auc)) + theme_bw() 3.4.2 Complex LR # Make a complex LR prediction prediction_lr_complex_probability &lt;- predict(model_lr_complex, newdata = test_lr, type = &#39;response&#39;) ## Warning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == : ## prediction from rank-deficient fit; attr(*, &quot;non-estim&quot;) has doubtful cases attr(prediction_lr_complex_probability, &quot;non-estim&quot;) ## 173 1738 2016 2143 3351 3483 4275 4654 4922 6000 6722 6934 7011 ## 173 1738 2016 2143 3351 3483 4275 4654 4922 6000 6722 6934 7011 ## 7499 8148 8287 8321 8598 8743 9466 10109 10268 ## 7499 8148 8287 8321 8598 8743 9466 10109 10268 attr(prediction_lr_complex_probability, &quot;non-estim&quot;) &lt;- NULL prediction_lr_complex &lt;- ifelse(prediction_lr_complex_probability &gt; 0.5, 1, 0) summary(prediction_lr_complex_probability) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.5404 0.9210 0.7333 0.9855 1.0000 # Perform confusion matrix cm_lr_complex &lt;- confusionMatrix(as.factor(prediction_lr_complex), as.factor(test_lr$obesity_leveloverweight), positive = &#39;1&#39;) cm_lr_complex ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 1954 523 ## 1 809 7093 ## ## Accuracy : 0.8717 ## 95% CI : (0.8651, 0.878) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.6603 ## ## Mcnemar&#39;s Test P-Value : 5.767e-15 ## ## Sensitivity : 0.9313 ## Specificity : 0.7072 ## Pos Pred Value : 0.8976 ## Neg Pred Value : 0.7889 ## Prevalence : 0.7338 ## Detection Rate : 0.6834 ## Detection Prevalence : 0.7613 ## Balanced Accuracy : 0.8193 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.8717, sensitivity of 0.9313, and a Kappa coefficient of 0.6603. We will assess these results towards the conclusion of the assignment when we have completed stacked models. pred &lt;- ROCR::prediction(prediction_lr_complex_probability, test_lr$obesity_leveloverweight) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;Complex Logistic Regression ROC Curve w/ AUC=&quot;, auc)) + theme_bw() 3.4.3 Stepwise LR No evaluation will be conducted since we abandoned running stepwise Logistic Regression. "],["artificial-neural-network-ann.html", "4 Artificial Neural Network (ANN) R Packages and Setup 4.1 Introduction 4.2 Load Data 4.3 Model ANN 4.4 Evaluate ANN", " 4 Artificial Neural Network (ANN) R Packages and Setup 4.1 Introduction Below paragraph is copied from the assignment, we are planning on updating this as we formulate our narrative for the final deliverable: Artificial Neural Networks (ANNs) are modeled after the human brain and capable of learning and improving from experience. One strength is their ability to adapt to complex patterns and relationships in high-dimensional data, making them powerful tools for our dataset. However, ANNs require large amounts of training data and computational resources, which can make implementation time-consuming and resource-intensive. We will now attempt using an ANN. Despite being considered a ‘black box’ model due to its difficulty in interpreting decision-making processes compared to models like DT, ANNs may perform slightly better than LR in terms of accuracy. 4.2 Load Data # Load data train_ann &lt;- read.csv(&#39;Train Test Set/train_ann.csv&#39;) test_ann &lt;- read.csv(&#39;Train Test Set/test_ann.csv&#39;) # Display statistics str(train_ann) ## &#39;data.frame&#39;: 10379 obs. of 27 variables: ## $ gender_female : int 1 1 1 0 1 1 1 0 1 1 ... ## $ gender_male : int 0 0 0 1 0 0 0 1 0 0 ... ## $ age : num 0.213 0.426 0.106 0.106 0.234 ... ## $ fam_history_overweight1 : int 1 1 1 1 1 1 1 1 1 0 ... ## $ freq_consumption_hc_food1 : int 1 1 1 1 1 1 0 1 1 0 ... ## $ veg_freq : num 1 0.552 1 1 1 ... ## $ num_meals : num 0.667 0.659 0.667 0.667 0.667 ... ## $ food_between_meals_frequently : int 0 0 0 0 0 0 0 0 0 1 ... ## $ food_between_meals_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ food_between_meals_sometimes : int 1 1 1 0 1 1 1 1 1 0 ... ## $ smoke1 : int 0 0 0 0 0 0 0 0 0 0 ... ## $ water_daily : num 0.736 0.482 0.933 1 0.932 ... ## $ caloric_beverages1 : int 0 0 0 1 0 0 0 0 0 0 ... ## $ activity_freq : num 0.0557 0.3292 0.4882 1 0.0883 ... ## $ tech_use : num 0.243 0 0.328 0 0.337 ... ## $ alcohol_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ alcohol_sometimes : int 1 1 1 1 1 1 1 1 1 1 ... ## $ transport_bike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_motorbike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_public_transportation: int 1 0 1 1 1 1 1 1 1 1 ... ## $ transport_walking : int 0 0 0 0 0 0 0 0 0 0 ... ## $ eating_habit_binary : num 0.833 0.68 0.833 0.833 0.833 ... ## $ physical_activity_binary : num 0.336 0.598 0.562 1 0.318 ... ## $ age_group_young_adult : int 1 1 1 1 1 1 1 1 1 1 ... ## $ age_group_adult : int 0 0 0 0 0 0 0 0 0 0 ... ## $ age_group_senior : int 0 0 0 0 0 0 0 0 0 0 ... ## $ obesity_leveloverweight : int 1 1 1 1 1 1 1 1 1 0 ... summary(train_ann) ## gender_female gender_male age fam_history_overweight1 ## Min. :0.0000 Min. :0.0000 Min. :0.0000 Min. :0.0000 ## 1st Qu.:0.0000 1st Qu.:0.0000 1st Qu.:0.1277 1st Qu.:1.0000 ## Median :1.0000 Median :0.0000 Median :0.1915 Median :1.0000 ## Mean :0.5079 Mean :0.4921 Mean :0.2087 Mean :0.8177 ## 3rd Qu.:1.0000 3rd Qu.:1.0000 3rd Qu.:0.2553 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.0000 Max. :1.0000 Max. :1.0000 ## freq_consumption_hc_food1 veg_freq num_meals ## Min. :0.0000 Min. :0.0000 Min. :0.0000 ## 1st Qu.:1.0000 1st Qu.:0.5000 1st Qu.:0.6667 ## Median :1.0000 Median :0.7223 Median :0.6667 ## Mean :0.9166 Mean :0.7260 Mean :0.5858 ## 3rd Qu.:1.0000 3rd Qu.:1.0000 3rd Qu.:0.6667 ## Max. :1.0000 Max. :1.0000 Max. :1.0000 ## food_between_meals_frequently food_between_meals_never ## Min. :0.0000 Min. :0.00000 ## 1st Qu.:0.0000 1st Qu.:0.00000 ## Median :0.0000 Median :0.00000 ## Mean :0.1212 Mean :0.01253 ## 3rd Qu.:0.0000 3rd Qu.:0.00000 ## Max. :1.0000 Max. :1.00000 ## food_between_meals_sometimes smoke1 water_daily ## Min. :0.0000 Min. :0.00000 Min. :0.0000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:0.3981 ## Median :1.0000 Median :0.00000 Median :0.5000 ## Mean :0.8446 Mean :0.01224 Mean :0.5146 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:0.7678 ## Max. :1.0000 Max. :1.00000 Max. :1.0000 ## caloric_beverages1 activity_freq tech_use alcohol_never ## Min. :0.00000 Min. :0.00000 Min. :0.0000 Min. :0.0000 ## 1st Qu.:0.00000 1st Qu.:0.00235 1st Qu.:0.0000 1st Qu.:0.0000 ## Median :0.00000 Median :0.33333 Median :0.2870 Median :0.0000 ## Mean :0.03276 Mean :0.32699 Mean :0.3074 Mean :0.2461 ## 3rd Qu.:0.00000 3rd Qu.:0.52884 3rd Qu.:0.5000 3rd Qu.:0.0000 ## Max. :1.00000 Max. :1.00000 Max. :1.0000 Max. :1.0000 ## alcohol_sometimes transport_bike transport_motorbike ## Min. :0.0000 Min. :0.000000 Min. :0.000000 ## 1st Qu.:0.0000 1st Qu.:0.000000 1st Qu.:0.000000 ## Median :1.0000 Median :0.000000 Median :0.000000 ## Mean :0.7289 Mean :0.001734 Mean :0.001927 ## 3rd Qu.:1.0000 3rd Qu.:0.000000 3rd Qu.:0.000000 ## Max. :1.0000 Max. :1.000000 Max. :1.000000 ## transport_public_transportation transport_walking eating_habit_binary ## Min. :0.0000 Min. :0.00000 Min. :0.0000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:0.6546 ## Median :1.0000 Median :0.00000 Median :0.6667 ## Mean :0.8056 Mean :0.02226 Mean :0.6877 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:0.8333 ## Max. :1.0000 Max. :1.00000 Max. :1.0000 ## physical_activity_binary age_group_young_adult age_group_adult ## Min. :0.0000 Min. :0.0000 Min. :0.00000 ## 1st Qu.:0.3442 1st Qu.:1.0000 1st Qu.:0.00000 ## Median :0.4573 Median :1.0000 Median :0.00000 ## Mean :0.4732 Mean :0.9019 Mean :0.05222 ## 3rd Qu.:0.6000 3rd Qu.:1.0000 3rd Qu.:0.00000 ## Max. :1.0000 Max. :1.0000 Max. :1.00000 ## age_group_senior obesity_leveloverweight ## Min. :0.000000 Min. :0.0000 ## 1st Qu.:0.000000 1st Qu.:0.0000 ## Median :0.000000 Median :1.0000 ## Mean :0.003276 Mean :0.7262 ## 3rd Qu.:0.000000 3rd Qu.:1.0000 ## Max. :1.000000 Max. :1.0000 head(train_ann) ## gender_female gender_male age fam_history_overweight1 ## 1 1 0 0.2127660 1 ## 2 1 0 0.4255319 1 ## 3 1 0 0.1063830 1 ## 4 0 1 0.1063830 1 ## 5 1 0 0.2340426 1 ## 6 1 0 0.2553191 1 ## freq_consumption_hc_food1 veg_freq num_meals food_between_meals_frequently ## 1 1 1.0000000 0.6666667 0 ## 2 1 0.5516675 0.6593030 0 ## 3 1 1.0000000 0.6666667 0 ## 4 1 1.0000000 0.6666667 0 ## 5 1 1.0000000 0.6666667 0 ## 6 1 1.0000000 0.6666667 0 ## food_between_meals_never food_between_meals_sometimes smoke1 water_daily ## 1 0 1 0 0.7364515 ## 2 0 1 0 0.4822175 ## 3 0 1 0 0.9327950 ## 4 0 0 0 1.0000000 ## 5 0 1 0 0.9317565 ## 6 0 1 0 0.1737795 ## caloric_beverages1 activity_freq tech_use alcohol_never alcohol_sometimes ## 1 0 0.05569533 0.2434340 0 1 ## 2 0 0.32917367 0.0000000 0 1 ## 3 0 0.48822467 0.3277855 0 1 ## 4 1 1.00000000 0.0000000 0 1 ## 5 0 0.08827700 0.3366050 0 1 ## 6 0 0.07248500 0.3126750 0 1 ## transport_bike transport_motorbike transport_public_transportation ## 1 0 0 1 ## 2 0 0 0 ## 3 0 0 1 ## 4 0 0 1 ## 5 0 0 1 ## 6 0 0 1 ## transport_walking eating_habit_binary physical_activity_binary ## 1 0 0.8333333 0.3360436 ## 2 0 0.6802073 0.5975042 ## 3 0 0.8333333 0.5618206 ## 4 0 0.8333333 1.0000000 ## 5 0 0.8333333 0.3183242 ## 6 0 0.8333333 0.3184210 ## age_group_young_adult age_group_adult age_group_senior ## 1 1 0 0 ## 2 1 0 0 ## 3 1 0 0 ## 4 1 0 0 ## 5 1 0 0 ## 6 1 0 0 ## obesity_leveloverweight ## 1 1 ## 2 1 ## 3 1 ## 4 1 ## 5 1 ## 6 1 4.3 Model ANN 4.3.1 Simple ANN We will initiate with a single neuron (single node) ANN to run a preliminary simple model. Once we have finished working on that model, we will create a more complex model consisting of one hidden layer and one neuron. # Build a model model_ann &lt;- neuralnet(obesity_leveloverweight ~ ., data = train_ann, hidden = 1) # Display summary summary(model_ann) ## Length Class Mode ## call 4 -none- call ## response 10379 -none- numeric ## covariate 269854 -none- numeric ## model.list 2 -none- list ## err.fct 1 -none- function ## act.fct 1 -none- function ## linear.output 1 -none- logical ## data 27 data.frame list ## exclude 0 -none- NULL ## net.result 1 -none- list ## weights 1 -none- list ## generalized.weights 1 -none- list ## startweights 1 -none- list ## result.matrix 32 -none- numeric 4.3.2 Complex ANN Adding hidden layers increases computational requirements, so this will take significantly longer to run compared to a simple ANN. # Display summary model_ann_complex &lt;- neuralnet(obesity_leveloverweight ~ ., data = train_ann, hidden = c(1, 1), stepmax = 1e+07) summary(model_ann_complex) ## Length Class Mode ## call 5 -none- call ## response 10379 -none- numeric ## covariate 269854 -none- numeric ## model.list 2 -none- list ## err.fct 1 -none- function ## act.fct 1 -none- function ## linear.output 1 -none- logical ## data 27 data.frame list ## exclude 0 -none- NULL ## net.result 1 -none- list ## weights 1 -none- list ## generalized.weights 1 -none- list ## startweights 1 -none- list ## result.matrix 34 -none- numeric 4.4 Evaluate ANN 4.4.1 Simple ANN # Make a prediction prediction_ann_probability &lt;- predict(model_ann, test_ann) prediction_ann &lt;- ifelse(prediction_ann_probability &gt;= 0.5, 1, 0) summary(prediction_ann_probability) ## V1 ## Min. :0.08761 ## 1st Qu.:0.53668 ## Median :0.90047 ## Mean :0.73205 ## 3rd Qu.:0.97776 ## Max. :1.00227 # Perform confusion matrix cm_ann &lt;- confusionMatrix(as.factor(prediction_ann), as.factor(test_ann$obesity_leveloverweight), positive = &#39;1&#39;) cm_ann ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 1939 561 ## 1 824 7055 ## ## Accuracy : 0.8666 ## 95% CI : (0.8599, 0.873) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.6478 ## ## Mcnemar&#39;s Test P-Value : 1.922e-12 ## ## Sensitivity : 0.9263 ## Specificity : 0.7018 ## Pos Pred Value : 0.8954 ## Neg Pred Value : 0.7756 ## Prevalence : 0.7338 ## Detection Rate : 0.6797 ## Detection Prevalence : 0.7591 ## Balanced Accuracy : 0.8141 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.8666, sensitivity of 0.9263, and a Kappa coefficient of 0.6478. We will assess these results towards the conclusion of the assignment when we have completed stacked models. pred &lt;- ROCR::prediction(prediction_ann_probability, test_ann$obesity_leveloverweight) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;Simple ANN ROC Curve w/ AUC=&quot;, auc)) + theme_bw() 4.4.2 Complex ANN # Make a prediction prediction_ann_complex_probability &lt;- predict(model_ann_complex, test_ann) prediction_ann_complex &lt;- ifelse(prediction_ann_complex_probability &gt;= 0.5, 1, 0) summary(prediction_ann_complex_probability) ## V1 ## Min. :0.04298 ## 1st Qu.:0.51153 ## Median :0.91891 ## Mean :0.73173 ## 3rd Qu.:0.97819 ## Max. :0.97998 # Perform confusion matrix cm_ann_complex &lt;- confusionMatrix(as.factor(prediction_ann_complex), as.factor(test_ann$obesity_leveloverweight), positive = &#39;1&#39;) cm_ann_complex ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 1973 594 ## 1 790 7022 ## ## Accuracy : 0.8667 ## 95% CI : (0.86, 0.8731) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.6508 ## ## Mcnemar&#39;s Test P-Value : 1.592e-07 ## ## Sensitivity : 0.9220 ## Specificity : 0.7141 ## Pos Pred Value : 0.8989 ## Neg Pred Value : 0.7686 ## Prevalence : 0.7338 ## Detection Rate : 0.6766 ## Detection Prevalence : 0.7527 ## Balanced Accuracy : 0.8180 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.8667, sensitivity of 0.922, and a Kappa coefficient of 0.6508. We will assess these results towards the conclusion of the assignment when we have completed stacked models. pred &lt;- ROCR::prediction(prediction_ann_complex_probability, test_ann$obesity_leveloverweight) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;Complex ANN ROC Curve w/ AUC=&quot;, auc)) + theme_bw() "],["k-neareast-neighbor-knn.html", "5 K-Neareast Neighbor (KNN) R Packages and Setup 5.1 Introduction 5.2 Load Data 5.3 Model KNN 5.4 Evaluate KNN", " 5 K-Neareast Neighbor (KNN) R Packages and Setup 5.1 Introduction Below paragraph is copied from the assignment, we are planning on updating this as we formulate our narrative for the final deliverable: KNN can be particularly useful for classification tasks as it identifies the closest training samples (neighbors) in feature space relative to a given test instance, and subsequently employs the labels or values of these neighbors to make predictions. however, KNN is highly sensitive to outliers and can easily lead the model to overfit due to noises. In an attempt to apply two distinct KNN models, we will initiate with a K value equal to the square root of the training set size, which is common practice. Additionally, we will experiment with another K value to assess its potential impact on our model. 5.2 Load Data # Load data train_knn_x &lt;- read.csv(&#39;Train Test Set/train_knn_x.csv&#39;) train_knn_y &lt;- read.csv(&#39;Train Test Set/train_knn_y.csv&#39;) test_knn_x &lt;- read.csv(&#39;Train Test Set/test_knn_x.csv&#39;) test_knn_y &lt;- read.csv(&#39;Train Test Set/test_knn_y.csv&#39;) # Display statistics str(train_knn_x) ## &#39;data.frame&#39;: 10379 obs. of 26 variables: ## $ gender_female : int 1 1 1 0 1 1 1 0 1 1 ... ## $ gender_male : int 0 0 0 1 0 0 0 1 0 0 ... ## $ age : num 0.213 0.426 0.106 0.106 0.234 ... ## $ fam_history_overweight1 : int 1 1 1 1 1 1 1 1 1 0 ... ## $ freq_consumption_hc_food1 : int 1 1 1 1 1 1 0 1 1 0 ... ## $ veg_freq : num 1 0.552 1 1 1 ... ## $ num_meals : num 0.667 0.659 0.667 0.667 0.667 ... ## $ food_between_meals_frequently : int 0 0 0 0 0 0 0 0 0 1 ... ## $ food_between_meals_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ food_between_meals_sometimes : int 1 1 1 0 1 1 1 1 1 0 ... ## $ smoke1 : int 0 0 0 0 0 0 0 0 0 0 ... ## $ water_daily : num 0.736 0.482 0.933 1 0.932 ... ## $ caloric_beverages1 : int 0 0 0 1 0 0 0 0 0 0 ... ## $ activity_freq : num 0.0557 0.3292 0.4882 1 0.0883 ... ## $ tech_use : num 0.243 0 0.328 0 0.337 ... ## $ alcohol_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ alcohol_sometimes : int 1 1 1 1 1 1 1 1 1 1 ... ## $ transport_bike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_motorbike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_public_transportation: int 1 0 1 1 1 1 1 1 1 1 ... ## $ transport_walking : int 0 0 0 0 0 0 0 0 0 0 ... ## $ eating_habit_binary : num 0.833 0.68 0.833 0.833 0.833 ... ## $ physical_activity_binary : num 0.336 0.598 0.562 1 0.318 ... ## $ age_group_young_adult : int 1 1 1 1 1 1 1 1 1 1 ... ## $ age_group_adult : int 0 0 0 0 0 0 0 0 0 0 ... ## $ age_group_senior : int 0 0 0 0 0 0 0 0 0 0 ... summary(train_knn_x) ## gender_female gender_male age fam_history_overweight1 ## Min. :0.0000 Min. :0.0000 Min. :0.0000 Min. :0.0000 ## 1st Qu.:0.0000 1st Qu.:0.0000 1st Qu.:0.1277 1st Qu.:1.0000 ## Median :1.0000 Median :0.0000 Median :0.1915 Median :1.0000 ## Mean :0.5079 Mean :0.4921 Mean :0.2087 Mean :0.8177 ## 3rd Qu.:1.0000 3rd Qu.:1.0000 3rd Qu.:0.2553 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.0000 Max. :1.0000 Max. :1.0000 ## freq_consumption_hc_food1 veg_freq num_meals ## Min. :0.0000 Min. :0.0000 Min. :0.0000 ## 1st Qu.:1.0000 1st Qu.:0.5000 1st Qu.:0.6667 ## Median :1.0000 Median :0.7223 Median :0.6667 ## Mean :0.9166 Mean :0.7260 Mean :0.5858 ## 3rd Qu.:1.0000 3rd Qu.:1.0000 3rd Qu.:0.6667 ## Max. :1.0000 Max. :1.0000 Max. :1.0000 ## food_between_meals_frequently food_between_meals_never ## Min. :0.0000 Min. :0.00000 ## 1st Qu.:0.0000 1st Qu.:0.00000 ## Median :0.0000 Median :0.00000 ## Mean :0.1212 Mean :0.01253 ## 3rd Qu.:0.0000 3rd Qu.:0.00000 ## Max. :1.0000 Max. :1.00000 ## food_between_meals_sometimes smoke1 water_daily ## Min. :0.0000 Min. :0.00000 Min. :0.0000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:0.3981 ## Median :1.0000 Median :0.00000 Median :0.5000 ## Mean :0.8446 Mean :0.01224 Mean :0.5146 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:0.7678 ## Max. :1.0000 Max. :1.00000 Max. :1.0000 ## caloric_beverages1 activity_freq tech_use alcohol_never ## Min. :0.00000 Min. :0.00000 Min. :0.0000 Min. :0.0000 ## 1st Qu.:0.00000 1st Qu.:0.00235 1st Qu.:0.0000 1st Qu.:0.0000 ## Median :0.00000 Median :0.33333 Median :0.2870 Median :0.0000 ## Mean :0.03276 Mean :0.32699 Mean :0.3074 Mean :0.2461 ## 3rd Qu.:0.00000 3rd Qu.:0.52884 3rd Qu.:0.5000 3rd Qu.:0.0000 ## Max. :1.00000 Max. :1.00000 Max. :1.0000 Max. :1.0000 ## alcohol_sometimes transport_bike transport_motorbike ## Min. :0.0000 Min. :0.000000 Min. :0.000000 ## 1st Qu.:0.0000 1st Qu.:0.000000 1st Qu.:0.000000 ## Median :1.0000 Median :0.000000 Median :0.000000 ## Mean :0.7289 Mean :0.001734 Mean :0.001927 ## 3rd Qu.:1.0000 3rd Qu.:0.000000 3rd Qu.:0.000000 ## Max. :1.0000 Max. :1.000000 Max. :1.000000 ## transport_public_transportation transport_walking eating_habit_binary ## Min. :0.0000 Min. :0.00000 Min. :0.0000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:0.6546 ## Median :1.0000 Median :0.00000 Median :0.6667 ## Mean :0.8056 Mean :0.02226 Mean :0.6877 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:0.8333 ## Max. :1.0000 Max. :1.00000 Max. :1.0000 ## physical_activity_binary age_group_young_adult age_group_adult ## Min. :0.0000 Min. :0.0000 Min. :0.00000 ## 1st Qu.:0.3442 1st Qu.:1.0000 1st Qu.:0.00000 ## Median :0.4573 Median :1.0000 Median :0.00000 ## Mean :0.4732 Mean :0.9019 Mean :0.05222 ## 3rd Qu.:0.6000 3rd Qu.:1.0000 3rd Qu.:0.00000 ## Max. :1.0000 Max. :1.0000 Max. :1.00000 ## age_group_senior ## Min. :0.000000 ## 1st Qu.:0.000000 ## Median :0.000000 ## Mean :0.003276 ## 3rd Qu.:0.000000 ## Max. :1.000000 head(train_knn_x) ## gender_female gender_male age fam_history_overweight1 ## 1 1 0 0.2127660 1 ## 2 1 0 0.4255319 1 ## 3 1 0 0.1063830 1 ## 4 0 1 0.1063830 1 ## 5 1 0 0.2340426 1 ## 6 1 0 0.2553191 1 ## freq_consumption_hc_food1 veg_freq num_meals food_between_meals_frequently ## 1 1 1.0000000 0.6666667 0 ## 2 1 0.5516675 0.6593030 0 ## 3 1 1.0000000 0.6666667 0 ## 4 1 1.0000000 0.6666667 0 ## 5 1 1.0000000 0.6666667 0 ## 6 1 1.0000000 0.6666667 0 ## food_between_meals_never food_between_meals_sometimes smoke1 water_daily ## 1 0 1 0 0.7364515 ## 2 0 1 0 0.4822175 ## 3 0 1 0 0.9327950 ## 4 0 0 0 1.0000000 ## 5 0 1 0 0.9317565 ## 6 0 1 0 0.1737795 ## caloric_beverages1 activity_freq tech_use alcohol_never alcohol_sometimes ## 1 0 0.05569533 0.2434340 0 1 ## 2 0 0.32917367 0.0000000 0 1 ## 3 0 0.48822467 0.3277855 0 1 ## 4 1 1.00000000 0.0000000 0 1 ## 5 0 0.08827700 0.3366050 0 1 ## 6 0 0.07248500 0.3126750 0 1 ## transport_bike transport_motorbike transport_public_transportation ## 1 0 0 1 ## 2 0 0 0 ## 3 0 0 1 ## 4 0 0 1 ## 5 0 0 1 ## 6 0 0 1 ## transport_walking eating_habit_binary physical_activity_binary ## 1 0 0.8333333 0.3360436 ## 2 0 0.6802073 0.5975042 ## 3 0 0.8333333 0.5618206 ## 4 0 0.8333333 1.0000000 ## 5 0 0.8333333 0.3183242 ## 6 0 0.8333333 0.3184210 ## age_group_young_adult age_group_adult age_group_senior ## 1 1 0 0 ## 2 1 0 0 ## 3 1 0 0 ## 4 1 0 0 ## 5 1 0 0 ## 6 1 0 0 str(train_knn_y) ## &#39;data.frame&#39;: 10379 obs. of 1 variable: ## $ x: int 1 1 1 1 1 1 1 1 1 0 ... summary(train_knn_y) ## x ## Min. :0.0000 ## 1st Qu.:0.0000 ## Median :1.0000 ## Mean :0.7262 ## 3rd Qu.:1.0000 ## Max. :1.0000 head(train_knn_y) ## x ## 1 1 ## 2 1 ## 3 1 ## 4 1 ## 5 1 ## 6 1 5.3 Model KNN 5.3.1 Default KNN We will use the square root of the number of rows in the train set as an initial value for parameter k. Next, we will employ grid search to optimize our KNN model and examine if we can enhance its accuracy and overall fit. # Set seed for reproducibility set.seed(12345) # Build a model model_knn &lt;- knn(train = train_knn_x, test = test_knn_x, cl = train_knn_y$x, k = sqrt(nrow(train_knn_x)), prob = TRUE) prediction_knn_probability &lt;- attributes(model_knn)$prob # Display summary summary(model_knn) ## 0 1 ## 2218 8161 5.3.2 Tuned KNN We will execute a grid search with 10-fold cross validation. # Set seed for reproducibility set.seed(12345) # Set up control parameters ctrl &lt;- trainControl(method = &#39;cv&#39;, number = 10) # Define the tuning grid grid &lt;- expand.grid(k = seq(1, 20, by = 1)) # Tune the model knn_tuned &lt;- train(x = train_knn_x, y = train_knn_y$x, method = &#39;knn&#39;, trControl = ctrl, tuneGrid = grid) # Store best parameter best_k &lt;- knn_tuned$bestTune$k # Build a model model_knn_tuned &lt;- knn(train = train_knn_x, test = test_knn_x, cl = train_knn_y$x, k = best_k, prob = TRUE) # Display summary print(best_k) ## [1] 16 summary(model_knn_tuned) ## 0 1 ## 2498 7881 According to the results, the optimal value of k is 9. 5.4 Evaluate KNN 5.4.1 Default KNN # Make a prediction prediction_knn &lt;- model_knn prediction_knn_probability &lt;- attributes(prediction_knn)$prob summary(prediction_knn_probability) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.5000 0.7723 0.9109 0.8657 0.9802 1.0000 # Perform confusion matrix cm_knn &lt;- confusionMatrix(as.factor(prediction_knn), as.factor(test_knn_y$x), positive = &#39;1&#39;) cm_knn ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 1688 530 ## 1 1075 7086 ## ## Accuracy : 0.8454 ## 95% CI : (0.8383, 0.8523) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.5776 ## ## Mcnemar&#39;s Test P-Value : &lt; 2.2e-16 ## ## Sensitivity : 0.9304 ## Specificity : 0.6109 ## Pos Pred Value : 0.8683 ## Neg Pred Value : 0.7610 ## Prevalence : 0.7338 ## Detection Rate : 0.6827 ## Detection Prevalence : 0.7863 ## Balanced Accuracy : 0.7707 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.8454, sensitivity of 0.9304, and a Kappa coefficient of 0.5776. We will assess these results towards the conclusion of the assignment when we have completed stacked models. pred &lt;- ROCR::prediction(prediction_knn_probability, test_knn_y$x) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;Simple KNN ROC Curve w/ AUC=&quot;, auc)) + theme_bw() 5.4.2 Tuned KNN # Make a prediction prediction_knn_tuned &lt;- model_knn_tuned prediction_knn_tuned_probability &lt;- attributes(prediction_knn_tuned)$prob summary(prediction_knn_tuned_probability) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.5000 0.7647 0.9375 0.8771 1.0000 1.0000 # Perform confusion matrix cm_knn_tuned &lt;- confusionMatrix(as.factor(prediction_knn_tuned), as.factor(test_knn_y$x), positive = &#39;1&#39;) cm_knn_tuned ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 1893 605 ## 1 870 7011 ## ## Accuracy : 0.8579 ## 95% CI : (0.851, 0.8646) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.6248 ## ## Mcnemar&#39;s Test P-Value : 6.244e-12 ## ## Sensitivity : 0.9206 ## Specificity : 0.6851 ## Pos Pred Value : 0.8896 ## Neg Pred Value : 0.7578 ## Prevalence : 0.7338 ## Detection Rate : 0.6755 ## Detection Prevalence : 0.7593 ## Balanced Accuracy : 0.8028 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.8579, sensitivity of 0.9206, and a Kappa coefficient of 0.6248. We will assess these results towards the conclusion of the assignment when we have completed stacked models. pred &lt;- ROCR::prediction(prediction_knn_tuned_probability, test_knn_y$x) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;Tuned KNN ROC Curve w/ AUC=&quot;, auc)) + theme_bw() "],["decision-tree-dt.html", "6 Decision Tree (DT) R Packages and Setup 6.1 Introduction 6.2 Load Data 6.3 Model DT 6.4 Evaluate DT", " 6 Decision Tree (DT) R Packages and Setup 6.1 Introduction Below paragraph is copied from the assignment, we are planning on updating this as we formulate our narrative for the final deliverable: A Decision Tree (DT) is a machine learning model that uses a tree structure for decision making based on given features (predictors). It partitions the input space with tests at nodes to output predictions at leaves. One of its strengths is the ability to handle both categorical and numerical data easily. However, DT can overfit training data and may require pruning or adjustments. Therefore, RF or GB often provide better performance. In our case, DTs are particularly effective for binary classification problems. In this module, we will utilize two DT models: a simple DT and a DT with a cost matrix. Our goal is to improve our model’s sensitivity through the employment of these trees as they will yield the highest profit given the cost structure discussed earlier. 6.2 Load Data # Load data train_dt &lt;- read.csv(&#39;Train Test Set/train_dt.csv&#39;) test_dt &lt;- read.csv(&#39;Train Test Set/test_dt.csv&#39;) # Display statistics str(train_dt) ## &#39;data.frame&#39;: 10379 obs. of 27 variables: ## $ gender_female : int 1 1 1 0 1 1 1 0 1 1 ... ## $ gender_male : int 0 0 0 1 0 0 0 1 0 0 ... ## $ age : int 24 34 19 19 25 26 23 27 26 20 ... ## $ fam_history_overweight1 : int 1 1 1 1 1 1 1 1 1 0 ... ## $ freq_consumption_hc_food1 : int 1 1 1 1 1 1 0 1 1 0 ... ## $ veg_freq : num 3 2.1 3 3 3 ... ## $ num_meals : num 3 2.98 3 3 3 ... ## $ food_between_meals_frequently : int 0 0 0 0 0 0 0 0 0 1 ... ## $ food_between_meals_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ food_between_meals_sometimes : int 1 1 1 0 1 1 1 1 1 0 ... ## $ smoke1 : int 0 0 0 0 0 0 0 0 0 0 ... ## $ water_daily : num 2.47 1.96 2.87 3 2.86 ... ## $ caloric_beverages1 : int 0 0 0 1 0 0 0 0 0 0 ... ## $ activity_freq : num 0.167 0.988 1.465 3 0.265 ... ## $ tech_use : num 0.487 0 0.656 0 0.673 ... ## $ alcohol_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ alcohol_sometimes : int 1 1 1 1 1 1 1 1 1 1 ... ## $ transport_bike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_motorbike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_public_transportation: int 1 0 1 1 1 1 1 1 1 1 ... ## $ transport_walking : int 0 0 0 0 0 0 0 0 0 0 ... ## $ obesity_leveloverweight : int 1 1 1 1 1 1 1 1 1 0 ... ## $ eating_habit_binary : num 2.67 2.36 2.67 2.67 2.67 ... ## $ physical_activity_binary : num -0.32 0.988 0.809 3 -0.408 ... ## $ age_group_young_adult : int 1 1 1 1 1 1 1 1 1 1 ... ## $ age_group_adult : int 0 0 0 0 0 0 0 0 0 0 ... ## $ age_group_senior : int 0 0 0 0 0 0 0 0 0 0 ... summary(train_dt) ## gender_female gender_male age fam_history_overweight1 ## Min. :0.0000 Min. :0.0000 Min. :14.00 Min. :0.0000 ## 1st Qu.:0.0000 1st Qu.:0.0000 1st Qu.:20.00 1st Qu.:1.0000 ## Median :1.0000 Median :0.0000 Median :23.00 Median :1.0000 ## Mean :0.5079 Mean :0.4921 Mean :23.81 Mean :0.8177 ## 3rd Qu.:1.0000 3rd Qu.:1.0000 3rd Qu.:26.00 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.0000 Max. :61.00 Max. :1.0000 ## freq_consumption_hc_food1 veg_freq num_meals ## Min. :0.0000 Min. :1.000 Min. :1.000 ## 1st Qu.:1.0000 1st Qu.:2.000 1st Qu.:3.000 ## Median :1.0000 Median :2.445 Median :3.000 ## Mean :0.9166 Mean :2.452 Mean :2.758 ## 3rd Qu.:1.0000 3rd Qu.:3.000 3rd Qu.:3.000 ## Max. :1.0000 Max. :3.000 Max. :4.000 ## food_between_meals_frequently food_between_meals_never ## Min. :0.0000 Min. :0.00000 ## 1st Qu.:0.0000 1st Qu.:0.00000 ## Median :0.0000 Median :0.00000 ## Mean :0.1212 Mean :0.01253 ## 3rd Qu.:0.0000 3rd Qu.:0.00000 ## Max. :1.0000 Max. :1.00000 ## food_between_meals_sometimes smoke1 water_daily ## Min. :0.0000 Min. :0.00000 Min. :1.000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:1.796 ## Median :1.0000 Median :0.00000 Median :2.000 ## Mean :0.8446 Mean :0.01224 Mean :2.029 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:2.536 ## Max. :1.0000 Max. :1.00000 Max. :3.000 ## caloric_beverages1 activity_freq tech_use alcohol_never ## Min. :0.00000 Min. :0.00000 Min. :0.0000 Min. :0.0000 ## 1st Qu.:0.00000 1st Qu.:0.00705 1st Qu.:0.0000 1st Qu.:0.0000 ## Median :0.00000 Median :1.00000 Median :0.5740 Median :0.0000 ## Mean :0.03276 Mean :0.98097 Mean :0.6147 Mean :0.2461 ## 3rd Qu.:0.00000 3rd Qu.:1.58652 3rd Qu.:1.0000 3rd Qu.:0.0000 ## Max. :1.00000 Max. :3.00000 Max. :2.0000 Max. :1.0000 ## alcohol_sometimes transport_bike transport_motorbike ## Min. :0.0000 Min. :0.000000 Min. :0.000000 ## 1st Qu.:0.0000 1st Qu.:0.000000 1st Qu.:0.000000 ## Median :1.0000 Median :0.000000 Median :0.000000 ## Mean :0.7289 Mean :0.001734 Mean :0.001927 ## 3rd Qu.:1.0000 3rd Qu.:0.000000 3rd Qu.:0.000000 ## Max. :1.0000 Max. :1.000000 Max. :1.000000 ## transport_public_transportation transport_walking obesity_leveloverweight ## Min. :0.0000 Min. :0.00000 Min. :0.0000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:0.0000 ## Median :1.0000 Median :0.00000 Median :1.0000 ## Mean :0.8056 Mean :0.02226 Mean :0.7262 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.00000 Max. :1.0000 ## eating_habit_binary physical_activity_binary age_group_young_adult ## Min. :1.000 Min. :-2.0000 Min. :0.0000 ## 1st Qu.:2.309 1st Qu.:-0.2790 1st Qu.:1.0000 ## Median :2.333 Median : 0.2867 Median :1.0000 ## Mean :2.375 Mean : 0.3662 Mean :0.9019 ## 3rd Qu.:2.667 3rd Qu.: 1.0000 3rd Qu.:1.0000 ## Max. :3.000 Max. : 3.0000 Max. :1.0000 ## age_group_adult age_group_senior ## Min. :0.00000 Min. :0.000000 ## 1st Qu.:0.00000 1st Qu.:0.000000 ## Median :0.00000 Median :0.000000 ## Mean :0.05222 Mean :0.003276 ## 3rd Qu.:0.00000 3rd Qu.:0.000000 ## Max. :1.00000 Max. :1.000000 head(train_dt) ## gender_female gender_male age fam_history_overweight1 ## 1 1 0 24 1 ## 2 1 0 34 1 ## 3 1 0 19 1 ## 4 0 1 19 1 ## 5 1 0 25 1 ## 6 1 0 26 1 ## freq_consumption_hc_food1 veg_freq num_meals food_between_meals_frequently ## 1 1 3.000000 3.000000 0 ## 2 1 2.103335 2.977909 0 ## 3 1 3.000000 3.000000 0 ## 4 1 3.000000 3.000000 0 ## 5 1 3.000000 3.000000 0 ## 6 1 3.000000 3.000000 0 ## food_between_meals_never food_between_meals_sometimes smoke1 water_daily ## 1 0 1 0 2.472903 ## 2 0 1 0 1.964435 ## 3 0 1 0 2.865590 ## 4 0 0 0 3.000000 ## 5 0 1 0 2.863513 ## 6 0 1 0 1.347559 ## caloric_beverages1 activity_freq tech_use alcohol_never alcohol_sometimes ## 1 0 0.167086 0.486868 0 1 ## 2 0 0.987521 0.000000 0 1 ## 3 0 1.464674 0.655571 0 1 ## 4 1 3.000000 0.000000 0 1 ## 5 0 0.264831 0.673210 0 1 ## 6 0 0.217455 0.625350 0 1 ## transport_bike transport_motorbike transport_public_transportation ## 1 0 0 1 ## 2 0 0 0 ## 3 0 0 1 ## 4 0 0 1 ## 5 0 0 1 ## 6 0 0 1 ## transport_walking obesity_leveloverweight eating_habit_binary ## 1 0 1 2.666667 ## 2 0 1 2.360415 ## 3 0 1 2.666667 ## 4 0 1 2.666667 ## 5 0 1 2.666667 ## 6 0 1 2.666667 ## physical_activity_binary age_group_young_adult age_group_adult ## 1 -0.319782 1 0 ## 2 0.987521 1 0 ## 3 0.809103 1 0 ## 4 3.000000 1 0 ## 5 -0.408379 1 0 ## 6 -0.407895 1 0 ## age_group_senior ## 1 0 ## 2 0 ## 3 0 ## 4 0 ## 5 0 ## 6 0 6.3 Model DT 6.3.1 Simple DT First, let’s construct a DT model without considering the misclassification error cost. # Build a model model_dt &lt;- C5.0(as.factor(obesity_leveloverweight) ~ ., data = train_dt) # Display summary summary(model_dt) ## ## Call: ## C5.0.formula(formula = as.factor(obesity_leveloverweight) ~ ., data = train_dt) ## ## ## C5.0 [Release 2.07 GPL Edition] Tue Apr 16 14:19:09 2024 ## ------------------------------- ## ## Class specified by attribute `outcome&#39; ## ## Read 10379 cases (27 attributes) from undefined.data ## ## Decision tree: ## ## fam_history_overweight1 &lt;= 0: ## :...age_group_adult &gt; 0: 1 (33/2) ## : age_group_adult &lt;= 0: ## : :...food_between_meals_never &gt; 0: ## : :...alcohol_never &lt;= 0: 1 (68/8) ## : : alcohol_never &gt; 0: 0 (9/2) ## : food_between_meals_never &lt;= 0: ## : :...age &gt; 26: ## : :...transport_public_transportation &lt;= 0: 1 (61/12) ## : : transport_public_transportation &gt; 0: 0 (13/5) ## : age &lt;= 26: ## : :...water_daily &gt; 2.987718: ## : :...eating_habit_binary &lt;= 1.832259: 1 (14/1) ## : : eating_habit_binary &gt; 1.832259: ## : : :...gender_female &lt;= 0: 1 (77/27) ## : : gender_female &gt; 0: 0 (32/9) ## : water_daily &lt;= 2.987718: ## : :...food_between_meals_sometimes &lt;= 0: 0 (626/39) ## : food_between_meals_sometimes &gt; 0: ## : :...num_meals &lt;= 2.986637: ## : :...veg_freq &gt; 2.549782: 0 (73/15) ## : : veg_freq &lt;= 2.549782: ## : : :...caloric_beverages1 &gt; 0: 1 (11/1) ## : : caloric_beverages1 &lt;= 0: ## : : :...activity_freq &gt; 0.010183: 1 (67/26) ## : : activity_freq &lt;= 0.010183: ## : : :...tech_use &lt;= 1.58483: 0 (25/4) ## : : tech_use &gt; 1.58483: 1 (3) ## : num_meals &gt; 2.986637: ## : :...transport_public_transportation &gt; 0: 0 (694/118) ## : transport_public_transportation &lt;= 0: ## : :...freq_consumption_hc_food1 &lt;= 0: 0 (14/1) ## : freq_consumption_hc_food1 &gt; 0: ## : :...water_daily &lt;= 1.49681: 0 (18/3) ## : water_daily &gt; 1.49681: ## : :...veg_freq &lt;= 2.104772: 1 (27/7) ## : veg_freq &gt; 2.104772: 0 (27/7) ## fam_history_overweight1 &gt; 0: ## :...food_between_meals_frequently &gt; 0: ## :...age &gt; 32: 1 (26/1) ## : age &lt;= 32: ## : :...alcohol_never &gt; 0: 0 (270/34) ## : alcohol_never &lt;= 0: ## : :...alcohol_sometimes &lt;= 0: 1 (49/8) ## : alcohol_sometimes &gt; 0: ## : :...gender_female &gt; 0: 0 (132/29) ## : gender_female &lt;= 0: ## : :...veg_freq &lt;= 2.291846: 0 (115/40) ## : veg_freq &gt; 2.291846: 1 (56/24) ## food_between_meals_frequently &lt;= 0: ## :...num_meals &gt; 3.259033: ## :...age &lt;= 18: 0 (92/11) ## : age &gt; 18: ## : :...num_meals &lt;= 3.998766: 1 (80/14) ## : num_meals &gt; 3.998766: 0 (33/4) ## num_meals &lt;= 3.259033: ## :...food_between_meals_sometimes &lt;= 0: ## :...water_daily &gt; 2.01897: 1 (51/7) ## : water_daily &lt;= 2.01897: ## : :...eating_habit_binary &lt;= 1.846881: 1 (28/6) ## : eating_habit_binary &gt; 1.846881: ## : :...transport_public_transportation &lt;= 0: 1 (23/9) ## : transport_public_transportation &gt; 0: 0 (98/28) ## food_between_meals_sometimes &gt; 0: ## :...age &gt; 23: 1 (3860/63) ## age &lt;= 23: ## :...transport_public_transportation &lt;= 0: ## :...water_daily &gt; 2.987718: 1 (48/10) ## : water_daily &lt;= 2.987718: ## : :...freq_consumption_hc_food1 &lt;= 0: 1 (19/8) ## : freq_consumption_hc_food1 &gt; 0: ## : :...age &lt;= 20: 0 (100/24) ## : age &gt; 20: ## : :...caloric_beverages1 &gt; 0: 1 (4) ## : caloric_beverages1 &lt;= 0: ## : :...tech_use &lt;= 1.229474: 0 (46/17) ## : tech_use &gt; 1.229474: 1 (7) ## transport_public_transportation &gt; 0: ## :...water_daily &gt; 2.045561: 1 (1271/60) ## water_daily &lt;= 2.045561: ## :...num_meals &lt;= 2.997414: 1 (715/48) ## num_meals &gt; 2.997414: ## :...age &lt;= 19: ## :...eating_habit_binary &lt;= 2.616983: 1 (369/169) ## : eating_habit_binary &gt; 2.616983: 0 (119/32) ## age &gt; 19: ## :...water_daily &lt;= 1.999278: ## :...water_daily &gt; 1: 1 (290/4) ## : water_daily &lt;= 1: ## : :...activity_freq &gt; 1.958694: 0 (19/4) ## : activity_freq &lt;= 1.958694: [S1] ## water_daily &gt; 1.999278: ## :...veg_freq &gt; 2.997951: ## :...gender_female &gt; 0: 0 (51/8) ## : gender_female &lt;= 0: ## : :...alcohol_never &lt;= 0: 1 (35/14) ## : alcohol_never &gt; 0: 0 (8/2) ## veg_freq &lt;= 2.997951: ## :...freq_consumption_hc_food1 &lt;= 0: ## :...tech_use &gt; 1.140348: 1 (6) ## : tech_use &lt;= 1.140348: ## : :...activity_freq &lt;= 0.497373: 0 (9) ## : activity_freq &gt; 0.497373: 1 (32/14) ## freq_consumption_hc_food1 &gt; 0: ## :...gender_female &lt;= 0: 1 (257/49) ## gender_female &gt; 0: [S2] ## ## SubTree [S1] ## ## physical_activity_binary &lt;= -1.50301: 0 (9/3) ## physical_activity_binary &gt; -1.50301: 1 (73/24) ## ## SubTree [S2] ## ## eating_habit_binary &gt; 2.344948: 1 (9) ## eating_habit_binary &lt;= 2.344948: ## :...veg_freq &lt;= 1.99953: 1 (11/1) ## veg_freq &gt; 1.99953: ## :...alcohol_sometimes &lt;= 0: 1 (34/11) ## alcohol_sometimes &gt; 0: ## :...activity_freq &lt;= 1.28775: 0 (26/7) ## activity_freq &gt; 1.28775: 1 (7/2) ## ## ## Evaluation on training data (10379 cases): ## ## Decision Tree ## ---------------- ## Size Errors ## ## 59 1076(10.4%) &lt;&lt; ## ## ## (a) (b) &lt;-classified as ## ---- ---- ## 2212 630 (a): class 0 ## 446 7091 (b): class 1 ## ## ## Attribute usage: ## ## 100.00% fam_history_overweight1 ## 97.01% age ## 88.82% food_between_meals_sometimes ## 84.77% num_meals ## 81.77% food_between_meals_frequently ## 52.82% water_daily ## 43.83% transport_public_transportation ## 18.23% age_group_adult ## 17.91% food_between_meals_never ## 8.57% veg_freq ## 8.19% gender_female ## 8.16% eating_habit_binary ## 7.15% alcohol_never ## 6.29% freq_consumption_hc_food1 ## 4.04% alcohol_sometimes ## 2.60% activity_freq ## 1.57% caloric_beverages1 ## 1.23% tech_use ## 0.79% physical_activity_binary ## ## ## Time: 0.1 secs plot(model_dt) varImp(model_dt) ## Overall ## fam_history_overweight1 100.00 ## age 97.01 ## food_between_meals_sometimes 88.82 ## num_meals 84.77 ## food_between_meals_frequently 81.77 ## water_daily 52.82 ## transport_public_transportation 43.83 ## age_group_adult 18.23 ## food_between_meals_never 17.91 ## veg_freq 8.57 ## gender_female 8.19 ## eating_habit_binary 8.16 ## alcohol_never 7.15 ## freq_consumption_hc_food1 6.29 ## alcohol_sometimes 4.04 ## activity_freq 2.60 ## caloric_beverages1 1.57 ## tech_use 1.23 ## physical_activity_binary 0.79 ## gender_male 0.00 ## smoke1 0.00 ## transport_bike 0.00 ## transport_motorbike 0.00 ## transport_walking 0.00 ## age_group_young_adult 0.00 ## age_group_senior 0.00 According to the variable importance chart, BMI is identified as one of the most significant features for making decisions. This makes intuitive sense since BMI and obesity are highly correlated. Age, on the other hand, exhibits an intriguing aspect as it ranks second in importance but noticeably lower than BMI. We suspect that older individuals may be more prone to obesity due to slower metabolism. 6.3.2 DT with Cost Matrix Now, we will introduce a cost matrix where misclassifying an individual as not obese when they are actually obese incurs significant business costs. Conversely, incorrectly labeling someone as obese but discovering they are healthy carries less financial consequence. # Build cost matrix cost_matrix_dt &lt;- matrix(c(0, 8, 1, 0), nrow = 2, byrow = TRUE, dimnames = list(Actual = c(&#39;0&#39;, &#39;1&#39;), Predicted = c(&#39;0&#39;, &#39;1&#39;))) # Build a model model_dt_cost &lt;- C5.0(as.factor(obesity_leveloverweight) ~ ., data = train_dt, costs = cost_matrix_dt) # Display summary summary(model_dt_cost) ## ## Call: ## C5.0.formula(formula = as.factor(obesity_leveloverweight) ~ ., data = ## train_dt, costs = cost_matrix_dt) ## ## ## C5.0 [Release 2.07 GPL Edition] Tue Apr 16 14:19:10 2024 ## ------------------------------- ## ## Class specified by attribute `outcome&#39; ## ## Read 10379 cases (27 attributes) from undefined.data ## Read misclassification costs from undefined.costs ## ## Decision tree: ## ## food_between_meals_frequently &lt;= 0: ## :...num_meals &gt; 3.998766: ## : :...alcohol_never &gt; 0: 0 (78/4) ## : : alcohol_never &lt;= 0: ## : : :...food_between_meals_sometimes &lt;= 0: 0 (14) ## : : food_between_meals_sometimes &gt; 0: 1 (70/51) ## : num_meals &lt;= 3.998766: ## : :...fam_history_overweight1 &gt; 0: 1 (7752/906) ## : fam_history_overweight1 &lt;= 0: ## : :...gender_female &lt;= 0: 1 (545/296) ## : gender_female &gt; 0: ## : :...age &gt; 20: 1 (240/140) ## : age &lt;= 20: ## : :...caloric_beverages1 &lt;= 0: ## : :...num_meals &lt;= 3.047959: 1 (326/279) ## : : num_meals &gt; 3.047959: 0 (49) ## : caloric_beverages1 &gt; 0: ## : :...veg_freq &lt;= 2.432886: 1 (18/6) ## : veg_freq &gt; 2.432886: ## : :...age_group_young_adult &lt;= 0: 1 (6/5) ## : age_group_young_adult &gt; 0: 0 (23) ## food_between_meals_frequently &gt; 0: ## :...gender_female &lt;= 0: 1 (493/310) ## gender_female &gt; 0: ## :...age_group_adult &gt; 0: 1 (10/1) ## age_group_adult &lt;= 0: ## :...fam_history_overweight1 &gt; 0: ## :...alcohol_never &gt; 0: 0 (162/13) ## : alcohol_never &lt;= 0: ## : :...num_meals &lt;= 3.058539: 1 (118/82) ## : num_meals &gt; 3.058539: 0 (25) ## fam_history_overweight1 &lt;= 0: ## :...transport_public_transportation &lt;= 0: 1 (19/16) ## transport_public_transportation &gt; 0: ## :...veg_freq &lt;= 2.278644: ## :...age &lt;= 20: 0 (92/3) ## : age &gt; 20: 1 (27/19) ## veg_freq &gt; 2.278644: ## :...alcohol_never &gt; 0: 0 (94) ## alcohol_never &lt;= 0: ## :...alcohol_sometimes &lt;= 0: 1 (3/1) ## alcohol_sometimes &gt; 0: 0 (215/2) ## ## ## Evaluation on training data (10379 cases): ## ## Decision Tree ## ----------------------- ## Size Errors Cost ## ## 22 2134(20.6%) 0.22 &lt;&lt; ## ## ## (a) (b) &lt;-classified as ## ---- ---- ## 730 2112 (a): class 0 ## 22 7515 (b): class 1 ## ## ## Attribute usage: ## ## 100.00% food_between_meals_frequently ## 93.59% fam_history_overweight1 ## 89.26% num_meals ## 23.75% gender_female ## 7.52% age ## 7.51% alcohol_never ## 7.37% age_group_adult ## 4.61% veg_freq ## 4.34% transport_public_transportation ## 4.07% caloric_beverages1 ## 2.10% alcohol_sometimes ## 0.81% food_between_meals_sometimes ## 0.28% age_group_young_adult ## ## ## Time: 0.1 secs plot(model_dt_cost) varImp(model_dt_cost) ## Overall ## food_between_meals_frequently 100.00 ## fam_history_overweight1 93.59 ## num_meals 89.26 ## gender_female 23.75 ## age 7.52 ## alcohol_never 7.51 ## age_group_adult 7.37 ## veg_freq 4.61 ## transport_public_transportation 4.34 ## caloric_beverages1 4.07 ## alcohol_sometimes 2.10 ## food_between_meals_sometimes 0.81 ## age_group_young_adult 0.28 ## gender_male 0.00 ## freq_consumption_hc_food1 0.00 ## food_between_meals_never 0.00 ## smoke1 0.00 ## water_daily 0.00 ## activity_freq 0.00 ## tech_use 0.00 ## transport_bike 0.00 ## transport_motorbike 0.00 ## transport_walking 0.00 ## eating_habit_binary 0.00 ## physical_activity_binary 0.00 ## age_group_senior 0.00 With a cost matrix in place, the variable importance chart now highlights a heavier emphasis on weight as a top feature, including BMI and weight-to-height ratio. 6.4 Evaluate DT 6.4.1 Simple DT # Make a prediction prediction_dt &lt;- predict(model_dt, test_dt) prediction_dt_prob &lt;- predict(model_dt, test_dt, type=&quot;prob&quot;) summary(prediction_dt) ## 0 1 ## 2590 7789 # Perform confusion matrix cm_dt &lt;- confusionMatrix(as.factor(prediction_dt), as.factor(test_dt$obesity_leveloverweight), positive = &#39;1&#39;) cm_dt ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 1993 597 ## 1 770 7019 ## ## Accuracy : 0.8683 ## 95% CI : (0.8616, 0.8747) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.656 ## ## Mcnemar&#39;s Test P-Value : 3.287e-06 ## ## Sensitivity : 0.9216 ## Specificity : 0.7213 ## Pos Pred Value : 0.9011 ## Neg Pred Value : 0.7695 ## Prevalence : 0.7338 ## Detection Rate : 0.6763 ## Detection Prevalence : 0.7505 ## Balanced Accuracy : 0.8215 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.8683, sensitivity of 0.9216, and a Kappa coefficient of 0.656. We will assess these results towards the conclusion of the assignment when we have completed stacked models. pred &lt;- ROCR::prediction(prediction_dt_prob[,2], test_dt$obesity_leveloverweight) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;Simple Decision Tree ROC Curve w/ AUC=&quot;, auc)) + theme_bw() 6.4.2 DT with Cost Matrix # Make a prediction prediction_dt_cost &lt;- predict(model_dt_cost, test_dt) # Perform confusion matrix cm_dt_cost &lt;- confusionMatrix(as.factor(prediction_dt_cost), as.factor(test_dt$obesity_leveloverweight), positive = &#39;1&#39;) cm_dt_cost ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 644 59 ## 1 2119 7557 ## ## Accuracy : 0.7902 ## 95% CI : (0.7822, 0.798) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.2955 ## ## Mcnemar&#39;s Test P-Value : &lt; 2.2e-16 ## ## Sensitivity : 0.9923 ## Specificity : 0.2331 ## Pos Pred Value : 0.7810 ## Neg Pred Value : 0.9161 ## Prevalence : 0.7338 ## Detection Rate : 0.7281 ## Detection Prevalence : 0.9323 ## Balanced Accuracy : 0.6127 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.7902, sensitivity of 0.9923, and a Kappa coefficient of 0.2955. We will assess these results towards the conclusion of the assignment when we have completed stacked models. "],["support-vector-machine-svm.html", "7 Support Vector Machine (SVM) R Packages and Setup 7.1 Introduction 7.2 Load Data 7.3 Model SVM 7.4 Evaluate SVM", " 7 Support Vector Machine (SVM) R Packages and Setup 7.1 Introduction Below paragraph is copied from the assignment, we are planning on updating this as we formulate our narrative for the final deliverable: Support Vector Machines (SVMs) are algorithms for classification and regression tasks. Linear (Vanilla Dot) and Radial Basis Function (RBF) kernels are popular choices. The Vanilla Dot kernel is simple, effective for linearly separable data, but can’t handle complex non-linear relationships. RBF transforms data into a high-dimensional space to model non-linear relationships but requires careful tuning for optimal performance. In SVM, we will use both Vanilla SVM and RBF SVM. Our objective is to evaluate the performance of these two methods in terms of accuracy and sensitivity when predicting our test dataset. 7.2 Load Data # Load data train_svm &lt;- read.csv(&#39;Train Test Set/train_svm.csv&#39;) test_svm &lt;- read.csv(&#39;Train Test Set/test_svm.csv&#39;) # Display statistics str(train_svm) ## &#39;data.frame&#39;: 10379 obs. of 27 variables: ## $ gender_female : int 1 1 1 0 1 1 1 0 1 1 ... ## $ gender_male : int 0 0 0 1 0 0 0 1 0 0 ... ## $ age : int 24 34 19 19 25 26 23 27 26 20 ... ## $ fam_history_overweight1 : int 1 1 1 1 1 1 1 1 1 0 ... ## $ freq_consumption_hc_food1 : int 1 1 1 1 1 1 0 1 1 0 ... ## $ veg_freq : num 3 2.1 3 3 3 ... ## $ num_meals : num 3 2.98 3 3 3 ... ## $ food_between_meals_frequently : int 0 0 0 0 0 0 0 0 0 1 ... ## $ food_between_meals_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ food_between_meals_sometimes : int 1 1 1 0 1 1 1 1 1 0 ... ## $ smoke1 : int 0 0 0 0 0 0 0 0 0 0 ... ## $ water_daily : num 2.47 1.96 2.87 3 2.86 ... ## $ caloric_beverages1 : int 0 0 0 1 0 0 0 0 0 0 ... ## $ activity_freq : num 0.167 0.988 1.465 3 0.265 ... ## $ tech_use : num 0.487 0 0.656 0 0.673 ... ## $ alcohol_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ alcohol_sometimes : int 1 1 1 1 1 1 1 1 1 1 ... ## $ transport_bike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_motorbike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_public_transportation: int 1 0 1 1 1 1 1 1 1 1 ... ## $ transport_walking : int 0 0 0 0 0 0 0 0 0 0 ... ## $ obesity_leveloverweight : int 1 1 1 1 1 1 1 1 1 0 ... ## $ eating_habit_binary : num 2.67 2.36 2.67 2.67 2.67 ... ## $ physical_activity_binary : num -0.32 0.988 0.809 3 -0.408 ... ## $ age_group_young_adult : int 1 1 1 1 1 1 1 1 1 1 ... ## $ age_group_adult : int 0 0 0 0 0 0 0 0 0 0 ... ## $ age_group_senior : int 0 0 0 0 0 0 0 0 0 0 ... summary(train_svm) ## gender_female gender_male age fam_history_overweight1 ## Min. :0.0000 Min. :0.0000 Min. :14.00 Min. :0.0000 ## 1st Qu.:0.0000 1st Qu.:0.0000 1st Qu.:20.00 1st Qu.:1.0000 ## Median :1.0000 Median :0.0000 Median :23.00 Median :1.0000 ## Mean :0.5079 Mean :0.4921 Mean :23.81 Mean :0.8177 ## 3rd Qu.:1.0000 3rd Qu.:1.0000 3rd Qu.:26.00 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.0000 Max. :61.00 Max. :1.0000 ## freq_consumption_hc_food1 veg_freq num_meals ## Min. :0.0000 Min. :1.000 Min. :1.000 ## 1st Qu.:1.0000 1st Qu.:2.000 1st Qu.:3.000 ## Median :1.0000 Median :2.445 Median :3.000 ## Mean :0.9166 Mean :2.452 Mean :2.758 ## 3rd Qu.:1.0000 3rd Qu.:3.000 3rd Qu.:3.000 ## Max. :1.0000 Max. :3.000 Max. :4.000 ## food_between_meals_frequently food_between_meals_never ## Min. :0.0000 Min. :0.00000 ## 1st Qu.:0.0000 1st Qu.:0.00000 ## Median :0.0000 Median :0.00000 ## Mean :0.1212 Mean :0.01253 ## 3rd Qu.:0.0000 3rd Qu.:0.00000 ## Max. :1.0000 Max. :1.00000 ## food_between_meals_sometimes smoke1 water_daily ## Min. :0.0000 Min. :0.00000 Min. :1.000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:1.796 ## Median :1.0000 Median :0.00000 Median :2.000 ## Mean :0.8446 Mean :0.01224 Mean :2.029 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:2.536 ## Max. :1.0000 Max. :1.00000 Max. :3.000 ## caloric_beverages1 activity_freq tech_use alcohol_never ## Min. :0.00000 Min. :0.00000 Min. :0.0000 Min. :0.0000 ## 1st Qu.:0.00000 1st Qu.:0.00705 1st Qu.:0.0000 1st Qu.:0.0000 ## Median :0.00000 Median :1.00000 Median :0.5740 Median :0.0000 ## Mean :0.03276 Mean :0.98097 Mean :0.6147 Mean :0.2461 ## 3rd Qu.:0.00000 3rd Qu.:1.58652 3rd Qu.:1.0000 3rd Qu.:0.0000 ## Max. :1.00000 Max. :3.00000 Max. :2.0000 Max. :1.0000 ## alcohol_sometimes transport_bike transport_motorbike ## Min. :0.0000 Min. :0.000000 Min. :0.000000 ## 1st Qu.:0.0000 1st Qu.:0.000000 1st Qu.:0.000000 ## Median :1.0000 Median :0.000000 Median :0.000000 ## Mean :0.7289 Mean :0.001734 Mean :0.001927 ## 3rd Qu.:1.0000 3rd Qu.:0.000000 3rd Qu.:0.000000 ## Max. :1.0000 Max. :1.000000 Max. :1.000000 ## transport_public_transportation transport_walking obesity_leveloverweight ## Min. :0.0000 Min. :0.00000 Min. :0.0000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:0.0000 ## Median :1.0000 Median :0.00000 Median :1.0000 ## Mean :0.8056 Mean :0.02226 Mean :0.7262 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.00000 Max. :1.0000 ## eating_habit_binary physical_activity_binary age_group_young_adult ## Min. :1.000 Min. :-2.0000 Min. :0.0000 ## 1st Qu.:2.309 1st Qu.:-0.2790 1st Qu.:1.0000 ## Median :2.333 Median : 0.2867 Median :1.0000 ## Mean :2.375 Mean : 0.3662 Mean :0.9019 ## 3rd Qu.:2.667 3rd Qu.: 1.0000 3rd Qu.:1.0000 ## Max. :3.000 Max. : 3.0000 Max. :1.0000 ## age_group_adult age_group_senior ## Min. :0.00000 Min. :0.000000 ## 1st Qu.:0.00000 1st Qu.:0.000000 ## Median :0.00000 Median :0.000000 ## Mean :0.05222 Mean :0.003276 ## 3rd Qu.:0.00000 3rd Qu.:0.000000 ## Max. :1.00000 Max. :1.000000 head(train_svm) ## gender_female gender_male age fam_history_overweight1 ## 1 1 0 24 1 ## 2 1 0 34 1 ## 3 1 0 19 1 ## 4 0 1 19 1 ## 5 1 0 25 1 ## 6 1 0 26 1 ## freq_consumption_hc_food1 veg_freq num_meals food_between_meals_frequently ## 1 1 3.000000 3.000000 0 ## 2 1 2.103335 2.977909 0 ## 3 1 3.000000 3.000000 0 ## 4 1 3.000000 3.000000 0 ## 5 1 3.000000 3.000000 0 ## 6 1 3.000000 3.000000 0 ## food_between_meals_never food_between_meals_sometimes smoke1 water_daily ## 1 0 1 0 2.472903 ## 2 0 1 0 1.964435 ## 3 0 1 0 2.865590 ## 4 0 0 0 3.000000 ## 5 0 1 0 2.863513 ## 6 0 1 0 1.347559 ## caloric_beverages1 activity_freq tech_use alcohol_never alcohol_sometimes ## 1 0 0.167086 0.486868 0 1 ## 2 0 0.987521 0.000000 0 1 ## 3 0 1.464674 0.655571 0 1 ## 4 1 3.000000 0.000000 0 1 ## 5 0 0.264831 0.673210 0 1 ## 6 0 0.217455 0.625350 0 1 ## transport_bike transport_motorbike transport_public_transportation ## 1 0 0 1 ## 2 0 0 0 ## 3 0 0 1 ## 4 0 0 1 ## 5 0 0 1 ## 6 0 0 1 ## transport_walking obesity_leveloverweight eating_habit_binary ## 1 0 1 2.666667 ## 2 0 1 2.360415 ## 3 0 1 2.666667 ## 4 0 1 2.666667 ## 5 0 1 2.666667 ## 6 0 1 2.666667 ## physical_activity_binary age_group_young_adult age_group_adult ## 1 -0.319782 1 0 ## 2 0.987521 1 0 ## 3 0.809103 1 0 ## 4 3.000000 1 0 ## 5 -0.408379 1 0 ## 6 -0.407895 1 0 ## age_group_senior ## 1 0 ## 2 0 ## 3 0 ## 4 0 ## 5 0 ## 6 0 7.3 Model SVM 7.3.1 Vanilla SVM # Build a vanilla model model_svm_vanilla &lt;- ksvm(obesity_leveloverweight ~ ., data = train_svm, kernel = &#39;vanilladot&#39;) # Display summary summary(model_svm_vanilla) ## Length Class Mode ## 1 ksvm S4 7.3.2 RBF SVM # Build a rbf model model_svm_rbf &lt;- ksvm(obesity_leveloverweight ~ ., data = train_svm, kernel = &#39;rbfdot&#39;) # Display summary summary(model_svm_rbf) ## Length Class Mode ## 1 ksvm S4 7.4 Evaluate SVM 7.4.1 Vanilla SVM # Make a prediction prediction_svm_vanilla_probability &lt;- predict(model_svm_vanilla, test_svm) prediction_svm_vanilla &lt;- ifelse(prediction_svm_vanilla_probability &gt;= 0.5, 1, 0) summary(prediction_svm_vanilla_probability) ## V1 ## Min. :-0.1661 ## 1st Qu.: 0.8623 ## Median : 0.9609 ## Mean : 0.7994 ## 3rd Qu.: 0.9936 ## Max. : 1.1457 # Perform confusion matrix cm_svm_vanilla &lt;- confusionMatrix(as.factor(prediction_svm_vanilla), as.factor(test_svm$obesity_leveloverweight), positive = &#39;1&#39;) cm_svm_vanilla ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 1329 523 ## 1 1434 7093 ## ## Accuracy : 0.8114 ## 95% CI : (0.8038, 0.8189) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.4607 ## ## Mcnemar&#39;s Test P-Value : &lt; 2.2e-16 ## ## Sensitivity : 0.9313 ## Specificity : 0.4810 ## Pos Pred Value : 0.8318 ## Neg Pred Value : 0.7176 ## Prevalence : 0.7338 ## Detection Rate : 0.6834 ## Detection Prevalence : 0.8216 ## Balanced Accuracy : 0.7062 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.8114, sensitivity of 0.9313, and a Kappa coefficient of 0.4607. We will assess these results towards the conclusion of the assignment when we have completed stacked models. pred &lt;- ROCR::prediction(prediction_svm_vanilla_probability, test_svm$obesity_leveloverweight) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;Vanilla SVM ROC Curve w/ AUC=&quot;, auc)) + theme_bw() 7.4.2 RBF SVM # Make a prediction prediction_svm_rbf_probability &lt;- predict(model_svm_rbf, test_svm) prediction_svm_rbf &lt;- ifelse(prediction_svm_rbf_probability &gt;= 0.5, 1, 0) # Perform confusion matrix cm_svm_rbf &lt;- confusionMatrix(as.factor(prediction_svm_rbf), as.factor(test_svm$obesity_leveloverweight), positive = &#39;1&#39;) cm_svm_rbf ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 1902 537 ## 1 861 7079 ## ## Accuracy : 0.8653 ## 95% CI : (0.8586, 0.8718) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.6419 ## ## Mcnemar&#39;s Test P-Value : &lt; 2.2e-16 ## ## Sensitivity : 0.9295 ## Specificity : 0.6884 ## Pos Pred Value : 0.8916 ## Neg Pred Value : 0.7798 ## Prevalence : 0.7338 ## Detection Rate : 0.6821 ## Detection Prevalence : 0.7650 ## Balanced Accuracy : 0.8089 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.8653, sensitivity of 0.9295, and a Kappa coefficient of 0.6419. We will assess these results towards the conclusion of the assignment when we have completed stacked models. pred &lt;- ROCR::prediction(prediction_svm_rbf_probability, test_svm$obesity_leveloverweight) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;RBF SVM ROC Curve w/ AUC=&quot;, auc)) + theme_bw() "],["random-forest-rf.html", "8 Random Forest (RF) R Packages and Setup 8.1 Introduction 8.2 Load Data 8.3 Model RF 8.4 Evaluate RF", " 8 Random Forest (RF) R Packages and Setup 8.1 Introduction Below paragraph is copied from the assignment, we are planning on updating this as we formulate our narrative for the final deliverable: Random Forest (RF) is an ensemble learning method, combining multiple decision trees to reduce overfitting and handle complex relationships. RF constructs numerous decision trees during training, with each tree casting a vote on predictions. The final prediction is derived from the majority vote of all individual trees, minimizing overfitting and enhancing accuracy (Majority Vote System). Although an advanced form of DT, RF can be computationally expensive due to longer training times compared to simpler models. We will build two RF models: a basic and fine-tuned version. 8.2 Load Data # Load data train_rf &lt;- read.csv(&#39;Train Test Set/train_rf.csv&#39;) test_rf &lt;- read.csv(&#39;Train Test Set/test_rf.csv&#39;) # Display statistics str(train_rf) ## &#39;data.frame&#39;: 10379 obs. of 27 variables: ## $ gender_female : int 1 1 1 0 1 1 1 0 1 1 ... ## $ gender_male : int 0 0 0 1 0 0 0 1 0 0 ... ## $ age : int 24 34 19 19 25 26 23 27 26 20 ... ## $ fam_history_overweight1 : int 1 1 1 1 1 1 1 1 1 0 ... ## $ freq_consumption_hc_food1 : int 1 1 1 1 1 1 0 1 1 0 ... ## $ veg_freq : num 3 2.1 3 3 3 ... ## $ num_meals : num 3 2.98 3 3 3 ... ## $ food_between_meals_frequently : int 0 0 0 0 0 0 0 0 0 1 ... ## $ food_between_meals_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ food_between_meals_sometimes : int 1 1 1 0 1 1 1 1 1 0 ... ## $ smoke1 : int 0 0 0 0 0 0 0 0 0 0 ... ## $ water_daily : num 2.47 1.96 2.87 3 2.86 ... ## $ caloric_beverages1 : int 0 0 0 1 0 0 0 0 0 0 ... ## $ activity_freq : num 0.167 0.988 1.465 3 0.265 ... ## $ tech_use : num 0.487 0 0.656 0 0.673 ... ## $ alcohol_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ alcohol_sometimes : int 1 1 1 1 1 1 1 1 1 1 ... ## $ transport_bike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_motorbike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_public_transportation: int 1 0 1 1 1 1 1 1 1 1 ... ## $ transport_walking : int 0 0 0 0 0 0 0 0 0 0 ... ## $ obesity_leveloverweight : int 1 1 1 1 1 1 1 1 1 0 ... ## $ eating_habit_binary : num 2.67 2.36 2.67 2.67 2.67 ... ## $ physical_activity_binary : num -0.32 0.988 0.809 3 -0.408 ... ## $ age_group_young_adult : int 1 1 1 1 1 1 1 1 1 1 ... ## $ age_group_adult : int 0 0 0 0 0 0 0 0 0 0 ... ## $ age_group_senior : int 0 0 0 0 0 0 0 0 0 0 ... summary(train_rf) ## gender_female gender_male age fam_history_overweight1 ## Min. :0.0000 Min. :0.0000 Min. :14.00 Min. :0.0000 ## 1st Qu.:0.0000 1st Qu.:0.0000 1st Qu.:20.00 1st Qu.:1.0000 ## Median :1.0000 Median :0.0000 Median :23.00 Median :1.0000 ## Mean :0.5079 Mean :0.4921 Mean :23.81 Mean :0.8177 ## 3rd Qu.:1.0000 3rd Qu.:1.0000 3rd Qu.:26.00 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.0000 Max. :61.00 Max. :1.0000 ## freq_consumption_hc_food1 veg_freq num_meals ## Min. :0.0000 Min. :1.000 Min. :1.000 ## 1st Qu.:1.0000 1st Qu.:2.000 1st Qu.:3.000 ## Median :1.0000 Median :2.445 Median :3.000 ## Mean :0.9166 Mean :2.452 Mean :2.758 ## 3rd Qu.:1.0000 3rd Qu.:3.000 3rd Qu.:3.000 ## Max. :1.0000 Max. :3.000 Max. :4.000 ## food_between_meals_frequently food_between_meals_never ## Min. :0.0000 Min. :0.00000 ## 1st Qu.:0.0000 1st Qu.:0.00000 ## Median :0.0000 Median :0.00000 ## Mean :0.1212 Mean :0.01253 ## 3rd Qu.:0.0000 3rd Qu.:0.00000 ## Max. :1.0000 Max. :1.00000 ## food_between_meals_sometimes smoke1 water_daily ## Min. :0.0000 Min. :0.00000 Min. :1.000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:1.796 ## Median :1.0000 Median :0.00000 Median :2.000 ## Mean :0.8446 Mean :0.01224 Mean :2.029 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:2.536 ## Max. :1.0000 Max. :1.00000 Max. :3.000 ## caloric_beverages1 activity_freq tech_use alcohol_never ## Min. :0.00000 Min. :0.00000 Min. :0.0000 Min. :0.0000 ## 1st Qu.:0.00000 1st Qu.:0.00705 1st Qu.:0.0000 1st Qu.:0.0000 ## Median :0.00000 Median :1.00000 Median :0.5740 Median :0.0000 ## Mean :0.03276 Mean :0.98097 Mean :0.6147 Mean :0.2461 ## 3rd Qu.:0.00000 3rd Qu.:1.58652 3rd Qu.:1.0000 3rd Qu.:0.0000 ## Max. :1.00000 Max. :3.00000 Max. :2.0000 Max. :1.0000 ## alcohol_sometimes transport_bike transport_motorbike ## Min. :0.0000 Min. :0.000000 Min. :0.000000 ## 1st Qu.:0.0000 1st Qu.:0.000000 1st Qu.:0.000000 ## Median :1.0000 Median :0.000000 Median :0.000000 ## Mean :0.7289 Mean :0.001734 Mean :0.001927 ## 3rd Qu.:1.0000 3rd Qu.:0.000000 3rd Qu.:0.000000 ## Max. :1.0000 Max. :1.000000 Max. :1.000000 ## transport_public_transportation transport_walking obesity_leveloverweight ## Min. :0.0000 Min. :0.00000 Min. :0.0000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:0.0000 ## Median :1.0000 Median :0.00000 Median :1.0000 ## Mean :0.8056 Mean :0.02226 Mean :0.7262 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.00000 Max. :1.0000 ## eating_habit_binary physical_activity_binary age_group_young_adult ## Min. :1.000 Min. :-2.0000 Min. :0.0000 ## 1st Qu.:2.309 1st Qu.:-0.2790 1st Qu.:1.0000 ## Median :2.333 Median : 0.2867 Median :1.0000 ## Mean :2.375 Mean : 0.3662 Mean :0.9019 ## 3rd Qu.:2.667 3rd Qu.: 1.0000 3rd Qu.:1.0000 ## Max. :3.000 Max. : 3.0000 Max. :1.0000 ## age_group_adult age_group_senior ## Min. :0.00000 Min. :0.000000 ## 1st Qu.:0.00000 1st Qu.:0.000000 ## Median :0.00000 Median :0.000000 ## Mean :0.05222 Mean :0.003276 ## 3rd Qu.:0.00000 3rd Qu.:0.000000 ## Max. :1.00000 Max. :1.000000 head(train_rf) ## gender_female gender_male age fam_history_overweight1 ## 1 1 0 24 1 ## 2 1 0 34 1 ## 3 1 0 19 1 ## 4 0 1 19 1 ## 5 1 0 25 1 ## 6 1 0 26 1 ## freq_consumption_hc_food1 veg_freq num_meals food_between_meals_frequently ## 1 1 3.000000 3.000000 0 ## 2 1 2.103335 2.977909 0 ## 3 1 3.000000 3.000000 0 ## 4 1 3.000000 3.000000 0 ## 5 1 3.000000 3.000000 0 ## 6 1 3.000000 3.000000 0 ## food_between_meals_never food_between_meals_sometimes smoke1 water_daily ## 1 0 1 0 2.472903 ## 2 0 1 0 1.964435 ## 3 0 1 0 2.865590 ## 4 0 0 0 3.000000 ## 5 0 1 0 2.863513 ## 6 0 1 0 1.347559 ## caloric_beverages1 activity_freq tech_use alcohol_never alcohol_sometimes ## 1 0 0.167086 0.486868 0 1 ## 2 0 0.987521 0.000000 0 1 ## 3 0 1.464674 0.655571 0 1 ## 4 1 3.000000 0.000000 0 1 ## 5 0 0.264831 0.673210 0 1 ## 6 0 0.217455 0.625350 0 1 ## transport_bike transport_motorbike transport_public_transportation ## 1 0 0 1 ## 2 0 0 0 ## 3 0 0 1 ## 4 0 0 1 ## 5 0 0 1 ## 6 0 0 1 ## transport_walking obesity_leveloverweight eating_habit_binary ## 1 0 1 2.666667 ## 2 0 1 2.360415 ## 3 0 1 2.666667 ## 4 0 1 2.666667 ## 5 0 1 2.666667 ## 6 0 1 2.666667 ## physical_activity_binary age_group_young_adult age_group_adult ## 1 -0.319782 1 0 ## 2 0.987521 1 0 ## 3 0.809103 1 0 ## 4 3.000000 1 0 ## 5 -0.408379 1 0 ## 6 -0.407895 1 0 ## age_group_senior ## 1 0 ## 2 0 ## 3 0 ## 4 0 ## 5 0 ## 6 0 8.3 Model RF 8.3.1 Simple RF We will begin by constructing a basic RF model with 500 trees, followed by fine-tuning our RF model through grid search. # Set seed for reproducibility set.seed(12345) # Build a model model_rf &lt;- randomForest(as.factor(obesity_leveloverweight) ~ ., data = train_rf, ntree = 500) # Display summary summary(model_rf) ## Length Class Mode ## call 4 -none- call ## type 1 -none- character ## predicted 10379 factor numeric ## err.rate 1500 -none- numeric ## confusion 6 -none- numeric ## votes 20758 matrix numeric ## oob.times 10379 -none- numeric ## classes 2 -none- character ## importance 26 -none- numeric ## importanceSD 0 -none- NULL ## localImportance 0 -none- NULL ## proximity 0 -none- NULL ## ntree 1 -none- numeric ## mtry 1 -none- numeric ## forest 14 -none- list ## y 10379 factor numeric ## test 0 -none- NULL ## inbag 0 -none- NULL ## terms 3 terms call randomForest::varImpPlot(model_rf) According to the variable importance plot, we observe a trend comparable to that of a DT model with an implemented cost matrix, indicating that RF models may be capturing the underlying dynamics between predictors effectively. The top-ranked features in this analysis are BMI, weight-to-height ratio, and water intake per weight. 8.3.2 Tuned RF Next, we will perform tuning for our model by testing different values of mtry, which specifies the number of candidate features to consider at each node during tree construction. We will also execute 10-fold cross validation. # Set seed for reproducibility set.seed(12345) # Set up control parameters ctrl &lt;- trainControl(method = &#39;cv&#39;, number = 10, verboseIter = TRUE, savePredictions = TRUE) # Define the parameter grid grid &lt;- expand.grid(mtry = c(2, 4, 6, 8)) # Tune the model rf_tuned &lt;- train(as.factor(obesity_leveloverweight) ~ ., data = train_rf, method = &#39;rf&#39;, trControl = ctrl, tuneGrid = grid) # Retrieve best model model_rf_tuned &lt;- rf_tuned$finalModel # Display summary print(rf_tuned) ## Random Forest ## ## 10379 samples ## 26 predictor ## 2 classes: &#39;0&#39;, &#39;1&#39; ## ## No pre-processing ## Resampling: Cross-Validated (10 fold) ## Summary of sample sizes: 9340, 9341, 9341, 9341, 9341, 9342, ... ## Resampling results across tuning parameters: ## ## mtry Accuracy Kappa ## 2 0.8808175 0.6893266 ## 4 0.8907405 0.7259605 ## 6 0.8925709 0.7309532 ## 8 0.8882357 0.7200674 ## ## Accuracy was used to select the optimal model using the largest value. ## The final value used for the model was mtry = 6. summary(model_rf_tuned) ## Length Class Mode ## call 4 -none- call ## type 1 -none- character ## predicted 10379 factor numeric ## err.rate 1500 -none- numeric ## confusion 6 -none- numeric ## votes 20758 matrix numeric ## oob.times 10379 -none- numeric ## classes 2 -none- character ## importance 26 -none- numeric ## importanceSD 0 -none- NULL ## localImportance 0 -none- NULL ## proximity 0 -none- NULL ## ntree 1 -none- numeric ## mtry 1 -none- numeric ## forest 14 -none- list ## y 10379 factor numeric ## test 0 -none- NULL ## inbag 0 -none- NULL ## xNames 26 -none- character ## problemType 1 -none- character ## tuneValue 1 data.frame list ## obsLevels 2 -none- character ## param 0 -none- list randomForest::varImpPlot(model_rf_tuned) The final selected value for our model was mtry = 2, as it presented the highest Kappa score without compromising overall accuracy. 8.4 Evaluate RF 8.4.1 Simple RF # Make a prediction prediction_rf &lt;- predict(model_rf, test_rf) prediction_rf_prob &lt;- predict(model_rf, test_rf, type = &#39;prob&#39;) summary(prediction_rf) ## 0 1 ## 2748 7631 # Perform confusion matrix cm_rf &lt;- confusionMatrix(as.factor(prediction_rf), as.factor(test_rf$obesity_leveloverweight), positive = &#39;1&#39;) cm_rf ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 2183 565 ## 1 580 7051 ## ## Accuracy : 0.8897 ## 95% CI : (0.8835, 0.8956) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt;2e-16 ## ## Kappa : 0.7171 ## ## Mcnemar&#39;s Test P-Value : 0.6791 ## ## Sensitivity : 0.9258 ## Specificity : 0.7901 ## Pos Pred Value : 0.9240 ## Neg Pred Value : 0.7944 ## Prevalence : 0.7338 ## Detection Rate : 0.6794 ## Detection Prevalence : 0.7352 ## Balanced Accuracy : 0.8579 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.8897, sensitivity of 0.9258, and a Kappa coefficient of 0.7171. We will assess these results towards the conclusion of the assignment when we have completed stacked models. pred &lt;- ROCR::prediction(prediction_rf_prob[,2], test_rf$obesity_leveloverweight) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;Simple Random Forest ROC Curve w/ AUC=&quot;, auc)) + theme_bw() 8.4.2 Tuned RF # Make a prediction prediction_rf_tuned &lt;- predict(model_rf_tuned, test_rf) prediction_rf_tuned_prob &lt;- predict(model_rf_tuned, test_rf, type = &#39;prob&#39;) summary(prediction_rf_tuned) ## 0 1 ## 2773 7606 # Perform confusion matrix cm_rf_tuned &lt;- confusionMatrix(as.factor(prediction_rf_tuned), as.factor(test_rf$obesity_leveloverweight), positive = &#39;1&#39;) cm_rf_tuned ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 2190 583 ## 1 573 7033 ## ## Accuracy : 0.8886 ## 95% CI : (0.8824, 0.8946) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt;2e-16 ## ## Kappa : 0.7152 ## ## Mcnemar&#39;s Test P-Value : 0.7912 ## ## Sensitivity : 0.9235 ## Specificity : 0.7926 ## Pos Pred Value : 0.9247 ## Neg Pred Value : 0.7898 ## Prevalence : 0.7338 ## Detection Rate : 0.6776 ## Detection Prevalence : 0.7328 ## Balanced Accuracy : 0.8580 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.8886, sensitivity of 0.9235, and a Kappa coefficient of 0.7152. We will assess these results towards the conclusion of the assignment when we have completed stacked models. pred &lt;- ROCR::prediction(prediction_rf_tuned_prob[,2], test_rf$obesity_leveloverweight) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;Tuned Random Forest ROC Curve w/ AUC=&quot;, auc)) + theme_bw() "],["xgboost-xgb.html", "9 XGBoost (XGB) 9.1 Introduction 9.2 Load Data 9.3 Model XGB 9.4 Evaluate XGB", " 9 XGBoost (XGB) 9.1 Introduction Placeholder. 9.2 Load Data # Load data train_xgb &lt;- read.csv(&#39;Train Test Set/train_xgb.csv&#39;) test_xgb &lt;- read.csv(&#39;Train Test Set/test_xgb.csv&#39;) train_xgb_x &lt;- train_xgb[, !names(train_xgb) %in% &#39;obesity_leveloverweight&#39;] train_xgb_y &lt;- train_xgb[[&#39;obesity_leveloverweight&#39;]] test_xgb_x &lt;- test_xgb[, !names(test_xgb) %in% &#39;obesity_leveloverweight&#39;] test_xgb_y &lt;- test_xgb[[&#39;obesity_leveloverweight&#39;]] # Display statistics str(train_xgb) ## &#39;data.frame&#39;: 10379 obs. of 27 variables: ## $ gender_female : int 1 1 1 0 1 1 1 0 1 1 ... ## $ gender_male : int 0 0 0 1 0 0 0 1 0 0 ... ## $ age : int 24 34 19 19 25 26 23 27 26 20 ... ## $ fam_history_overweight1 : int 1 1 1 1 1 1 1 1 1 0 ... ## $ freq_consumption_hc_food1 : int 1 1 1 1 1 1 0 1 1 0 ... ## $ veg_freq : num 3 2.1 3 3 3 ... ## $ num_meals : num 3 2.98 3 3 3 ... ## $ food_between_meals_frequently : int 0 0 0 0 0 0 0 0 0 1 ... ## $ food_between_meals_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ food_between_meals_sometimes : int 1 1 1 0 1 1 1 1 1 0 ... ## $ smoke1 : int 0 0 0 0 0 0 0 0 0 0 ... ## $ water_daily : num 2.47 1.96 2.87 3 2.86 ... ## $ caloric_beverages1 : int 0 0 0 1 0 0 0 0 0 0 ... ## $ activity_freq : num 0.167 0.988 1.465 3 0.265 ... ## $ tech_use : num 0.487 0 0.656 0 0.673 ... ## $ alcohol_never : int 0 0 0 0 0 0 0 0 0 0 ... ## $ alcohol_sometimes : int 1 1 1 1 1 1 1 1 1 1 ... ## $ transport_bike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_motorbike : int 0 0 0 0 0 0 0 0 0 0 ... ## $ transport_public_transportation: int 1 0 1 1 1 1 1 1 1 1 ... ## $ transport_walking : int 0 0 0 0 0 0 0 0 0 0 ... ## $ obesity_leveloverweight : int 1 1 1 1 1 1 1 1 1 0 ... ## $ eating_habit_binary : num 2.67 2.36 2.67 2.67 2.67 ... ## $ physical_activity_binary : num -0.32 0.988 0.809 3 -0.408 ... ## $ age_group_young_adult : int 1 1 1 1 1 1 1 1 1 1 ... ## $ age_group_adult : int 0 0 0 0 0 0 0 0 0 0 ... ## $ age_group_senior : int 0 0 0 0 0 0 0 0 0 0 ... summary(train_xgb) ## gender_female gender_male age fam_history_overweight1 ## Min. :0.0000 Min. :0.0000 Min. :14.00 Min. :0.0000 ## 1st Qu.:0.0000 1st Qu.:0.0000 1st Qu.:20.00 1st Qu.:1.0000 ## Median :1.0000 Median :0.0000 Median :23.00 Median :1.0000 ## Mean :0.5079 Mean :0.4921 Mean :23.81 Mean :0.8177 ## 3rd Qu.:1.0000 3rd Qu.:1.0000 3rd Qu.:26.00 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.0000 Max. :61.00 Max. :1.0000 ## freq_consumption_hc_food1 veg_freq num_meals ## Min. :0.0000 Min. :1.000 Min. :1.000 ## 1st Qu.:1.0000 1st Qu.:2.000 1st Qu.:3.000 ## Median :1.0000 Median :2.445 Median :3.000 ## Mean :0.9166 Mean :2.452 Mean :2.758 ## 3rd Qu.:1.0000 3rd Qu.:3.000 3rd Qu.:3.000 ## Max. :1.0000 Max. :3.000 Max. :4.000 ## food_between_meals_frequently food_between_meals_never ## Min. :0.0000 Min. :0.00000 ## 1st Qu.:0.0000 1st Qu.:0.00000 ## Median :0.0000 Median :0.00000 ## Mean :0.1212 Mean :0.01253 ## 3rd Qu.:0.0000 3rd Qu.:0.00000 ## Max. :1.0000 Max. :1.00000 ## food_between_meals_sometimes smoke1 water_daily ## Min. :0.0000 Min. :0.00000 Min. :1.000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:1.796 ## Median :1.0000 Median :0.00000 Median :2.000 ## Mean :0.8446 Mean :0.01224 Mean :2.029 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:2.536 ## Max. :1.0000 Max. :1.00000 Max. :3.000 ## caloric_beverages1 activity_freq tech_use alcohol_never ## Min. :0.00000 Min. :0.00000 Min. :0.0000 Min. :0.0000 ## 1st Qu.:0.00000 1st Qu.:0.00705 1st Qu.:0.0000 1st Qu.:0.0000 ## Median :0.00000 Median :1.00000 Median :0.5740 Median :0.0000 ## Mean :0.03276 Mean :0.98097 Mean :0.6147 Mean :0.2461 ## 3rd Qu.:0.00000 3rd Qu.:1.58652 3rd Qu.:1.0000 3rd Qu.:0.0000 ## Max. :1.00000 Max. :3.00000 Max. :2.0000 Max. :1.0000 ## alcohol_sometimes transport_bike transport_motorbike ## Min. :0.0000 Min. :0.000000 Min. :0.000000 ## 1st Qu.:0.0000 1st Qu.:0.000000 1st Qu.:0.000000 ## Median :1.0000 Median :0.000000 Median :0.000000 ## Mean :0.7289 Mean :0.001734 Mean :0.001927 ## 3rd Qu.:1.0000 3rd Qu.:0.000000 3rd Qu.:0.000000 ## Max. :1.0000 Max. :1.000000 Max. :1.000000 ## transport_public_transportation transport_walking obesity_leveloverweight ## Min. :0.0000 Min. :0.00000 Min. :0.0000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:0.0000 ## Median :1.0000 Median :0.00000 Median :1.0000 ## Mean :0.8056 Mean :0.02226 Mean :0.7262 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.00000 Max. :1.0000 ## eating_habit_binary physical_activity_binary age_group_young_adult ## Min. :1.000 Min. :-2.0000 Min. :0.0000 ## 1st Qu.:2.309 1st Qu.:-0.2790 1st Qu.:1.0000 ## Median :2.333 Median : 0.2867 Median :1.0000 ## Mean :2.375 Mean : 0.3662 Mean :0.9019 ## 3rd Qu.:2.667 3rd Qu.: 1.0000 3rd Qu.:1.0000 ## Max. :3.000 Max. : 3.0000 Max. :1.0000 ## age_group_adult age_group_senior ## Min. :0.00000 Min. :0.000000 ## 1st Qu.:0.00000 1st Qu.:0.000000 ## Median :0.00000 Median :0.000000 ## Mean :0.05222 Mean :0.003276 ## 3rd Qu.:0.00000 3rd Qu.:0.000000 ## Max. :1.00000 Max. :1.000000 head(train_xgb) ## gender_female gender_male age fam_history_overweight1 ## 1 1 0 24 1 ## 2 1 0 34 1 ## 3 1 0 19 1 ## 4 0 1 19 1 ## 5 1 0 25 1 ## 6 1 0 26 1 ## freq_consumption_hc_food1 veg_freq num_meals food_between_meals_frequently ## 1 1 3.000000 3.000000 0 ## 2 1 2.103335 2.977909 0 ## 3 1 3.000000 3.000000 0 ## 4 1 3.000000 3.000000 0 ## 5 1 3.000000 3.000000 0 ## 6 1 3.000000 3.000000 0 ## food_between_meals_never food_between_meals_sometimes smoke1 water_daily ## 1 0 1 0 2.472903 ## 2 0 1 0 1.964435 ## 3 0 1 0 2.865590 ## 4 0 0 0 3.000000 ## 5 0 1 0 2.863513 ## 6 0 1 0 1.347559 ## caloric_beverages1 activity_freq tech_use alcohol_never alcohol_sometimes ## 1 0 0.167086 0.486868 0 1 ## 2 0 0.987521 0.000000 0 1 ## 3 0 1.464674 0.655571 0 1 ## 4 1 3.000000 0.000000 0 1 ## 5 0 0.264831 0.673210 0 1 ## 6 0 0.217455 0.625350 0 1 ## transport_bike transport_motorbike transport_public_transportation ## 1 0 0 1 ## 2 0 0 0 ## 3 0 0 1 ## 4 0 0 1 ## 5 0 0 1 ## 6 0 0 1 ## transport_walking obesity_leveloverweight eating_habit_binary ## 1 0 1 2.666667 ## 2 0 1 2.360415 ## 3 0 1 2.666667 ## 4 0 1 2.666667 ## 5 0 1 2.666667 ## 6 0 1 2.666667 ## physical_activity_binary age_group_young_adult age_group_adult ## 1 -0.319782 1 0 ## 2 0.987521 1 0 ## 3 0.809103 1 0 ## 4 3.000000 1 0 ## 5 -0.408379 1 0 ## 6 -0.407895 1 0 ## age_group_senior ## 1 0 ## 2 0 ## 3 0 ## 4 0 ## 5 0 ## 6 0 9.3 Model XGB 9.3.1 Simple XGB # Set seed for reproducibility set.seed(12345) # Build a model model_xgb &lt;- xgboost( data = as.matrix(train_xgb_x), label = train_xgb_y, nrounds = 10, objective = &#39;binary:logistic&#39; ) # Display summary summary(model_xgb) ## Length Class Mode ## handle 1 xgb.Booster.handle externalptr ## raw 45397 -none- raw ## niter 1 -none- numeric ## evaluation_log 2 data.table list ## call 14 -none- call ## params 2 -none- list ## callbacks 2 -none- list ## feature_names 26 -none- character ## nfeatures 1 -none- numeric 9.3.2 Tuned XGB # Set seed for reproducibility set.seed(12345) # Set up control parameters ctrl &lt;- trainControl( method = &#39;cv&#39;, number = 10, verboseIter = TRUE ) # Define the parameter grid grid &lt;- expand.grid( nrounds = c(100, 250, 500), max_depth = c(3, 6, 9), eta = c(0.01, 0.1, 0.3), gamma = 0, colsample_bytree = 1, min_child_weight=1, subsample=1 ) # Tune the model xgb_tuned &lt;- train( x = as.matrix(train_xgb_x), y = as.factor(train_xgb_y), method = &#39;xgbTree&#39;, trControl = ctrl, tuneGrid = grid ) # Retrieve best model model_xgb_tuned &lt;- xgb_tuned$finalModel # Display summary print(xgb_tuned) ## eXtreme Gradient Boosting ## ## 10379 samples ## 26 predictor ## 2 classes: &#39;0&#39;, &#39;1&#39; ## ## No pre-processing ## Resampling: Cross-Validated (10 fold) ## Summary of sample sizes: 9340, 9341, 9341, 9341, 9341, 9342, ... ## Resampling results across tuning parameters: ## ## eta max_depth nrounds Accuracy Kappa ## 0.01 3 100 0.8582716 0.6212264 ## 0.01 3 250 0.8732044 0.6702596 ## 0.01 3 500 0.8791770 0.6906437 ## 0.01 6 100 0.8793702 0.6903753 ## 0.01 6 250 0.8841874 0.7043753 ## 0.01 6 500 0.8918951 0.7281252 ## 0.01 9 100 0.8830331 0.7033199 ## 0.01 9 250 0.8865016 0.7133600 ## 0.01 9 500 0.8901627 0.7241590 ## 0.10 3 100 0.8868853 0.7137084 ## 0.10 3 250 0.8907388 0.7245800 ## 0.10 3 500 0.8895836 0.7218751 ## 0.10 6 100 0.8935340 0.7327224 ## 0.10 6 250 0.8932451 0.7322391 ## 0.10 6 500 0.8892951 0.7227740 ## 0.10 9 100 0.8917039 0.7287168 ## 0.10 9 250 0.8867900 0.7156515 ## 0.10 9 500 0.8840919 0.7091133 ## 0.30 3 100 0.8908350 0.7240474 ## 0.30 3 250 0.8915106 0.7268474 ## 0.30 3 500 0.8915110 0.7267655 ## 0.30 6 100 0.8930530 0.7322671 ## 0.30 6 250 0.8866936 0.7158573 ## 0.30 6 500 0.8834179 0.7072085 ## 0.30 9 100 0.8862123 0.7142853 ## 0.30 9 250 0.8822621 0.7038175 ## 0.30 9 500 0.8786002 0.6938026 ## ## Tuning parameter &#39;gamma&#39; was held constant at a value of 0 ## Tuning ## ## Tuning parameter &#39;min_child_weight&#39; was held constant at a value of 1 ## ## Tuning parameter &#39;subsample&#39; was held constant at a value of 1 ## Accuracy was used to select the optimal model using the largest value. ## The final values used for the model were nrounds = 100, max_depth = 6, eta ## = 0.1, gamma = 0, colsample_bytree = 1, min_child_weight = 1 and subsample = 1. summary(model_xgb_tuned) ## Length Class Mode ## handle 1 xgb.Booster.handle externalptr ## raw 335280 -none- raw ## niter 1 -none- numeric ## call 5 -none- call ## params 8 -none- list ## callbacks 1 -none- list ## feature_names 26 -none- character ## nfeatures 1 -none- numeric ## xNames 26 -none- character ## problemType 1 -none- character ## tuneValue 7 data.frame list ## obsLevels 2 -none- character ## param 0 -none- list 9.4 Evaluate XGB 9.4.1 Simple XGB # Make a prediction prediction_xgb_probability &lt;- predict(model_xgb, as.matrix(test_xgb_x)) prediction_xgb &lt;- ifelse(prediction_xgb_probability &gt; 0.5, 1, 0) summary(prediction_xgb_probability) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.03182 0.46929 0.91454 0.72143 0.96696 0.97641 # Perform confusion matrix cm_xgb &lt;- confusionMatrix( as.factor(prediction_xgb), as.factor(test_xgb_y), positive = &#39;1&#39; ) cm_xgb ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 2128 559 ## 1 635 7057 ## ## Accuracy : 0.885 ## 95% CI : (0.8787, 0.891) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt; 2e-16 ## ## Kappa : 0.7029 ## ## Mcnemar&#39;s Test P-Value : 0.02997 ## ## Sensitivity : 0.9266 ## Specificity : 0.7702 ## Pos Pred Value : 0.9174 ## Neg Pred Value : 0.7920 ## Prevalence : 0.7338 ## Detection Rate : 0.6799 ## Detection Prevalence : 0.7411 ## Balanced Accuracy : 0.8484 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.885, sensitivity of 0.9266, and a Kappa coefficient of 0.7029. We will assess these results towards the conclusion of the assignment when we have completed stacked models. # Plot AUC pred &lt;- ROCR::prediction(prediction_xgb_probability, test_xgb_y) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;Simple XG-Boost ROC Curve w/ AUC=&quot;, auc)) + theme_bw() 9.4.2 Tuned XGB # Make a prediction prediction_xgb_tuned_probability &lt;- predict(model_xgb_tuned, as.matrix(test_xgb_x)) prediction_xgb_tuned &lt;- ifelse(prediction_xgb_tuned_probability &gt; 0.5, 0, 1) summary(prediction_xgb_tuned_probability) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0002856 0.0034169 0.0383439 0.2662891 0.5447414 0.9967414 # Perform confusion matrix cm_xgb_tuned &lt;- confusionMatrix( as.factor(prediction_xgb_tuned), as.factor(test_xgb_y), positive = &#39;1&#39; ) cm_xgb_tuned ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 2204 552 ## 1 559 7064 ## ## Accuracy : 0.893 ## 95% CI : (0.8869, 0.8988) ## No Information Rate : 0.7338 ## P-Value [Acc &gt; NIR] : &lt;2e-16 ## ## Kappa : 0.7258 ## ## Mcnemar&#39;s Test P-Value : 0.8571 ## ## Sensitivity : 0.9275 ## Specificity : 0.7977 ## Pos Pred Value : 0.9267 ## Neg Pred Value : 0.7997 ## Prevalence : 0.7338 ## Detection Rate : 0.6806 ## Detection Prevalence : 0.7345 ## Balanced Accuracy : 0.8626 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.893, sensitivity of 0.9275, and a Kappa coefficient of 0.7258. We will assess these results towards the conclusion of the assignment when we have completed stacked models. # Plot AUC pred &lt;- ROCR::prediction(prediction_xgb_tuned_probability, 1-test_xgb_y) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;Tuned XG-Boost ROC Curve w/ AUC=&quot;, auc)) + theme_bw() "],["stacked-model-with-decision-tree-sm.html", "10 Stacked Model with Decision Tree (SM) R Packages and Setup 10.1 Introduction 10.2 Load Data 10.3 Split Data 10.4 Define Cost Matrix 10.5 Model SM 10.6 Evaluate SM 10.7 Model Evaluations", " 10 Stacked Model with Decision Tree (SM) R Packages and Setup 10.1 Introduction After completing all assigned model builds, we will construct a two-stage stacked ensemble. In the initial stage, we will employ solely the fundamental L1 models as base learners. In the subsequent stage, we will integrate all complex L1 models like the advanced LR and fine-tuned RF into the base learner set. Our primary objective is to maximize the predictive precision of the base models provided by L1 models through a multi-level stacked ensemble approach. 10.2 Load Data # Load data test &lt;- read.csv(&#39;Train Test Set/test.csv&#39;) lr &lt;- read.csv(&#39;Predictions/prediction_lr_probability.csv&#39;) lr_complex &lt;- read.csv(&#39;Predictions/prediction_lr_complex_probability.csv&#39;) knn &lt;- read.csv(&#39;Predictions/prediction_knn_probability.csv&#39;) knn_tuned &lt;- read.csv(&#39;Predictions/prediction_knn_tuned_probability.csv&#39;) ann &lt;- read.csv(&#39;Predictions/prediction_ann_probability.csv&#39;) ann_complex &lt;- read.csv(&#39;Predictions/prediction_ann_complex_probability.csv&#39;) dt &lt;- read.csv(&#39;Predictions/prediction_dt.csv&#39;) dt_cost &lt;- read.csv(&#39;Predictions/prediction_dt_cost.csv&#39;) svm_vanilla &lt;- read.csv(&#39;Predictions/prediction_svm_vanilla.csv&#39;) svm_rbf &lt;- read.csv(&#39;Predictions/prediction_svm_rbf.csv&#39;) rf &lt;- read.csv(&#39;Predictions/prediction_rf.csv&#39;) rf_tuned &lt;-read.csv(&#39;Predictions/prediction_rf_tuned.csv&#39;) xgb &lt;- read.csv(&#39;Predictions/prediction_xgb_probability.csv&#39;) xgb_tuned &lt;- read.csv(&#39;Predictions/prediction_xgb_tuned.csv&#39;) # Display statistics summary(test) ## gender_female gender_male age fam_history_overweight1 ## Min. :0.0000 Min. :0.0000 Min. :14.00 Min. :0.0000 ## 1st Qu.:0.0000 1st Qu.:0.0000 1st Qu.:20.00 1st Qu.:1.0000 ## Median :0.0000 Median :1.0000 Median :23.00 Median :1.0000 ## Mean :0.4962 Mean :0.5038 Mean :23.89 Mean :0.8216 ## 3rd Qu.:1.0000 3rd Qu.:1.0000 3rd Qu.:26.00 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.0000 Max. :56.00 Max. :1.0000 ## freq_consumption_hc_food1 veg_freq num_meals ## Min. :0.0000 Min. :1.000 Min. :1.000 ## 1st Qu.:1.0000 1st Qu.:2.000 1st Qu.:3.000 ## Median :1.0000 Median :2.342 Median :3.000 ## Mean :0.9123 Mean :2.440 Mean :2.765 ## 3rd Qu.:1.0000 3rd Qu.:3.000 3rd Qu.:3.000 ## Max. :1.0000 Max. :3.000 Max. :4.000 ## food_between_meals_frequently food_between_meals_never ## Min. :0.000 Min. :0.00000 ## 1st Qu.:0.000 1st Qu.:0.00000 ## Median :0.000 Median :0.00000 ## Mean :0.117 Mean :0.01436 ## 3rd Qu.:0.000 3rd Qu.:0.00000 ## Max. :1.000 Max. :1.00000 ## food_between_meals_sometimes smoke1 water_daily ## Min. :0.0000 Min. :0.00000 Min. :1.000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:1.788 ## Median :1.0000 Median :0.00000 Median :2.000 ## Mean :0.8443 Mean :0.01137 Mean :2.030 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:2.551 ## Max. :1.0000 Max. :1.00000 Max. :3.000 ## caloric_beverages1 activity_freq tech_use alcohol_never ## Min. :0.00000 Min. :0.000000 Min. :0.0000 Min. :0.0000 ## 1st Qu.:0.00000 1st Qu.:0.009276 1st Qu.:0.0000 1st Qu.:0.0000 ## Median :0.00000 Median :1.000000 Median :0.5739 Median :0.0000 ## Mean :0.03343 Mean :0.982525 Mean :0.6188 Mean :0.2514 ## 3rd Qu.:0.00000 3rd Qu.:1.592795 3rd Qu.:1.0000 3rd Qu.:1.0000 ## Max. :1.00000 Max. :3.000000 Max. :2.0000 Max. :1.0000 ## alcohol_sometimes transport_bike transport_motorbike ## Min. :0.0000 Min. :0.000000 Min. :0.000000 ## 1st Qu.:0.0000 1st Qu.:0.000000 1st Qu.:0.000000 ## Median :1.0000 Median :0.000000 Median :0.000000 ## Mean :0.7227 Mean :0.001349 Mean :0.001734 ## 3rd Qu.:1.0000 3rd Qu.:0.000000 3rd Qu.:0.000000 ## Max. :1.0000 Max. :1.000000 Max. :1.000000 ## transport_public_transportation transport_walking obesity_leveloverweight ## Min. :0.0000 Min. :0.00000 Min. :0.0000 ## 1st Qu.:1.0000 1st Qu.:0.00000 1st Qu.:0.0000 ## Median :1.0000 Median :0.00000 Median :1.0000 ## Mean :0.8022 Mean :0.02274 Mean :0.7338 ## 3rd Qu.:1.0000 3rd Qu.:0.00000 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.00000 Max. :1.0000 ## eating_habit_binary physical_activity_binary age_group_young_adult ## Min. :1.000 Min. :-2.0000 Min. :0.000 ## 1st Qu.:2.308 1st Qu.:-0.2696 1st Qu.:1.000 ## Median :2.333 Median : 0.2844 Median :1.000 ## Mean :2.372 Mean : 0.3638 Mean :0.901 ## 3rd Qu.:2.667 3rd Qu.: 1.0000 3rd Qu.:1.000 ## Max. :3.000 Max. : 3.0000 Max. :1.000 ## age_group_adult age_group_senior ## Min. :0.00000 Min. :0.000000 ## 1st Qu.:0.00000 1st Qu.:0.000000 ## Median :0.00000 Median :0.000000 ## Mean :0.05212 Mean :0.003565 ## 3rd Qu.:0.00000 3rd Qu.:0.000000 ## Max. :1.00000 Max. :1.000000 summary(lr) ## x ## Min. :0.0023 ## 1st Qu.:0.5783 ## Median :0.8975 ## Mean :0.7329 ## 3rd Qu.:0.9721 ## Max. :0.9999 summary(lr_complex) ## x ## Min. :0.0000 ## 1st Qu.:0.5404 ## Median :0.9210 ## Mean :0.7333 ## 3rd Qu.:0.9855 ## Max. :1.0000 summary(knn) ## x ## Min. :0.5000 ## 1st Qu.:0.7723 ## Median :0.9109 ## Mean :0.8657 ## 3rd Qu.:0.9802 ## Max. :1.0000 summary(knn_tuned) ## x ## Min. :0.5000 ## 1st Qu.:0.7647 ## Median :0.9375 ## Mean :0.8771 ## 3rd Qu.:1.0000 ## Max. :1.0000 summary(ann) ## V1 ## Min. :0.08761 ## 1st Qu.:0.53668 ## Median :0.90047 ## Mean :0.73205 ## 3rd Qu.:0.97776 ## Max. :1.00227 summary(ann_complex) ## V1 ## Min. :0.04298 ## 1st Qu.:0.51153 ## Median :0.91891 ## Mean :0.73173 ## 3rd Qu.:0.97819 ## Max. :0.97998 summary(dt) ## x ## Min. :0.0000 ## 1st Qu.:1.0000 ## Median :1.0000 ## Mean :0.7505 ## 3rd Qu.:1.0000 ## Max. :1.0000 summary(dt_cost) ## x ## Min. :0.0000 ## 1st Qu.:1.0000 ## Median :1.0000 ## Mean :0.9323 ## 3rd Qu.:1.0000 ## Max. :1.0000 summary(svm_vanilla) ## V1 ## Min. :0.0000 ## 1st Qu.:1.0000 ## Median :1.0000 ## Mean :0.8216 ## 3rd Qu.:1.0000 ## Max. :1.0000 summary(svm_rbf) ## V1 ## Min. :0.000 ## 1st Qu.:1.000 ## Median :1.000 ## Mean :0.765 ## 3rd Qu.:1.000 ## Max. :1.000 summary(rf) ## x ## Min. :0.0000 ## 1st Qu.:0.0000 ## Median :1.0000 ## Mean :0.7352 ## 3rd Qu.:1.0000 ## Max. :1.0000 summary(rf_tuned) ## x ## Min. :0.0000 ## 1st Qu.:0.0000 ## Median :1.0000 ## Mean :0.7328 ## 3rd Qu.:1.0000 ## Max. :1.0000 summary(xgb) ## x ## Min. :0.03182 ## 1st Qu.:0.46929 ## Median :0.91454 ## Mean :0.72143 ## 3rd Qu.:0.96696 ## Max. :0.97641 summary(xgb_tuned) ## x ## Min. :0.0002856 ## 1st Qu.:0.0034169 ## Median :0.0383439 ## Mean :0.2662891 ## 3rd Qu.:0.5447414 ## Max. :0.9967414 # Combine data stacked &lt;- data.frame(lr$x, lr_complex$x, knn$x, knn_tuned$x, ann$V1, ann_complex$V1, dt$x, dt_cost$x, svm_vanilla$V1, svm_rbf$V1, rf$x, rf_tuned$x, xgb$x, xgb_tuned$x, test$obesity_leveloverweight) # Display statistics str(stacked) ## &#39;data.frame&#39;: 10379 obs. of 15 variables: ## $ lr.x : num 0.973 0.973 0.887 0.85 0.814 ... ## $ lr_complex.x : num 0.9923 0.98337 0.9159 0.00328 0.92711 ... ## $ knn.x : num 1 0.98 1 0.554 0.911 ... ## $ knn_tuned.x : num 1 1 1 0.5 1 ... ## $ ann.V1 : num 0.967 0.97 0.89 0.92 0.839 ... ## $ ann_complex.V1 : num 0.974 0.975 0.911 0.943 0.853 ... ## $ dt.x : int 1 1 1 1 1 1 1 0 1 1 ... ## $ dt_cost.x : int 1 1 1 1 1 1 1 1 1 1 ... ## $ svm_vanilla.V1 : int 1 1 1 1 1 0 1 0 1 1 ... ## $ svm_rbf.V1 : int 1 1 1 1 1 0 0 0 1 1 ... ## $ rf.x : int 1 1 1 0 1 0 1 0 1 0 ... ## $ rf_tuned.x : int 1 1 1 0 1 0 1 0 1 0 ... ## $ xgb.x : num 0.961 0.96 0.829 0.344 0.942 ... ## $ xgb_tuned.x : num 0.00345 0.01369 0.19118 0.65338 0.01415 ... ## $ test.obesity_leveloverweight: int 1 1 1 0 1 0 1 0 1 0 ... summary(stacked) ## lr.x lr_complex.x knn.x knn_tuned.x ## Min. :0.0023 Min. :0.0000 Min. :0.5000 Min. :0.5000 ## 1st Qu.:0.5783 1st Qu.:0.5404 1st Qu.:0.7723 1st Qu.:0.7647 ## Median :0.8975 Median :0.9210 Median :0.9109 Median :0.9375 ## Mean :0.7329 Mean :0.7333 Mean :0.8657 Mean :0.8771 ## 3rd Qu.:0.9721 3rd Qu.:0.9855 3rd Qu.:0.9802 3rd Qu.:1.0000 ## Max. :0.9999 Max. :1.0000 Max. :1.0000 Max. :1.0000 ## ann.V1 ann_complex.V1 dt.x dt_cost.x ## Min. :0.08761 Min. :0.04298 Min. :0.0000 Min. :0.0000 ## 1st Qu.:0.53668 1st Qu.:0.51153 1st Qu.:1.0000 1st Qu.:1.0000 ## Median :0.90047 Median :0.91891 Median :1.0000 Median :1.0000 ## Mean :0.73205 Mean :0.73173 Mean :0.7505 Mean :0.9323 ## 3rd Qu.:0.97776 3rd Qu.:0.97819 3rd Qu.:1.0000 3rd Qu.:1.0000 ## Max. :1.00227 Max. :0.97998 Max. :1.0000 Max. :1.0000 ## svm_vanilla.V1 svm_rbf.V1 rf.x rf_tuned.x ## Min. :0.0000 Min. :0.000 Min. :0.0000 Min. :0.0000 ## 1st Qu.:1.0000 1st Qu.:1.000 1st Qu.:0.0000 1st Qu.:0.0000 ## Median :1.0000 Median :1.000 Median :1.0000 Median :1.0000 ## Mean :0.8216 Mean :0.765 Mean :0.7352 Mean :0.7328 ## 3rd Qu.:1.0000 3rd Qu.:1.000 3rd Qu.:1.0000 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.000 Max. :1.0000 Max. :1.0000 ## xgb.x xgb_tuned.x test.obesity_leveloverweight ## Min. :0.03182 Min. :0.0002856 Min. :0.0000 ## 1st Qu.:0.46929 1st Qu.:0.0034169 1st Qu.:0.0000 ## Median :0.91454 Median :0.0383439 Median :1.0000 ## Mean :0.72143 Mean :0.2662891 Mean :0.7338 ## 3rd Qu.:0.96696 3rd Qu.:0.5447414 3rd Qu.:1.0000 ## Max. :0.97641 Max. :0.9967414 Max. :1.0000 head(stacked) ## lr.x lr_complex.x knn.x knn_tuned.x ann.V1 ann_complex.V1 dt.x ## 1 0.9732532 0.992295207 1.0000000 1.000 0.9669177 0.9735016 1 ## 2 0.9734308 0.983365150 0.9801980 1.000 0.9700311 0.9750530 1 ## 3 0.8874567 0.915903312 1.0000000 1.000 0.8897544 0.9113093 1 ## 4 0.8500151 0.003275634 0.5544554 0.500 0.9200170 0.9433609 1 ## 5 0.8139555 0.927113502 0.9108911 1.000 0.8385796 0.8531013 1 ## 6 0.1298087 0.071669274 0.5544554 0.625 0.1988680 0.2216504 1 ## dt_cost.x svm_vanilla.V1 svm_rbf.V1 rf.x rf_tuned.x xgb.x xgb_tuned.x ## 1 1 1 1 1 1 0.9609978 0.003453249 ## 2 1 1 1 1 1 0.9600214 0.013690430 ## 3 1 1 1 1 1 0.8291268 0.191177532 ## 4 1 1 1 0 0 0.3436254 0.653379381 ## 5 1 1 1 1 1 0.9424910 0.014147544 ## 6 1 0 0 0 0 0.2844975 0.921427250 ## test.obesity_leveloverweight ## 1 1 ## 2 1 ## 3 1 ## 4 0 ## 5 1 ## 6 0 10.3 Split Data # Set seed for reproducibility set.seed(12345) # Define training set ratio train_ratio &lt;- 0.70 # Randomly sample training set train_rows &lt;- sample(1:nrow(stacked), train_ratio * nrow(stacked)) #### Logistics regression and Decision Tree Split # Split data into training and testing sets train_sm &lt;- stacked[train_rows, ] test_sm &lt;- stacked[-train_rows, ] 10.4 Define Cost Matrix # Build cost matrix cost_matrix &lt;- matrix(c(0, 8, 1, 0), nrow = 2, byrow = TRUE, dimnames = list(Actual = c(&#39;0&#39;, &#39;1&#39;), Predicted = c(&#39;0&#39;, &#39;1&#39;))) 10.5 Model SM 10.5.1 Simple SM # Build a model model_sm &lt;- C5.0(as.factor(test.obesity_leveloverweight) ~ ., data = train_sm) # Display summary summary(model_sm) ## ## Call: ## C5.0.formula(formula = as.factor(test.obesity_leveloverweight) ~ ., data ## = train_sm) ## ## ## C5.0 [Release 2.07 GPL Edition] Tue Apr 16 19:58:26 2024 ## ------------------------------- ## ## Class specified by attribute `outcome&#39; ## ## Read 7265 cases (15 attributes) from undefined.data ## ## Decision tree: ## ## xgb_tuned.x &lt;= 0.2467366: 1 (4732/142) ## xgb_tuned.x &gt; 0.2467366: ## :...xgb_tuned.x &lt;= 0.3927872: 1 (363/119) ## xgb_tuned.x &gt; 0.3927872: ## :...lr.x &lt;= 0.8505065: 0 (2071/459) ## lr.x &gt; 0.8505065: 1 (99/39) ## ## ## Evaluation on training data (7265 cases): ## ## Decision Tree ## ---------------- ## Size Errors ## ## 4 759(10.4%) &lt;&lt; ## ## ## (a) (b) &lt;-classified as ## ---- ---- ## 1612 300 (a): class 0 ## 459 4894 (b): class 1 ## ## ## Attribute usage: ## ## 100.00% xgb_tuned.x ## 29.87% lr.x ## ## ## Time: 0.0 secs plot(model_sm) varImp(model_sm) ## Overall ## xgb_tuned.x 100.00 ## lr.x 29.87 ## lr_complex.x 0.00 ## knn.x 0.00 ## knn_tuned.x 0.00 ## ann.V1 0.00 ## ann_complex.V1 0.00 ## dt.x 0.00 ## dt_cost.x 0.00 ## svm_vanilla.V1 0.00 ## svm_rbf.V1 0.00 ## rf.x 0.00 ## rf_tuned.x 0.00 ## xgb.x 0.00 According to the plot, it is apparent that the second-level stacked model relies solely on random forest as its predictor for decision making. 10.5.2 SM with Cost Matrix # Build a model model_sm_cost &lt;- C5.0(as.factor(test.obesity_leveloverweight) ~ ., data = train_sm, costs = cost_matrix) # Display summary summary(model_sm_cost) ## ## Call: ## C5.0.formula(formula = as.factor(test.obesity_leveloverweight) ~ ., data ## = train_sm, costs = cost_matrix) ## ## ## C5.0 [Release 2.07 GPL Edition] Tue Apr 16 19:58:26 2024 ## ------------------------------- ## ## Class specified by attribute `outcome&#39; ## ## Read 7265 cases (15 attributes) from undefined.data ## Read misclassification costs from undefined.costs ## ## Decision tree: ## ## dt_cost.x &gt; 0: 1 (6783/1474) ## dt_cost.x &lt;= 0: ## :...xgb.x &lt;= 0.08288926: 0 (246/4) ## xgb.x &gt; 0.08288926: 1 (236/196) ## ## ## Evaluation on training data (7265 cases): ## ## Decision Tree ## ----------------------- ## Size Errors Cost ## ## 3 1674(23.0%) 0.23 &lt;&lt; ## ## ## (a) (b) &lt;-classified as ## ---- ---- ## 242 1670 (a): class 0 ## 4 5349 (b): class 1 ## ## ## Attribute usage: ## ## 100.00% dt_cost.x ## 6.63% xgb.x ## ## ## Time: 0.0 secs plot(model_sm_cost) varImp(model_sm_cost) ## Overall ## dt_cost.x 100.00 ## xgb.x 6.63 ## lr.x 0.00 ## lr_complex.x 0.00 ## knn.x 0.00 ## knn_tuned.x 0.00 ## ann.V1 0.00 ## ann_complex.V1 0.00 ## dt.x 0.00 ## svm_vanilla.V1 0.00 ## svm_rbf.V1 0.00 ## rf.x 0.00 ## rf_tuned.x 0.00 ## xgb_tuned.x 0.00 Incorporating a cost matrix into our stacked model leads to observable differences. According to the plot, L1 DT model with cost matrix and RBF SVM have emerged as top predictors, while LR is now involved in decision making and ANN were implemented during the final stages. 10.6 Evaluate SM 10.6.1 Simple SM # Make a prediction prediction_sm &lt;- predict(model_sm, test_sm) prediction_sm_prob &lt;- predict(model_sm, test_sm, type = &#39;prob&#39;) summary(prediction_sm) ## 0 1 ## 911 2203 # Perform confusion matrix cm_sm &lt;- confusionMatrix(as.factor(prediction_sm), as.factor(test_sm$test.obesity_leveloverweight), positive = &#39;1&#39;) cm_sm ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 716 195 ## 1 135 2068 ## ## Accuracy : 0.894 ## 95% CI : (0.8827, 0.9046) ## No Information Rate : 0.7267 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.7389 ## ## Mcnemar&#39;s Test P-Value : 0.001163 ## ## Sensitivity : 0.9138 ## Specificity : 0.8414 ## Pos Pred Value : 0.9387 ## Neg Pred Value : 0.7859 ## Prevalence : 0.7267 ## Detection Rate : 0.6641 ## Detection Prevalence : 0.7075 ## Balanced Accuracy : 0.8776 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.894, sensitivity of 0.9138, and a Kappa coefficient of 0.7389. We will assess these results towards the conclusion of the assignment when we have completed stacked models. pred &lt;- ROCR::prediction(prediction_sm_prob[,2], test_sm$test.obesity_leveloverweight) perf &lt;- ROCR::performance(pred, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) auc &lt;- ROCR::performance(pred, measure=&quot;auc&quot;) auc &lt;- round(auc@y.values[[1]],3) roc.data &lt;- data.frame(fpr=unlist(perf@x.values), tpr=unlist(perf@y.values), model=&quot;GLM&quot;) ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) + geom_ribbon(alpha=0.2, fill = &quot;blue&quot;) + geom_line(aes(y=tpr), col = &quot;blue&quot;) + geom_abline(intercept = 0, slope = 1, lty = &quot;dashed&quot;) + labs(title = paste0(&quot;Simple Stacked Model ROC Curve w/ AUC=&quot;, auc)) + theme_bw() 10.6.2 SM with Cost Matrix # Make a prediction prediction_sm_cost &lt;- predict(model_sm_cost, test_sm) summary(prediction_sm_cost) ## 0 1 ## 114 3000 # Perform confusion matrix cm_sm_cost &lt;- confusionMatrix(as.factor(prediction_sm_cost), as.factor(test_sm$test.obesity_leveloverweight), positive = &#39;1&#39;) cm_sm_cost ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 112 2 ## 1 739 2261 ## ## Accuracy : 0.762 ## 95% CI : (0.7467, 0.7769) ## No Information Rate : 0.7267 ## P-Value [Acc &gt; NIR] : 4.033e-06 ## ## Kappa : 0.1791 ## ## Mcnemar&#39;s Test P-Value : &lt; 2.2e-16 ## ## Sensitivity : 0.9991 ## Specificity : 0.1316 ## Pos Pred Value : 0.7537 ## Neg Pred Value : 0.9825 ## Prevalence : 0.7267 ## Detection Rate : 0.7261 ## Detection Prevalence : 0.9634 ## Balanced Accuracy : 0.5654 ## ## &#39;Positive&#39; Class : 1 ## Based on the confusion matrix, we observe that the model achieves an accuracy of 0.762, sensitivity of 0.9991, and a Kappa coefficient of 0.1791. We will assess these results towards the conclusion of the assignment when we have completed stacked models. 10.7 Model Evaluations With all models completed, we will now assess their performance and compile a comprehensive accuracy table that showcases essential metrics for each model. In subsequent stages, we will explore the business implications to determine the potential impact of our models. # Load data file_paths &lt;- c( &#39;Confusion Matrix/cm_lr.csv&#39;, &#39;Confusion Matrix/cm_lr_complex.csv&#39;, &#39;Confusion Matrix/cm_knn.csv&#39;, &#39;Confusion Matrix/cm_knn_tuned.csv&#39;, &#39;Confusion Matrix/cm_ann.csv&#39;, &#39;Confusion Matrix/cm_ann_complex.csv&#39;, &#39;Confusion Matrix/cm_dt.csv&#39;, &#39;Confusion Matrix/cm_dt_cost.csv&#39;, &#39;Confusion Matrix/cm_svm_vanilla.csv&#39;, &#39;Confusion Matrix/cm_svm_rbf.csv&#39;, &#39;Confusion Matrix/cm_rf.csv&#39;, &#39;Confusion Matrix/cm_rf_tuned.csv&#39;, &#39;Confusion Matrix/cm_xgb.csv&#39;, &#39;Confusion Matrix/cm_xgb_tuned.csv&#39; ) # Store confusion matrices cms &lt;- list() for (i in seq_along(file_paths)) { cm &lt;- read.csv(file_paths[i]) cm_obj &lt;- confusionMatrix(matrix(c(cm[1,1], cm[1,2], cm[2,1], cm[2,2]), nrow = 2, byrow = TRUE), positive = &#39;B&#39;) var_name &lt;- tools::file_path_sans_ext(basename(file_paths[i])) cms[[var_name]] &lt;- cm_obj } # Extract accuracy accuracy_table &lt;- data.frame( Model = c(&#39;LR&#39;, &#39;LR Complex&#39;, &#39;KNN&#39;, &#39;KNN Tuned&#39;, &#39;ANN&#39;, &#39;ANN Complex&#39;, &#39;DT&#39;, &#39;DT with Cost&#39;, &#39;SVM Vanilla&#39;, &#39;SVM RBF&#39;, &#39;RF&#39;, &#39;RF Tuned&#39;, &#39;XGB&#39;, &#39;XGB Tuned&#39;, &#39;SM&#39;, &#39;SM with Cost&#39;), Accuracy = c( round(cms[[&#39;cm_lr&#39;]]$overall[1], digits = 4), round(cms[[&#39;cm_lr_complex&#39;]]$overall[1], digits = 4), round(cms[[&#39;cm_knn&#39;]]$overall[1], digits = 4), round(cms[[&#39;cm_knn_tuned&#39;]]$overall[1], digits = 4), round(cms[[&#39;cm_ann&#39;]]$overall[1], digits = 4), round(cms[[&#39;cm_ann_complex&#39;]]$overall[1], digits = 4), round(cms[[&#39;cm_dt&#39;]]$overall[1], digits = 4), round(cms[[&#39;cm_dt_cost&#39;]]$overall[1], digits = 4), round(cms[[&#39;cm_svm_vanilla&#39;]]$overall[1], digits = 4), round(cms[[&#39;cm_svm_rbf&#39;]]$overall[1], digits = 4), round(cms[[&#39;cm_rf&#39;]]$overall[1], digits = 4), round(cms[[&#39;cm_rf_tuned&#39;]]$overall[1], digits = 4), round(cms[[&#39;cm_xgb&#39;]]$overall[1], digits = 4), round(cms[[&#39;cm_xgb_tuned&#39;]]$overall[1], digits = 4), round(cm_sm$overall[1], digits = 4), round(cm_sm_cost$overall[1], digits = 4) ), Sensitivity = c( round(cms[[&#39;cm_lr&#39;]]$byClass[1], digits = 4), round(cms[[&#39;cm_lr_complex&#39;]]$byClass[1], digits = 4), round(cms[[&#39;cm_knn&#39;]]$byClass[1], digits = 4), round(cms[[&#39;cm_knn_tuned&#39;]]$byClass[1], digits = 4), round(cms[[&#39;cm_ann&#39;]]$byClass[1], digits = 4), round(cms[[&#39;cm_ann_complex&#39;]]$byClass[1], digits = 4), round(cms[[&#39;cm_dt&#39;]]$byClass[1], digits = 4), round(cms[[&#39;cm_dt_cost&#39;]]$byClass[1], digits = 4), round(cms[[&#39;cm_svm_vanilla&#39;]]$byClass[1], digits = 4), round(cms[[&#39;cm_svm_rbf&#39;]]$byClass[1], digits = 4), round(cms[[&#39;cm_rf&#39;]]$byClass[1], digits = 4), round(cms[[&#39;cm_rf_tuned&#39;]]$byClass[1], digits = 4), round(cms[[&#39;cm_xgb&#39;]]$byClass[1], digits = 4), round(cms[[&#39;cm_xgb_tuned&#39;]]$byClass[1], digits = 4), round(cm_sm$byClass[1], digits = 4), round(cm_sm_cost$byClass[1], digits = 4) ), Kappa = c( round(cms[[&#39;cm_lr&#39;]]$overall[2], digits = 4), round(cms[[&#39;cm_lr_complex&#39;]]$overall[2], digits = 4), round(cms[[&#39;cm_knn&#39;]]$overall[2], digits = 4), round(cms[[&#39;cm_knn_tuned&#39;]]$overall[2], digits = 4), round(cms[[&#39;cm_ann&#39;]]$overall[2], digits = 4), round(cms[[&#39;cm_ann_complex&#39;]]$overall[2], digits = 4), round(cms[[&#39;cm_dt&#39;]]$overall[2], digits = 4), round(cms[[&#39;cm_dt_cost&#39;]]$overall[2], digits = 4), round(cms[[&#39;cm_svm_vanilla&#39;]]$overall[2], digits = 4), round(cms[[&#39;cm_svm_rbf&#39;]]$overall[2], digits = 4), round(cms[[&#39;cm_rf&#39;]]$overall[2], digits = 4), round(cms[[&#39;cm_rf_tuned&#39;]]$overall[2], digits = 4), round(cms[[&#39;cm_xgb&#39;]]$overall[2], digits = 4), round(cms[[&#39;cm_xgb_tuned&#39;]]$overall[2], digits = 4), round(cm_sm$overall[2], digits = 4), round(cm_sm_cost$overall[2], digits = 4) ) ) accuracy_table &lt;- accuracy_table[order(accuracy_table$Accuracy, decreasing = TRUE), ] rownames(accuracy_table) &lt;- NULL # Make table into kable kable_output &lt;- kable(accuracy_table, caption = &quot;Accuracy Table by Model&quot;, format = &quot;html&quot;) |&gt; kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;)) |&gt; footnote(general = &quot;All metrics are calculated using the test set.&quot;, general_title = &quot;Please Note:&quot;, footnote_as_chunk = TRUE) kable_output Table 10.1: Accuracy Table by Model Model Accuracy Sensitivity Kappa SM 0.8940 0.9138 0.7389 XGB Tuned 0.8930 0.9275 0.7258 RF 0.8897 0.9258 0.7171 RF Tuned 0.8886 0.9235 0.7152 XGB 0.8850 0.9266 0.7029 LR Complex 0.8717 0.9313 0.6603 DT 0.8683 0.9216 0.6560 LR 0.8668 0.9379 0.6411 ANN Complex 0.8667 0.9220 0.6508 ANN 0.8666 0.9263 0.6478 SVM RBF 0.8653 0.9295 0.6419 KNN Tuned 0.8579 0.9206 0.6248 KNN 0.8454 0.9304 0.5776 SVM Vanilla 0.8114 0.9313 0.4607 DT with Cost 0.7902 0.9923 0.2955 SM with Cost 0.7620 0.9991 0.1791 Please Note: All metrics are calculated using the test set. "],["conclusion.html", "11 Conclusion 11.1 Takeaways 11.2 Business Impact", " 11 Conclusion 11.1 Takeaways Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Amet mauris commodo quis imperdiet massa tincidunt. Netus et malesuada fames ac turpis egestas maecenas pharetra. Viverra suspendisse potenti nullam ac tortor vitae. Quis blandit turpis cursus in hac habitasse. Lobortis elementum nibh tellus molestie nunc. Habitant morbi tristique senectus et netus et malesuada. A iaculis at erat pellentesque adipiscing commodo. Nisl pretium fusce id velit ut tortor pretium. Scelerisque eu ultrices vitae auctor eu. Fusce id velit ut tortor pretium viverra suspendisse potenti nullam. Eget gravida cum sociis natoque penatibus et. Erat velit scelerisque in dictum non. Nulla facilisi cras fermentum odio eu feugiat pretium nibh. Tempus egestas sed sed risus pretium. Nulla at volutpat diam ut. Amet mattis vulputate enim nulla aliquet porttitor lacus luctus. Sit amet volutpat consequat mauris nunc congue nisi. Cursus mattis molestie a iaculis at erat. Posuere morbi leo urna molestie. In fermentum posuere urna nec tincidunt praesent. Arcu risus quis varius quam quisque id. Proin nibh nisl condimentum id venenatis a. Dui faucibus in ornare quam viverra orci sagittis. Est velit egestas dui id ornare. Adipiscing commodo elit at imperdiet dui accumsan. Vel quam elementum pulvinar etiam non. Nascetur ridiculus mus mauris vitae ultricies leo integer. Mattis rhoncus urna neque viverra justo nec ultrices dui sapien. Sed risus pretium quam vulputate dignissim suspendisse in. Eu feugiat pretium nibh ipsum consequat nisl. Elit at imperdiet dui accumsan sit amet nulla facilisi morbi. 11.2 Business Impact Sit amet aliquam id diam maecenas. Convallis posuere morbi leo urna molestie at elementum eu. Nunc non blandit massa enim nec dui nunc. In arcu cursus euismod quis. Fermentum dui faucibus in ornare quam viverra. Tortor at risus viverra adipiscing at. Sit amet tellus cras adipiscing enim eu turpis. Dui accumsan sit amet nulla facilisi morbi tempus iaculis urna. Ac odio tempor orci dapibus ultrices in iaculis nunc sed. Tellus id interdum velit laoreet id donec. Pellentesque massa placerat duis ultricies lacus. Vitae et leo duis ut diam quam nulla. Nunc scelerisque viverra mauris in. Tristique magna sit amet purus gravida quis. Sodales neque sodales ut etiam sit amet. Pulvinar elementum integer enim neque volutpat ac tincidunt vitae semper. Nec feugiat in fermentum posuere urna nec tincidunt. Purus in massa tempor nec feugiat nisl pretium fusce. "]]
